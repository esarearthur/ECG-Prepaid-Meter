
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021a  00800100  00004c62  00004cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023b  0080031a  0080031a  00004f10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001378  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000374a2  00000000  00000000  000062f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000092a5  00000000  00000000  0003d79a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000af21  00000000  00000000  00046a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003e70  00000000  00000000  00051960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008749  00000000  00000000  000557d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001475b  00000000  00000000  0005df19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001598  00000000  00000000  00072674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
       8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
       c:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__vector_3>
      10:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__vector_4>
      14:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__vector_5>
      18:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      1c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      20:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      24:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      28:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      2c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      30:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      34:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      38:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      3c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      40:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__vector_16>
      44:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      48:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__vector_18>
      4c:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__vector_19>
      50:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      54:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      58:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      5c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      60:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      64:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	50 4f       	sbci	r21, 0xF0	; 240
      6a:	57 45       	sbci	r21, 0x57	; 87
      6c:	52 20       	and	r5, r2
      6e:	44 4f       	sbci	r20, 0xF4	; 244
      70:	57 4e       	sbci	r21, 0xE7	; 231
	...

00000073 <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_6>:
      73:	41 54 2b 43 4f 4c 50 3d 31 00                       AT+COLP=1.

0000007d <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_5>:
      7d:	41 54 5a 00                                         ATZ.

00000081 <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_4>:
      81:	41 54 2b 43 4c 49 50 3d 31 00                       AT+CLIP=1.

0000008b <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_3>:
      8b:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

00000095 <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_2>:
      95:	41 54 2b 49 46 43 3d 31 2c 31 00                    AT+IFC=1,1.

000000a0 <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_1>:
      a0:	2b 43 47 52 45 47 3a 20 30 2c 35 00                 +CGREG: 0,5.

000000ac <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c_0>:
      ac:	2b 43 47 52 45 47 3a 20 30 2c 31 00                 +CGREG: 0,1.

000000b8 <_ZZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEvE3__c>:
      b8:	41 54 2b 43 50 49 4e 3d 00                          AT+CPIN=.

000000c1 <_ZL14_command_CGREG>:
      c1:	41 54 2b 43 47 52 45 47 3f 00                       AT+CGREG?.

000000cb <_ZL11_command_AT>:
      cb:	41 54 00                                            AT.

000000ce <_ZZN26GSM3ShieldV1ClientProvider25recognizeUnsolicitedEventEhE3__c>:
      ce:	43 4c 4f 53 45 44 00                                CLOSED.

000000d5 <_ZZN26GSM3ShieldV1ClientProvider13disconnectTCPEbiE3__c>:
      d5:	41 54 2b 51 49 43 4c 4f 53 45 00                    AT+QICLOSE.

000000e0 <_ZZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEvE3__c_2>:
      e0:	43 4f 4e 4e 45 43 54 20 4f 4b 0d 0a 00              CONNECT OK...

000000ed <_ZZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEvE3__c_1>:
      ed:	41 54 2b 51 49 4f 50 45 4e 3d 00                    AT+QIOPEN=.

000000f8 <_ZZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEvE3__c_0>:
      f8:	41 54 2b 51 49 44 4e 53 49 50 3d 00                 AT+QIDNSIP=.

00000104 <_ZZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEvE3__c>:
     104:	41 54 2b 43 49 50 53 54 41 52 54 3d 00              AT+CIPSTART=.

00000111 <_ZZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEvE3__c>:
     111:	41 54 2b 51 49 4c 4f 43 49 50 00                    AT+QILOCIP.

0000011c <_ZZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEvE3__c>:
     11c:	2b 50 44 50 20 44 45 41 43 54 00                    +PDP DEACT.

00000127 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_10>:
     127:	2e 00                                               ..

00000129 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_9>:
     129:	41 54 2b 43 49 46 53 52 00                          AT+CIFSR.

00000132 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_8>:
     132:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000013b <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_7>:
     13b:	41 54 2b 43 49 50 53 54 41 54 55 53 00              AT+CIPSTATUS.

00000148 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_6>:
     148:	41 54 2b 43 53 54 54 00                             AT+CSTT.

00000150 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_5>:
     150:	41 54 2b 43 49 50 53 54 41 54 55 53 00              AT+CIPSTATUS.

0000015d <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_4>:
     15d:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000168 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_3>:
     168:	41 54 2b 43 47 41 43 54 3d 31 2c 31 00              AT+CGACT=1,1.

00000175 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_2>:
     175:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     185:	22 2c 22 00                                         ",".

00000189 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_1>:
     189:	41 54 2b 43 49 50 53 54 41 54 55 53 00              AT+CIPSTATUS.

00000196 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c_0>:
     196:	41 54 2b 43 49 50 4d 55 58 3d 30 00                 AT+CIPMUX=0.

000001a2 <_ZZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEvE3__c>:
     1a2:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000001ad <_ZL14_command_CGATT>:
     1ad:	41 54 2b 43 47 41 54 54 3d 00                       AT+CGATT=.

000001b7 <_ZZN26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEhE3__c_0>:
     1b7:	43 4f 4e 4e 45 43 54 0d 0a 00                       CONNECT...

000001c1 <_ZZN26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEhE3__c>:
     1c1:	43 4c 4f 53 45 44 0d 0a 00                          CLOSED...

000001ca <_ZZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEvE3__c_1>:
     1ca:	41 54 2b 51 49 53 45 52 56 45 52 00                 AT+QISERVER.

000001d6 <_ZZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEvE3__c_0>:
     1d6:	41 54 2b 51 49 4c 50 4f 52 54 3d 22 54 43 50 22     AT+QILPORT="TCP"
     1e6:	2c 00                                               ,.

000001e8 <_ZZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEvE3__c>:
     1e8:	41 54 2b 51 49 4c 4f 43 49 50 00                    AT+QILOCIP.

000001f3 <_ZZN23GSM3ShieldV1SMSProvider16flushSMSContinueEvE3__c>:
     1f3:	41 54 2b 43 4d 47 44 3d 00                          AT+CMGD=.

000001fc <_ZZN23GSM3ShieldV1SMSProvider20availableSMSContinueEvE3__c>:
     1fc:	41 54 2b 43 4d 47 4c 3d 22 52 45 43 20 55 4e 52     AT+CMGL="REC UNR
     20c:	45 41 44 22 2c 31 00                                EAD",1.

00000213 <_ZZN23GSM3ShieldV1SMSProvider16beginSMSContinueEvE3__c>:
     213:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

0000021d <_ZZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEhE3__c_3>:
     21d:	2b 43 4c 49 50 3a 00                                +CLIP:.

00000224 <_ZZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEhE3__c_2>:
     224:	42 55 53 59 00                                      BUSY.

00000229 <_ZZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEhE3__c_1>:
     229:	4e 4f 20 43 41 52 52 49 45 52 00                    NO CARRIER.

00000234 <_ZZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEhE3__c_0>:
     234:	2b 43 4f 4c 50 3a 00                                +COLP:.

0000023b <_ZZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEhE3__c>:
     23b:	52 49 4e 47 00                                      RING.

00000240 <_ZZN25GSM3ShieldV1VoiceProvider16hangCallContinueEvE3__c>:
     240:	41 54 48 00                                         ATH.

00000244 <_ZZN25GSM3ShieldV1VoiceProvider18answerCallContinueEvE3__c>:
     244:	41 54 41 00                                         ATA.

00000248 <_ZZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEvE3__c>:
     248:	41 54 2b 43 4c 43 43 00                             AT+CLCC.

00000250 <_ZZN25GSM3ShieldV1VoiceProvider9voiceCallEPKcE3__c>:
     250:	41 54 44 00                                         ATD.

00000254 <_ZL5table>:
     254:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
     264:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
     274:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
     284:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
     294:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
     2a4:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
     2b4:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
     2c4:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
     2d4:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

000002e4 <digital_pin_to_timer_PGM>:
     2e4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     2f4:	00 00 00 00                                         ....

000002f8 <digital_pin_to_bit_mask_PGM>:
     2f8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     308:	04 08 10 20                                         ... 

0000030c <digital_pin_to_port_PGM>:
     30c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     31c:	03 03 03 03                                         ....

00000320 <port_to_input_PGM>:
     320:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000032a <port_to_output_PGM>:
     32a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000334 <port_to_mode_PGM>:
     334:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000033e <__ctors_start>:
     33e:	b3 03       	fmuls	r19, r19
     340:	3a 06       	cpc	r3, r26
     342:	48 06       	cpc	r4, r24
     344:	53 06       	cpc	r5, r19
     346:	5e 06       	cpc	r5, r30
     348:	6d 06       	cpc	r6, r29
     34a:	7b 06       	cpc	r7, r27
     34c:	56 09       	sbc	r21, r6
     34e:	35 0a       	sbc	r3, r21
     350:	01 0e       	add	r0, r17
     352:	00 0f       	add	r16, r16
     354:	fe 10       	cpse	r15, r14
     356:	1f 11       	cpse	r17, r15
     358:	2a 11       	cpse	r18, r10
     35a:	35 11       	cpse	r19, r5
     35c:	40 11       	cpse	r20, r0
     35e:	d3 17       	cp	r29, r19
     360:	c1 1a       	sub	r12, r17
     362:	cf 1a       	sub	r12, r31
     364:	0a 1e       	adc	r0, r26
     366:	8f 1e       	adc	r8, r31

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d8 e0       	ldi	r29, 0x08	; 8
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e6       	ldi	r30, 0x62	; 98
     37c:	fc e4       	ldi	r31, 0x4C	; 76
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 31       	cpi	r26, 0x1A	; 26
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	25 e0       	ldi	r18, 0x05	; 5
     38c:	aa e1       	ldi	r26, 0x1A	; 26
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a5 35       	cpi	r26, 0x55	; 85
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>

0000039a <__do_global_ctors>:
     39a:	11 e0       	ldi	r17, 0x01	; 1
     39c:	c4 eb       	ldi	r28, 0xB4	; 180
     39e:	d1 e0       	ldi	r29, 0x01	; 1
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <__do_global_ctors+0x10>
     3a2:	21 97       	sbiw	r28, 0x01	; 1
     3a4:	fe 01       	movw	r30, r28
     3a6:	0e 94 9c 23 	call	0x4738	; 0x4738 <__tablejump2__>
     3aa:	cf 39       	cpi	r28, 0x9F	; 159
     3ac:	d1 07       	cpc	r29, r17
     3ae:	c9 f7       	brne	.-14     	; 0x3a2 <__do_global_ctors+0x8>
     3b0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <main>
     3b4:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <_exit>

000003b8 <__bad_interrupt>:
     3b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003bc <_ZN18GSM3CircularBufferC1EP25GSM3CircularBufferManager>:
			head=(head+1) & __BUFFERMASK__;
			return (char*)theBuffer+head;
		}
	}
	return 0;
}
     3bc:	fc 01       	movw	r30, r24
     3be:	10 82       	st	Z, r1
     3c0:	11 82       	std	Z+1, r1	; 0x01
     3c2:	73 83       	std	Z+3, r23	; 0x03
     3c4:	62 83       	std	Z+2, r22	; 0x02
     3c6:	08 95       	ret

000003c8 <_ZN18GSM3CircularBuffer5writeEc>:
     3c8:	fc 01       	movw	r30, r24
     3ca:	91 81       	ldd	r25, Z+1	; 0x01
     3cc:	9f 5f       	subi	r25, 0xFF	; 255
     3ce:	9f 77       	andi	r25, 0x7F	; 127
     3d0:	80 81       	ld	r24, Z
     3d2:	98 17       	cp	r25, r24
     3d4:	79 f0       	breq	.+30     	; 0x3f4 <_ZN18GSM3CircularBuffer5writeEc+0x2c>
     3d6:	81 81       	ldd	r24, Z+1	; 0x01
     3d8:	df 01       	movw	r26, r30
     3da:	a8 0f       	add	r26, r24
     3dc:	b1 1d       	adc	r27, r1
     3de:	14 96       	adiw	r26, 0x04	; 4
     3e0:	6c 93       	st	X, r22
     3e2:	df 01       	movw	r26, r30
     3e4:	a9 0f       	add	r26, r25
     3e6:	b1 1d       	adc	r27, r1
     3e8:	14 96       	adiw	r26, 0x04	; 4
     3ea:	1c 92       	st	X, r1
     3ec:	91 83       	std	Z+1, r25	; 0x01
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	08 95       	ret
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	08 95       	ret

000003fa <_ZN18GSM3CircularBuffer4readEv>:
     3fa:	fc 01       	movw	r30, r24
     3fc:	90 81       	ld	r25, Z
     3fe:	81 81       	ldd	r24, Z+1	; 0x01
     400:	98 17       	cp	r25, r24
     402:	59 f0       	breq	.+22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     404:	80 81       	ld	r24, Z
     406:	df 01       	movw	r26, r30
     408:	a8 0f       	add	r26, r24
     40a:	b1 1d       	adc	r27, r1
     40c:	14 96       	adiw	r26, 0x04	; 4
     40e:	8c 91       	ld	r24, X
     410:	90 81       	ld	r25, Z
     412:	9f 5f       	subi	r25, 0xFF	; 255
     414:	9f 77       	andi	r25, 0x7F	; 127
     416:	90 83       	st	Z, r25
     418:	08 95       	ret
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	08 95       	ret

0000041e <_ZN18GSM3CircularBuffer4peekEi>:
     41e:	fc 01       	movw	r30, r24
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	80 81       	ld	r24, Z
     424:	89 17       	cp	r24, r25
     426:	18 f4       	brcc	.+6      	; 0x42e <_ZN18GSM3CircularBuffer4peekEi+0x10>
     428:	81 81       	ldd	r24, Z+1	; 0x01
     42a:	90 81       	ld	r25, Z
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_ZN18GSM3CircularBuffer4peekEi+0x16>
     42e:	81 81       	ldd	r24, Z+1	; 0x01
     430:	90 81       	ld	r25, Z
     432:	80 58       	subi	r24, 0x80	; 128
     434:	89 1b       	sub	r24, r25
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	68 17       	cp	r22, r24
     43a:	79 07       	cpc	r23, r25
     43c:	2c f4       	brge	.+10     	; 0x448 <_ZN18GSM3CircularBuffer4peekEi+0x2a>
     43e:	80 81       	ld	r24, Z
     440:	e8 0f       	add	r30, r24
     442:	f1 1d       	adc	r31, r1
     444:	84 81       	ldd	r24, Z+4	; 0x04
     446:	08 95       	ret
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 95       	ret

0000044c <_ZN18GSM3CircularBuffer5flushEv>:
     44c:	fc 01       	movw	r30, r24
     44e:	21 81       	ldd	r18, Z+1	; 0x01
     450:	20 83       	st	Z, r18
     452:	08 95       	ret

00000454 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_>:
		return false;
	}
}

bool GSM3CircularBuffer::locate(const char* reference, byte thishead, byte thistail, byte* from, byte* to)
{
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	dc 01       	movw	r26, r24
	int refcursor=0;
	bool into=false;
	byte b2, binit;
	bool possible=1;
	
	if(reference[0]==0)
     468:	eb 01       	movw	r28, r22
     46a:	88 81       	ld	r24, Y
     46c:	88 23       	and	r24, r24
     46e:	89 f1       	breq	.+98     	; 0x4d2 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x7e>
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	e0 e0       	ldi	r30, 0x00	; 0
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	09 c0       	rjmp	.+18     	; 0x48a <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x36>
					if(to)	
						*to=b2;
					return true;
				}
			}
			else if (into==true)
     478:	31 11       	cpse	r19, r1
     47a:	30 c0       	rjmp	.+96     	; 0x4dc <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x88>
     47c:	51 e0       	ldi	r21, 0x01	; 1
			{
				possible = 0;
				into=false;
				refcursor=0;
			}
			b2=(b2+1)& __BUFFERMASK__;
     47e:	9f 5f       	subi	r25, 0xFF	; 255
     480:	9f 77       	andi	r25, 0x7F	; 127
		
	for(byte b1=thishead; b1!=thistail;b1=(b1+1)& __BUFFERMASK__)
	{
		possible = 1;
		b2 = b1;
		while (possible&&(b2!=thistail))
     482:	51 11       	cpse	r21, r1
     484:	30 c0       	rjmp	.+96     	; 0x4e6 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x92>
	bool possible=1;
	
	if(reference[0]==0)
		return true;
		
	for(byte b1=thishead; b1!=thistail;b1=(b1+1)& __BUFFERMASK__)
     486:	4f 5f       	subi	r20, 0xFF	; 255
     488:	4f 77       	andi	r20, 0x7F	; 127
     48a:	42 17       	cp	r20, r18
     48c:	79 f1       	breq	.+94     	; 0x4ec <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x98>
     48e:	94 2f       	mov	r25, r20
	{
		possible = 1;
		b2 = b1;
		while (possible&&(b2!=thistail))
		{	
			if(theBuffer[b2]==reference[refcursor])
     490:	6d 01       	movw	r12, r26
     492:	c9 0e       	add	r12, r25
     494:	d1 1c       	adc	r13, r1
     496:	e6 01       	movw	r28, r12
     498:	5c 81       	ldd	r21, Y+4	; 0x04
     49a:	6b 01       	movw	r12, r22
     49c:	ce 0e       	add	r12, r30
     49e:	df 1e       	adc	r13, r31
     4a0:	e6 01       	movw	r28, r12
     4a2:	88 81       	ld	r24, Y
     4a4:	58 13       	cpse	r21, r24
     4a6:	e8 cf       	rjmp	.-48     	; 0x478 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x24>
			{
				if(!into)	
     4a8:	31 11       	cpse	r19, r1
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x5a>
     4ac:	b9 2e       	mov	r11, r25
					binit=b2;
				into=true;
				refcursor++;
     4ae:	31 96       	adiw	r30, 0x01	; 1
				if(reference[refcursor]==0)
     4b0:	6b 01       	movw	r12, r22
     4b2:	ce 0e       	add	r12, r30
     4b4:	df 1e       	adc	r13, r31
     4b6:	e6 01       	movw	r28, r12
     4b8:	88 81       	ld	r24, Y
     4ba:	81 11       	cpse	r24, r1
     4bc:	0c c0       	rjmp	.+24     	; 0x4d6 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x82>
				{
					if(from) 
     4be:	01 15       	cp	r16, r1
     4c0:	11 05       	cpc	r17, r1
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x74>
						*from=binit;
     4c4:	f8 01       	movw	r30, r16
     4c6:	b0 82       	st	Z, r11
					if(to)	
     4c8:	e1 14       	cp	r14, r1
     4ca:	f1 04       	cpc	r15, r1
     4cc:	11 f0       	breq	.+4      	; 0x4d2 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x7e>
						*to=b2;
     4ce:	e7 01       	movw	r28, r14
     4d0:	98 83       	st	Y, r25
					return true;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0c c0       	rjmp	.+24     	; 0x4ee <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x9a>
     4d6:	51 e0       	ldi	r21, 0x01	; 1
		{	
			if(theBuffer[b2]==reference[refcursor])
			{
				if(!into)	
					binit=b2;
				into=true;
     4d8:	31 e0       	ldi	r19, 0x01	; 1
     4da:	d1 cf       	rjmp	.-94     	; 0x47e <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x2a>
					return true;
				}
			}
			else if (into==true)
			{
				possible = 0;
     4dc:	50 e0       	ldi	r21, 0x00	; 0
				into=false;
     4de:	30 e0       	ldi	r19, 0x00	; 0
				refcursor=0;
     4e0:	e0 e0       	ldi	r30, 0x00	; 0
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	cc cf       	rjmp	.-104    	; 0x47e <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x2a>
		
	for(byte b1=thishead; b1!=thistail;b1=(b1+1)& __BUFFERMASK__)
	{
		possible = 1;
		b2 = b1;
		while (possible&&(b2!=thistail))
     4e6:	92 13       	cpse	r25, r18
     4e8:	d3 cf       	rjmp	.-90     	; 0x490 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x3c>
     4ea:	cd cf       	rjmp	.-102    	; 0x486 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_+0x32>
				refcursor=0;
			}
			b2=(b2+1)& __BUFFERMASK__;
		}
	}
	return false;
     4ec:	80 e0       	ldi	r24, 0x00	; 0
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	08 95       	ret

00000502 <_ZN18GSM3CircularBuffer6locateEPKc>:
	return 0;
}


bool GSM3CircularBuffer::locate(const char* reference)
{
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17

	return locate(reference, head, tail, 0, 0);
     50a:	fc 01       	movw	r30, r24
     50c:	21 81       	ldd	r18, Z+1	; 0x01
     50e:	40 81       	ld	r20, Z
     510:	e1 2c       	mov	r14, r1
     512:	f1 2c       	mov	r15, r1
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_>
}
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	08 95       	ret

00000526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>:

bool GSM3CircularBuffer::chopUntil(const char* reference, bool movetotheend, bool usehead)
{
     526:	af 92       	push	r10
     528:	bf 92       	push	r11
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	00 d0       	rcall	.+0      	; 0x53c <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x16>
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	6c 01       	movw	r12, r24
     542:	b4 2e       	mov	r11, r20
     544:	a2 2e       	mov	r10, r18
	byte from, to;

	if(locate(reference, head, tail, &from, &to))
     546:	fc 01       	movw	r30, r24
     548:	21 81       	ldd	r18, Z+1	; 0x01
     54a:	40 81       	ld	r20, Z
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	7c 01       	movw	r14, r24
     552:	8e 01       	movw	r16, r28
     554:	0e 5f       	subi	r16, 0xFE	; 254
     556:	1f 4f       	sbci	r17, 0xFF	; 255
     558:	c6 01       	movw	r24, r12
     55a:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_>
     55e:	88 23       	and	r24, r24
     560:	a9 f0       	breq	.+42     	; 0x58c <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x66>
	{
		if(usehead)
     562:	aa 20       	and	r10, r10
     564:	51 f0       	breq	.+20     	; 0x57a <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x54>
		{
			if(movetotheend)
     566:	bb 20       	and	r11, r11
     568:	21 f0       	breq	.+8      	; 0x572 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x4c>
				head=(to+1) & __BUFFERMASK__;
     56a:	99 81       	ldd	r25, Y+1	; 0x01
     56c:	9f 5f       	subi	r25, 0xFF	; 255
     56e:	9f 77       	andi	r25, 0x7F	; 127
     570:	01 c0       	rjmp	.+2      	; 0x574 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x4e>
			else
				head=from;
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	f6 01       	movw	r30, r12
     576:	90 83       	st	Z, r25
     578:	09 c0       	rjmp	.+18     	; 0x58c <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x66>
		}
		else
		{
			if(movetotheend)
     57a:	bb 20       	and	r11, r11
     57c:	21 f0       	breq	.+8      	; 0x586 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x60>
				tail=(to+1) & __BUFFERMASK__;
     57e:	99 81       	ldd	r25, Y+1	; 0x01
     580:	9f 5f       	subi	r25, 0xFF	; 255
     582:	9f 77       	andi	r25, 0x7F	; 127
     584:	01 c0       	rjmp	.+2      	; 0x588 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb+0x62>
			else
				tail=from;
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	f6 01       	movw	r30, r12
     58a:	91 83       	std	Z+1, r25	; 0x01
	}
	else
	{
		return false;
	}
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	bf 90       	pop	r11
     5a2:	af 90       	pop	r10
     5a4:	08 95       	ret

000005a6 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci>:
	}
	return false;
}

bool GSM3CircularBuffer::extractSubstring(const char* from, const char* to, char* buffer, int bufsize)
{
     5a6:	8f 92       	push	r8
     5a8:	9f 92       	push	r9
     5aa:	af 92       	push	r10
     5ac:	bf 92       	push	r11
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci+0x1a>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	6c 01       	movw	r12, r24
     5c6:	4a 01       	movw	r8, r20
     5c8:	59 01       	movw	r10, r18
	
//DEBUG
//Serial.println("Beginning extractSubstring");
//Serial.print("head,tail=");Serial.print(int(head));Serial.print(",");Serial.println(int(tail));
	
	if(!locate(from, head, tail, 0, &t1))
     5ca:	fc 01       	movw	r30, r24
     5cc:	21 81       	ldd	r18, Z+1	; 0x01
     5ce:	40 81       	ld	r20, Z
     5d0:	ce 01       	movw	r24, r28
     5d2:	02 96       	adiw	r24, 0x02	; 2
     5d4:	7c 01       	movw	r14, r24
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	10 e0       	ldi	r17, 0x00	; 0
     5da:	c6 01       	movw	r24, r12
     5dc:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_>
     5e0:	81 11       	cpse	r24, r1
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci+0x42>
		return false;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	2b c0       	rjmp	.+86     	; 0x63e <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci+0x98>
		
//DEBUG
//Serial.println("Located chain from.");

	t1++; //To point the next.
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	41 e0       	ldi	r20, 0x01	; 1
     5ec:	48 0f       	add	r20, r24
     5ee:	4a 83       	std	Y+2, r20	; 0x02
	if(!locate(to, t1, tail, &h2, 0))
     5f0:	f6 01       	movw	r30, r12
     5f2:	21 81       	ldd	r18, Z+1	; 0x01
     5f4:	e1 2c       	mov	r14, r1
     5f6:	f1 2c       	mov	r15, r1
     5f8:	8e 01       	movw	r16, r28
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	b4 01       	movw	r22, r8
     600:	c6 01       	movw	r24, r12
     602:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN18GSM3CircularBuffer6locateEPKchhPhS2_>
     606:	88 23       	and	r24, r24
     608:	69 f3       	breq	.-38     	; 0x5e4 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci+0x3e>
//Serial.println("Located chain to.");
/*Serial.print("t1=");Serial.println(int(t1));
Serial.print("h2=");Serial.println(int(h2));*/


	for(i=0,b=t1;i<bufsize, b!=((h2) & __BUFFERMASK__); i++, b=(b+1)& __BUFFERMASK__)
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	49 81       	ldd	r20, Y+1	; 0x01
     60e:	4f 77       	andi	r20, 0x7F	; 127
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	f5 01       	movw	r30, r10
     614:	bf 01       	movw	r22, r30
     616:	6a 19       	sub	r22, r10
     618:	7b 09       	sbc	r23, r11
     61a:	29 2f       	mov	r18, r25
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	24 17       	cp	r18, r20
     620:	35 07       	cpc	r19, r21
     622:	49 f0       	breq	.+18     	; 0x636 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci+0x90>
		buffer[i]=theBuffer[b];
     624:	d6 01       	movw	r26, r12
     626:	a2 0f       	add	r26, r18
     628:	b3 1f       	adc	r27, r19
     62a:	14 96       	adiw	r26, 0x04	; 4
     62c:	2c 91       	ld	r18, X
     62e:	21 93       	st	Z+, r18
//Serial.println("Located chain to.");
/*Serial.print("t1=");Serial.println(int(t1));
Serial.print("h2=");Serial.println(int(h2));*/


	for(i=0,b=t1;i<bufsize, b!=((h2) & __BUFFERMASK__); i++, b=(b+1)& __BUFFERMASK__)
     630:	9f 5f       	subi	r25, 0xFF	; 255
     632:	9f 77       	andi	r25, 0x7F	; 127
     634:	ef cf       	rjmp	.-34     	; 0x614 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci+0x6e>
		buffer[i]=theBuffer[b];
	buffer[i]=0;
     636:	f5 01       	movw	r30, r10
     638:	e6 0f       	add	r30, r22
     63a:	f7 1f       	adc	r31, r23
     63c:	10 82       	st	Z, r1
//DEBUG		
//Serial.println("");
//Serial.println("Finishing extractSubstring");	
	
	return true;	
}
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	08 95       	ret

0000065c <_ZN18GSM3CircularBuffer7readIntEv>:

int GSM3CircularBuffer::readInt()
{
     65c:	fc 01       	movw	r30, r24
	int res=0;
	byte c;
	bool anyfound=false;
	bool negative=false;
	for(byte b=head + 1; b!=tail; b=(b+1)& __BUFFERMASK__)
     65e:	90 81       	ld	r25, Z
     660:	9f 5f       	subi	r25, 0xFF	; 255
int GSM3CircularBuffer::readInt()
{
	int res=0;
	byte c;
	bool anyfound=false;
	bool negative=false;
     662:	60 e0       	ldi	r22, 0x00	; 0

int GSM3CircularBuffer::readInt()
{
	int res=0;
	byte c;
	bool anyfound=false;
     664:	40 e0       	ldi	r20, 0x00	; 0
	return true;	
}

int GSM3CircularBuffer::readInt()
{
	int res=0;
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
			negative=true;
			anyfound=true;  // Don't admit blanks after -
		} else if((c>='0')&&(c<='9'))
		{
			anyfound=true;
			res=(res*10)+(int)c-48;
     66a:	7a e0       	ldi	r23, 0x0A	; 10
{
	int res=0;
	byte c;
	bool anyfound=false;
	bool negative=false;
	for(byte b=head + 1; b!=tail; b=(b+1)& __BUFFERMASK__)
     66c:	81 81       	ldd	r24, Z+1	; 0x01
     66e:	98 17       	cp	r25, r24
     670:	11 f1       	breq	.+68     	; 0x6b6 <_ZN18GSM3CircularBuffer7readIntEv+0x5a>
	{
		c=theBuffer[b];
     672:	df 01       	movw	r26, r30
     674:	a9 0f       	add	r26, r25
     676:	b1 1d       	adc	r27, r1
     678:	14 96       	adiw	r26, 0x04	; 4
     67a:	5c 91       	ld	r21, X
		if((c==' ' )&&(!anyfound))
     67c:	50 32       	cpi	r21, 0x20	; 32
     67e:	19 f4       	brne	.+6      	; 0x686 <_ZN18GSM3CircularBuffer7readIntEv+0x2a>
     680:	41 11       	cpse	r20, r1
     682:	05 c0       	rjmp	.+10     	; 0x68e <_ZN18GSM3CircularBuffer7readIntEv+0x32>
     684:	15 c0       	rjmp	.+42     	; 0x6b0 <_ZN18GSM3CircularBuffer7readIntEv+0x54>
		{
		} else if((c=='-' )&&(!anyfound))
     686:	5d 32       	cpi	r21, 0x2D	; 45
     688:	11 f4       	brne	.+4      	; 0x68e <_ZN18GSM3CircularBuffer7readIntEv+0x32>
     68a:	44 23       	and	r20, r20
     68c:	79 f0       	breq	.+30     	; 0x6ac <_ZN18GSM3CircularBuffer7readIntEv+0x50>
		{
			negative=true;
			anyfound=true;  // Don't admit blanks after -
		} else if((c>='0')&&(c<='9'))
     68e:	80 ed       	ldi	r24, 0xD0	; 208
     690:	85 0f       	add	r24, r21
     692:	8a 30       	cpi	r24, 0x0A	; 10
     694:	80 f4       	brcc	.+32     	; 0x6b6 <_ZN18GSM3CircularBuffer7readIntEv+0x5a>
		{
			anyfound=true;
			res=(res*10)+(int)c-48;
     696:	72 9f       	mul	r23, r18
     698:	d0 01       	movw	r26, r0
     69a:	73 9f       	mul	r23, r19
     69c:	b0 0d       	add	r27, r0
     69e:	11 24       	eor	r1, r1
     6a0:	9d 01       	movw	r18, r26
     6a2:	25 0f       	add	r18, r21
     6a4:	31 1d       	adc	r19, r1
     6a6:	20 53       	subi	r18, 0x30	; 48
     6a8:	31 09       	sbc	r19, r1
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <_ZN18GSM3CircularBuffer7readIntEv+0x52>
		c=theBuffer[b];
		if((c==' ' )&&(!anyfound))
		{
		} else if((c=='-' )&&(!anyfound))
		{
			negative=true;
     6ac:	61 e0       	ldi	r22, 0x01	; 1
			anyfound=true;  // Don't admit blanks after -
     6ae:	41 e0       	ldi	r20, 0x01	; 1
{
	int res=0;
	byte c;
	bool anyfound=false;
	bool negative=false;
	for(byte b=head + 1; b!=tail; b=(b+1)& __BUFFERMASK__)
     6b0:	9f 5f       	subi	r25, 0xFF	; 255
     6b2:	9f 77       	andi	r25, 0x7F	; 127
     6b4:	db cf       	rjmp	.-74     	; 0x66c <_ZN18GSM3CircularBuffer7readIntEv+0x10>
				if(negative)
					res=(-1)*res;
				return res;
			}
	}
	if(negative)
     6b6:	66 23       	and	r22, r22
     6b8:	19 f0       	breq	.+6      	; 0x6c0 <_ZN18GSM3CircularBuffer7readIntEv+0x64>
		res=(-1)*res;
     6ba:	31 95       	neg	r19
     6bc:	21 95       	neg	r18
     6be:	31 09       	sbc	r19, r1
	return res;
}
     6c0:	c9 01       	movw	r24, r18
     6c2:	08 95       	ret

000006c4 <_ZN18GSM3CircularBuffer14printCharDebugEh>:
		printCharDebug(theBuffer[b]);
	Serial.println();
}

void GSM3CircularBuffer::printCharDebug(uint8_t c)
{
     6c4:	cf 93       	push	r28
     6c6:	68 2f       	mov	r22, r24
	if((c>31)&&(c<127))
     6c8:	80 ee       	ldi	r24, 0xE0	; 224
     6ca:	86 0f       	add	r24, r22
     6cc:	8f 35       	cpi	r24, 0x5F	; 95
     6ce:	70 f0       	brcs	.+28     	; 0x6ec <_ZN18GSM3CircularBuffer14printCharDebugEh+0x28>
     6d0:	c6 2f       	mov	r28, r22
		Serial.print((char)c);
	else
	{
		Serial.print('%');
     6d2:	65 e2       	ldi	r22, 0x25	; 37
     6d4:	85 ea       	ldi	r24, 0xA5	; 165
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
		Serial.print(c);
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	6c 2f       	mov	r22, r28
     6e2:	85 ea       	ldi	r24, 0xA5	; 165
     6e4:	94 e0       	ldi	r25, 0x04	; 4
     6e6:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_ZN5Print5printEhi>
		Serial.print('%');
     6ea:	65 e2       	ldi	r22, 0x25	; 37
     6ec:	85 ea       	ldi	r24, 0xA5	; 165
     6ee:	94 e0       	ldi	r25, 0x04	; 4
	}
}
     6f0:	cf 91       	pop	r28
		Serial.print((char)c);
	else
	{
		Serial.print('%');
		Serial.print(c);
		Serial.print('%');
     6f2:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <_ZN5Print5printEc>

000006f6 <_ZN18GSM3CircularBuffer11debugBufferEv>:
		res=(-1)*res;
	return res;
}

void GSM3CircularBuffer::debugBuffer()
{
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	8c 01       	movw	r16, r24
	byte h1=head;
     700:	fc 01       	movw	r30, r24
     702:	c0 81       	ld	r28, Z
	byte t1=tail;
     704:	d1 81       	ldd	r29, Z+1	; 0x01
	Serial.println();
     706:	85 ea       	ldi	r24, 0xA5	; 165
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <_ZN5Print7printlnEv>
	Serial.print(h1);
     70e:	4a e0       	ldi	r20, 0x0A	; 10
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	6c 2f       	mov	r22, r28
     714:	85 ea       	ldi	r24, 0xA5	; 165
     716:	94 e0       	ldi	r25, 0x04	; 4
     718:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_ZN5Print5printEhi>
	Serial.print(" ");
     71c:	65 e2       	ldi	r22, 0x25	; 37
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	85 ea       	ldi	r24, 0xA5	; 165
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
	Serial.print(t1);
     728:	4a e0       	ldi	r20, 0x0A	; 10
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	6d 2f       	mov	r22, r29
     72e:	85 ea       	ldi	r24, 0xA5	; 165
     730:	94 e0       	ldi	r25, 0x04	; 4
     732:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_ZN5Print5printEhi>
	Serial.print('>');
     736:	6e e3       	ldi	r22, 0x3E	; 62
     738:	85 ea       	ldi	r24, 0xA5	; 165
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
	for(byte b=h1; b!=t1; b=(b+1)& __BUFFERMASK__)
     740:	cd 17       	cp	r28, r29
     742:	49 f0       	breq	.+18     	; 0x756 <_ZN18GSM3CircularBuffer11debugBufferEv+0x60>
		printCharDebug(theBuffer[b]);
     744:	f8 01       	movw	r30, r16
     746:	ec 0f       	add	r30, r28
     748:	f1 1d       	adc	r31, r1
     74a:	84 81       	ldd	r24, Z+4	; 0x04
     74c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN18GSM3CircularBuffer14printCharDebugEh>
	Serial.println();
	Serial.print(h1);
	Serial.print(" ");
	Serial.print(t1);
	Serial.print('>');
	for(byte b=h1; b!=t1; b=(b+1)& __BUFFERMASK__)
     750:	cf 5f       	subi	r28, 0xFF	; 255
     752:	cf 77       	andi	r28, 0x7F	; 127
     754:	f5 cf       	rjmp	.-22     	; 0x740 <_ZN18GSM3CircularBuffer11debugBufferEv+0x4a>
		printCharDebug(theBuffer[b]);
	Serial.println();
     756:	85 ea       	ldi	r24, 0xA5	; 165
     758:	94 e0       	ldi	r25, 0x04	; 4
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
	Serial.print(" ");
	Serial.print(t1);
	Serial.print('>');
	for(byte b=h1; b!=t1; b=(b+1)& __BUFFERMASK__)
		printCharDebug(theBuffer[b]);
	Serial.println();
     762:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <_ZN5Print7printlnEv>

00000766 <_GLOBAL__sub_I_theGSM3MobileClientProvider>:
The latest version of this library can always be found at
https://github.com/BlueVia/Official-Arduino
*/
#include <GSM3MobileClientProvider.h>

GSM3MobileClientProvider* theGSM3MobileClientProvider;
     766:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8c e1       	ldi	r24, 0x1C	; 28
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <_ZN23GSM3MobileClientService9connectedEv>:
{
	if(!(flags & GSM3MOBILECLIENTSERVICE_WRITING))
		beginWrite(true);
	theGSM3MobileClientProvider->writeSocket((const char*)(buf));
	return strlen((const char*)buf);
}
     77c:	dc 01       	movw	r26, r24
     77e:	1c 96       	adiw	r26, 0x0c	; 12
     780:	6c 91       	ld	r22, X
     782:	6f 3f       	cpi	r22, 0xFF	; 255
     784:	59 f0       	breq	.+22     	; 0x79c <_ZN23GSM3MobileClientService9connectedEv+0x20>
     786:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     78a:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     78e:	dc 01       	movw	r26, r24
     790:	ed 91       	ld	r30, X+
     792:	fc 91       	ld	r31, X
     794:	06 80       	ldd	r0, Z+6	; 0x06
     796:	f7 81       	ldd	r31, Z+7	; 0x07
     798:	e0 2d       	mov	r30, r0
     79a:	09 94       	ijmp
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	08 95       	ret

000007a0 <_ZN23GSM3MobileClientServicecvbEv>:
     7a0:	dc 01       	movw	r26, r24
     7a2:	ed 91       	ld	r30, X+
     7a4:	fc 91       	ld	r31, X
     7a6:	04 88       	ldd	r0, Z+20	; 0x14
     7a8:	f5 89       	ldd	r31, Z+21	; 0x15
     7aa:	e0 2d       	mov	r30, r0
     7ac:	09 95       	icall
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <_ZN23GSM3MobileClientServicecvbEv+0x16>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	89 2f       	mov	r24, r25
     7b8:	08 95       	ret

000007ba <_ZN23GSM3MobileClientService4readEPhj>:
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	7c 01       	movw	r14, r24
     7cc:	6a 01       	movw	r12, r20
     7ce:	8b 01       	movw	r16, r22
     7d0:	c0 e0       	ldi	r28, 0x00	; 0
     7d2:	d0 e0       	ldi	r29, 0x00	; 0
     7d4:	cc 15       	cp	r28, r12
     7d6:	dd 05       	cpc	r29, r13
     7d8:	79 f0       	breq	.+30     	; 0x7f8 <_ZN23GSM3MobileClientService4readEPhj+0x3e>
     7da:	d7 01       	movw	r26, r14
     7dc:	ed 91       	ld	r30, X+
     7de:	fc 91       	ld	r31, X
     7e0:	06 80       	ldd	r0, Z+6	; 0x06
     7e2:	f7 81       	ldd	r31, Z+7	; 0x07
     7e4:	e0 2d       	mov	r30, r0
     7e6:	c7 01       	movw	r24, r14
     7e8:	09 95       	icall
     7ea:	88 23       	and	r24, r24
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <_ZN23GSM3MobileClientService4readEPhj+0x3e>
     7ee:	f8 01       	movw	r30, r16
     7f0:	81 93       	st	Z+, r24
     7f2:	8f 01       	movw	r16, r30
     7f4:	21 96       	adiw	r28, 0x01	; 1
     7f6:	ee cf       	rjmp	.-36     	; 0x7d4 <_ZN23GSM3MobileClientService4readEPhj+0x1a>
     7f8:	ce 01       	movw	r24, r28
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	08 95       	ret

0000080c <_ZN23GSM3MobileClientServiceC1Eb>:
     80c:	fc 01       	movw	r30, r24
     80e:	13 82       	std	Z+3, r1	; 0x03
     810:	12 82       	std	Z+2, r1	; 0x02
     812:	88 ee       	ldi	r24, 0xE8	; 232
     814:	93 e0       	ldi	r25, 0x03	; 3
     816:	a0 e0       	ldi	r26, 0x00	; 0
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	84 83       	std	Z+4, r24	; 0x04
     81c:	95 83       	std	Z+5, r25	; 0x05
     81e:	a6 83       	std	Z+6, r26	; 0x06
     820:	b7 83       	std	Z+7, r27	; 0x07
     822:	8b e2       	ldi	r24, 0x2B	; 43
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	80 83       	st	Z, r24
     82a:	61 11       	cpse	r22, r1
     82c:	02 c0       	rjmp	.+4      	; 0x832 <_ZN23GSM3MobileClientServiceC1Eb+0x26>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	01 c0       	rjmp	.+2      	; 0x834 <_ZN23GSM3MobileClientServiceC1Eb+0x28>
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	85 87       	std	Z+13, r24	; 0x0d
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	84 87       	std	Z+12, r24	; 0x0c
     83a:	08 95       	ret

0000083c <_ZN23GSM3MobileClientService5readyEv>:
     83c:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     840:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     844:	dc 01       	movw	r26, r24
     846:	ed 91       	ld	r30, X+
     848:	fc 91       	ld	r31, X
     84a:	04 80       	ldd	r0, Z+4	; 0x04
     84c:	f5 81       	ldd	r31, Z+5	; 0x05
     84e:	e0 2d       	mov	r30, r0
     850:	09 94       	ijmp

00000852 <_ZN23GSM3MobileClientService13waitForAnswerEv>:
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ec 01       	movw	r28, r24
     860:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
     864:	6b 01       	movw	r12, r22
     866:	7c 01       	movw	r14, r24
     868:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
     86c:	ab 01       	movw	r20, r22
     86e:	bc 01       	movw	r22, r24
     870:	4c 19       	sub	r20, r12
     872:	5d 09       	sbc	r21, r13
     874:	6e 09       	sbc	r22, r14
     876:	7f 09       	sbc	r23, r15
     878:	40 31       	cpi	r20, 0x10	; 16
     87a:	57 42       	sbci	r21, 0x27	; 39
     87c:	61 05       	cpc	r22, r1
     87e:	71 05       	cpc	r23, r1
     880:	50 f0       	brcs	.+20     	; 0x896 <_ZN23GSM3MobileClientService13waitForAnswerEv+0x44>
     882:	ce 01       	movw	r24, r28
     884:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN23GSM3MobileClientService5readyEv>
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	79 f0       	breq	.+30     	; 0x8ae <_ZN23GSM3MobileClientService13waitForAnswerEv+0x5c>
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	0c c0       	rjmp	.+24     	; 0x8ae <_ZN23GSM3MobileClientService13waitForAnswerEv+0x5c>
     896:	ce 01       	movw	r24, r28
     898:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN23GSM3MobileClientService5readyEv>
     89c:	89 2b       	or	r24, r25
     89e:	89 f7       	brne	.-30     	; 0x882 <_ZN23GSM3MobileClientService13waitForAnswerEv+0x30>
     8a0:	64 e6       	ldi	r22, 0x64	; 100
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
     8ac:	dd cf       	rjmp	.-70     	; 0x868 <_ZN23GSM3MobileClientService13waitForAnswerEv+0x16>
     8ae:	c9 01       	movw	r24, r18
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	08 95       	ret

000008be <_ZN23GSM3MobileClientService7connectEPKcj>:
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <__data_end>
     8ce:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <__data_end+0x1>
     8d2:	10 97       	sbiw	r26, 0x00	; 0
     8d4:	49 f1       	breq	.+82     	; 0x928 <__stack+0x29>
     8d6:	7a 01       	movw	r14, r20
     8d8:	8b 01       	movw	r16, r22
     8da:	ec 01       	movw	r28, r24
     8dc:	ed 91       	ld	r30, X+
     8de:	fc 91       	ld	r31, X
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	00 84       	ldd	r0, Z+8	; 0x08
     8e4:	f1 85       	ldd	r31, Z+9	; 0x09
     8e6:	e0 2d       	mov	r30, r0
     8e8:	6f ef       	ldi	r22, 0xFF	; 255
     8ea:	7f ef       	ldi	r23, 0xFF	; 255
     8ec:	cd 01       	movw	r24, r26
     8ee:	09 95       	icall
     8f0:	9c 01       	movw	r18, r24
     8f2:	8c 87       	std	Y+12, r24	; 0x0c
     8f4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     8f8:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     8fc:	dc 01       	movw	r26, r24
     8fe:	ed 91       	ld	r30, X+
     900:	fc 91       	ld	r31, X
     902:	33 27       	eor	r19, r19
     904:	04 84       	ldd	r0, Z+12	; 0x0c
     906:	f5 85       	ldd	r31, Z+13	; 0x0d
     908:	e0 2d       	mov	r30, r0
     90a:	a7 01       	movw	r20, r14
     90c:	b8 01       	movw	r22, r16
     90e:	09 95       	icall
     910:	2d 85       	ldd	r18, Y+13	; 0x0d
     912:	22 ff       	sbrs	r18, 2
     914:	0b c0       	rjmp	.+22     	; 0x92c <__stack+0x2d>
     916:	ce 01       	movw	r24, r28
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <_ZN23GSM3MobileClientService7connectE9IPAddressj>:
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	00 d0       	rcall	.+0      	; 0x94c <_ZN23GSM3MobileClientService7connectE9IPAddressj+0x12>
     94c:	00 d0       	rcall	.+0      	; 0x94e <_ZN23GSM3MobileClientService7connectE9IPAddressj+0x14>
     94e:	00 d0       	rcall	.+0      	; 0x950 <_ZN23GSM3MobileClientService7connectE9IPAddressj+0x16>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <__data_end>
     958:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <__data_end+0x1>
     95c:	10 97       	sbiw	r26, 0x00	; 0
     95e:	c1 f1       	breq	.+112    	; 0x9d0 <_ZN23GSM3MobileClientService7connectE9IPAddressj+0x96>
     960:	7a 01       	movw	r14, r20
     962:	6b 01       	movw	r12, r22
     964:	8c 01       	movw	r16, r24
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	11 97       	sbiw	r26, 0x01	; 1
     96c:	00 84       	ldd	r0, Z+8	; 0x08
     96e:	f1 85       	ldd	r31, Z+9	; 0x09
     970:	e0 2d       	mov	r30, r0
     972:	6f ef       	ldi	r22, 0xFF	; 255
     974:	7f ef       	ldi	r23, 0xFF	; 255
     976:	cd 01       	movw	r24, r26
     978:	09 95       	icall
     97a:	9c 01       	movw	r18, r24
     97c:	d8 01       	movw	r26, r16
     97e:	1c 96       	adiw	r26, 0x0c	; 12
     980:	8c 93       	st	X, r24
     982:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     986:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     98a:	dc 01       	movw	r26, r24
     98c:	ed 91       	ld	r30, X+
     98e:	fc 91       	ld	r31, X
     990:	06 84       	ldd	r0, Z+14	; 0x0e
     992:	f7 85       	ldd	r31, Z+15	; 0x0f
     994:	e0 2d       	mov	r30, r0
     996:	49 e0       	ldi	r20, 0x09	; 9
     998:	53 e0       	ldi	r21, 0x03	; 3
     99a:	5a 83       	std	Y+2, r21	; 0x02
     99c:	49 83       	std	Y+1, r20	; 0x01
     99e:	d6 01       	movw	r26, r12
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	4d 91       	ld	r20, X+
     9a4:	5d 91       	ld	r21, X+
     9a6:	6d 91       	ld	r22, X+
     9a8:	7c 91       	ld	r23, X
     9aa:	15 97       	sbiw	r26, 0x05	; 5
     9ac:	4b 83       	std	Y+3, r20	; 0x03
     9ae:	5c 83       	std	Y+4, r21	; 0x04
     9b0:	6d 83       	std	Y+5, r22	; 0x05
     9b2:	7e 83       	std	Y+6, r23	; 0x06
     9b4:	33 27       	eor	r19, r19
     9b6:	a7 01       	movw	r20, r14
     9b8:	be 01       	movw	r22, r28
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	09 95       	icall
     9c0:	f8 01       	movw	r30, r16
     9c2:	25 85       	ldd	r18, Z+13	; 0x0d
     9c4:	22 ff       	sbrs	r18, 2
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <_ZN23GSM3MobileClientService7connectE9IPAddressj+0x9a>
     9c8:	c8 01       	movw	r24, r16
     9ca:	0e 94 29 04 	call	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <_ZN23GSM3MobileClientService7connectE9IPAddressj+0x9a>
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	26 96       	adiw	r28, 0x06	; 6
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	df 90       	pop	r13
     9ee:	cf 90       	pop	r12
     9f0:	08 95       	ret

000009f2 <_ZN23GSM3MobileClientService10beginWriteEb>:
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	16 2f       	mov	r17, r22
     9fc:	9d 85       	ldd	r25, Y+13	; 0x0d
     9fe:	89 2f       	mov	r24, r25
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	8d 87       	std	Y+13, r24	; 0x0d
     a04:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <__data_end>
     a08:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <__data_end+0x1>
     a0c:	ed 91       	ld	r30, X+
     a0e:	fc 91       	ld	r31, X
     a10:	11 97       	sbiw	r26, 0x01	; 1
     a12:	4c 85       	ldd	r20, Y+12	; 0x0c
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	69 2f       	mov	r22, r25
     a18:	61 70       	andi	r22, 0x01	; 1
     a1a:	00 88       	ldd	r0, Z+16	; 0x10
     a1c:	f1 89       	ldd	r31, Z+17	; 0x11
     a1e:	e0 2d       	mov	r30, r0
     a20:	cd 01       	movw	r24, r26
     a22:	09 95       	icall
     a24:	11 23       	and	r17, r17
     a26:	31 f0       	breq	.+12     	; 0xa34 <_ZN23GSM3MobileClientService10beginWriteEb+0x42>
     a28:	ce 01       	movw	r24, r28
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	08 95       	ret

00000a3c <_ZN23GSM3MobileClientService5writeEh>:
     a3c:	cf 93       	push	r28
     a3e:	c6 2f       	mov	r28, r22
     a40:	dc 01       	movw	r26, r24
     a42:	1d 96       	adiw	r26, 0x0d	; 13
     a44:	2c 91       	ld	r18, X
     a46:	21 fd       	sbrc	r18, 1
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <_ZN23GSM3MobileClientService5writeEh+0x14>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN23GSM3MobileClientService10beginWriteEb>
     a50:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     a54:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     a58:	dc 01       	movw	r26, r24
     a5a:	ed 91       	ld	r30, X+
     a5c:	fc 91       	ld	r31, X
     a5e:	02 88       	ldd	r0, Z+18	; 0x12
     a60:	f3 89       	ldd	r31, Z+19	; 0x13
     a62:	e0 2d       	mov	r30, r0
     a64:	6c 2f       	mov	r22, r28
     a66:	09 95       	icall
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <_ZN23GSM3MobileClientService5writeEPKhj>:
     a70:	cf 92       	push	r12
     a72:	df 92       	push	r13
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	1f 92       	push	r1
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	f6 2e       	mov	r15, r22
     a88:	8a 01       	movw	r16, r20
     a8a:	dc 01       	movw	r26, r24
     a8c:	1d 96       	adiw	r26, 0x0d	; 13
     a8e:	2c 91       	ld	r18, X
     a90:	21 fd       	sbrc	r18, 1
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <_ZN23GSM3MobileClientService5writeEPKhj+0x2e>
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	79 83       	std	Y+1, r23	; 0x01
     a98:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN23GSM3MobileClientService10beginWriteEb>
     a9c:	79 81       	ldd	r23, Y+1	; 0x01
     a9e:	cf 2c       	mov	r12, r15
     aa0:	d7 2e       	mov	r13, r23
     aa2:	76 01       	movw	r14, r12
     aa4:	e0 0e       	add	r14, r16
     aa6:	f1 1e       	adc	r15, r17
     aa8:	ce 14       	cp	r12, r14
     aaa:	df 04       	cpc	r13, r15
     aac:	79 f0       	breq	.+30     	; 0xacc <_ZN23GSM3MobileClientService5writeEPKhj+0x5c>
     aae:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     ab2:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     ab6:	f6 01       	movw	r30, r12
     ab8:	61 91       	ld	r22, Z+
     aba:	6f 01       	movw	r12, r30
     abc:	dc 01       	movw	r26, r24
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	02 88       	ldd	r0, Z+18	; 0x12
     ac4:	f3 89       	ldd	r31, Z+19	; 0x13
     ac6:	e0 2d       	mov	r30, r0
     ac8:	09 95       	icall
     aca:	ee cf       	rjmp	.-36     	; 0xaa8 <_ZN23GSM3MobileClientService5writeEPKhj+0x38>
     acc:	c8 01       	movw	r24, r16
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	08 95       	ret

00000ae2 <_ZN23GSM3MobileClientService8endWriteEb>:
		theGSM3MobileClientProvider->writeSocket(buf[i]);
	return sz;
}

void GSM3MobileClientService::endWrite(bool sync)
{
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	1f 92       	push	r1
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	8c 01       	movw	r16, r24
	flags ^= GSM3MOBILECLIENTSERVICE_WRITING;
     af2:	dc 01       	movw	r26, r24
     af4:	1d 96       	adiw	r26, 0x0d	; 13
     af6:	9c 91       	ld	r25, X
     af8:	1d 97       	sbiw	r26, 0x0d	; 13
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	89 27       	eor	r24, r25
     afe:	1d 96       	adiw	r26, 0x0d	; 13
     b00:	8c 93       	st	X, r24
	theGSM3MobileClientProvider->endWriteSocket();
     b02:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     b06:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     b0a:	dc 01       	movw	r26, r24
     b0c:	ed 91       	ld	r30, X+
     b0e:	fc 91       	ld	r31, X
     b10:	06 88       	ldd	r0, Z+22	; 0x16
     b12:	f7 89       	ldd	r31, Z+23	; 0x17
     b14:	e0 2d       	mov	r30, r0
     b16:	69 83       	std	Y+1, r22	; 0x01
     b18:	09 95       	icall
	if(sync)
     b1a:	69 81       	ldd	r22, Y+1	; 0x01
     b1c:	66 23       	and	r22, r22
     b1e:	41 f0       	breq	.+16     	; 0xb30 <_ZN23GSM3MobileClientService8endWriteEb+0x4e>
		waitForAnswer();
     b20:	c8 01       	movw	r24, r16
}
     b22:	0f 90       	pop	r0
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
void GSM3MobileClientService::endWrite(bool sync)
{
	flags ^= GSM3MOBILECLIENTSERVICE_WRITING;
	theGSM3MobileClientProvider->endWriteSocket();
	if(sync)
		waitForAnswer();
     b2c:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>
}
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <_ZN23GSM3MobileClientService9availableEv>:
{
	return connected()==1;
};

int GSM3MobileClientService::available()
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
	int res;

	// Even if not connected, we are looking for available data
	
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
     b42:	8d 85       	ldd	r24, Y+13	; 0x0d
     b44:	81 ff       	sbrs	r24, 1
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <_ZN23GSM3MobileClientService9availableEv+0x14>
		endWrite(true);
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN23GSM3MobileClientService8endWriteEb>

	res=theGSM3MobileClientProvider->availableSocket(flags & GSM3MOBILECLIENTSERVICE_CLIENT,mySocket);
     b50:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     b54:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     b58:	dc 01       	movw	r26, r24
     b5a:	ed 91       	ld	r30, X+
     b5c:	fc 91       	ld	r31, X
     b5e:	4c 85       	ldd	r20, Y+12	; 0x0c
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	6d 85       	ldd	r22, Y+13	; 0x0d
     b64:	61 70       	andi	r22, 0x01	; 1
     b66:	00 8c       	ldd	r0, Z+24	; 0x18
     b68:	f1 8d       	ldd	r31, Z+25	; 0x19
     b6a:	e0 2d       	mov	r30, r0
     b6c:	09 95       	icall
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
     b6e:	2d 85       	ldd	r18, Y+13	; 0x0d
     b70:	22 ff       	sbrs	r18, 2
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <_ZN23GSM3MobileClientService9availableEv+0x42>
		res=waitForAnswer();
     b74:	ce 01       	movw	r24, r28

	return res;
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
		endWrite(true);

	res=theGSM3MobileClientProvider->availableSocket(flags & GSM3MOBILECLIENTSERVICE_CLIENT,mySocket);
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
		res=waitForAnswer();
     b7a:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>

	return res;
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <_ZN23GSM3MobileClientService4readEv>:
*/
}

int GSM3MobileClientService::read()
{
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
     b84:	dc 01       	movw	r26, r24
     b86:	1d 96       	adiw	r26, 0x0d	; 13
     b88:	2c 91       	ld	r18, X
     b8a:	21 ff       	sbrs	r18, 1
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <_ZN23GSM3MobileClientService4readEv+0x10>
		endWrite(true);
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN23GSM3MobileClientService8endWriteEb>
	int c=theGSM3MobileClientProvider->readSocket();
     b94:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     b98:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     b9c:	dc 01       	movw	r26, r24
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	02 8c       	ldd	r0, Z+26	; 0x1a
     ba4:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ba6:	e0 2d       	mov	r30, r0
     ba8:	09 94       	ijmp

00000baa <_ZN23GSM3MobileClientService4peekEv>:
	return c;
}

int GSM3MobileClientService::peek()
{
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
     baa:	dc 01       	movw	r26, r24
     bac:	1d 96       	adiw	r26, 0x0d	; 13
     bae:	2c 91       	ld	r18, X
     bb0:	21 ff       	sbrs	r18, 1
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <_ZN23GSM3MobileClientService4peekEv+0x10>
		endWrite(true);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN23GSM3MobileClientService8endWriteEb>
	return theGSM3MobileClientProvider->peekSocket(/*mySocket, false*/);
     bba:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     bbe:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     bc2:	dc 01       	movw	r26, r24
     bc4:	ed 91       	ld	r30, X+
     bc6:	fc 91       	ld	r31, X
     bc8:	06 8c       	ldd	r0, Z+30	; 0x1e
     bca:	f7 8d       	ldd	r31, Z+31	; 0x1f
     bcc:	e0 2d       	mov	r30, r0
     bce:	09 94       	ijmp

00000bd0 <_ZN23GSM3MobileClientService5flushEv>:
}

void GSM3MobileClientService::flush()
{
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	81 ff       	sbrs	r24, 1
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <_ZN23GSM3MobileClientService5flushEv+0x14>
		endWrite(true);
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN23GSM3MobileClientService8endWriteEb>
	theGSM3MobileClientProvider->flushSocket(/*mySocket*/);
     be4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     be8:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     bec:	dc 01       	movw	r26, r24
     bee:	ed 91       	ld	r30, X+
     bf0:	fc 91       	ld	r31, X
     bf2:	04 8c       	ldd	r0, Z+28	; 0x1c
     bf4:	f5 8d       	ldd	r31, Z+29	; 0x1d
     bf6:	e0 2d       	mov	r30, r0
     bf8:	09 95       	icall
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
     bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfc:	82 ff       	sbrs	r24, 2
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <_ZN23GSM3MobileClientService5flushEv+0x3a>
		waitForAnswer();
     c00:	ce 01       	movw	r24, r28

}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
{
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
		endWrite(true);
	theGSM3MobileClientProvider->flushSocket(/*mySocket*/);
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
		waitForAnswer();
     c06:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>

}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <_ZN23GSM3MobileClientService4stopEv>:

void GSM3MobileClientService::stop()
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
	if(flags & GSM3MOBILECLIENTSERVICE_WRITING)
     c16:	8d 85       	ldd	r24, Y+13	; 0x0d
     c18:	81 ff       	sbrs	r24, 1
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <_ZN23GSM3MobileClientService4stopEv+0x14>
		endWrite(true);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN23GSM3MobileClientService8endWriteEb>
	theGSM3MobileClientProvider->disconnectTCP(flags & GSM3MOBILECLIENTSERVICE_CLIENT, mySocket);
     c24:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     c28:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     c2c:	dc 01       	movw	r26, r24
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	4c 85       	ldd	r20, Y+12	; 0x0c
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	6d 85       	ldd	r22, Y+13	; 0x0d
     c38:	61 70       	andi	r22, 0x01	; 1
     c3a:	00 a0       	ldd	r0, Z+32	; 0x20
     c3c:	f1 a1       	ldd	r31, Z+33	; 0x21
     c3e:	e0 2d       	mov	r30, r0
     c40:	09 95       	icall
	theGSM3MobileClientProvider->releaseSocket(mySocket);
     c42:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__data_end>
     c46:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__data_end+0x1>
     c4a:	dc 01       	movw	r26, r24
     c4c:	ed 91       	ld	r30, X+
     c4e:	fc 91       	ld	r31, X
     c50:	6c 85       	ldd	r22, Y+12	; 0x0c
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	02 84       	ldd	r0, Z+10	; 0x0a
     c56:	f3 85       	ldd	r31, Z+11	; 0x0b
     c58:	e0 2d       	mov	r30, r0
     c5a:	09 95       	icall
	mySocket = 0;
     c5c:	1c 86       	std	Y+12, r1	; 0x0c
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
     c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c60:	82 ff       	sbrs	r24, 2
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <_ZN23GSM3MobileClientService4stopEv+0x5e>
		waitForAnswer();
     c64:	ce 01       	movw	r24, r28
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
		endWrite(true);
	theGSM3MobileClientProvider->disconnectTCP(flags & GSM3MOBILECLIENTSERVICE_CLIENT, mySocket);
	theGSM3MobileClientProvider->releaseSocket(mySocket);
	mySocket = 0;
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
		waitForAnswer();
     c6a:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN23GSM3MobileClientService13waitForAnswerEv>
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <_GLOBAL__sub_I_theShieldV1ClientProvider>:
     c74:	0f 93       	push	r16
     c76:	00 e0       	ldi	r16, 0x00	; 0
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	81 e3       	ldi	r24, 0x31	; 49
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
#include <GSM3MobileClientProvider.h>
#include <Arduino.h>

// While there is only a shield (ShieldV1) we will include it by default
#include <GSM3ShieldV1ClientProvider.h>
GSM3ShieldV1ClientProvider theShieldV1ClientProvider;
     c86:	82 e2       	ldi	r24, 0x22	; 34
     c88:	93 e0       	ldi	r25, 0x03	; 3
	theGSM3MobileClientProvider->disconnectTCP(flags & GSM3MOBILECLIENTSERVICE_CLIENT, mySocket);
	theGSM3MobileClientProvider->releaseSocket(mySocket);
	mySocket = 0;
	if(flags & GSM3MOBILECLIENTSERVICE_SYNCH)
		waitForAnswer();
}
     c8a:	0f 91       	pop	r16
#include <GSM3MobileClientProvider.h>
#include <Arduino.h>

// While there is only a shield (ShieldV1) we will include it by default
#include <GSM3ShieldV1ClientProvider.h>
GSM3ShieldV1ClientProvider theShieldV1ClientProvider;
     c8c:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <_ZN26GSM3ShieldV1ClientProviderC1Ev>

00000c90 <_GLOBAL__sub_I__ZN24GSM3MobileMockupProviderC2Ev>:

bool GSM3MobileMockupProvider::getSocketModemStatus(uint8_t s)
{
	// Feeling lazy
	return true;
}
     c90:	0f 93       	push	r16
     c92:	00 e0       	ldi	r16, 0x00	; 0
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	87 e3       	ldi	r24, 0x37	; 55
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <_GLOBAL__sub_I_theProvider>:
{
	if(socketsAsServer&(0x0001<<socket))
		return 1;
	else
		return 0;
};
     ca6:	0f 93       	push	r16
     ca8:	00 e0       	ldi	r16, 0x00	; 0
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	8d e3       	ldi	r24, 0x3D	; 61
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <_GLOBAL__sub_I__ZN25GSM3MobileNetworkRegistryC2Ev>:
GSM3MobileNetworkProvider* GSM3MobileNetworkRegistry::getMobileNetworkProvider()
{
	return theProvider;
}

GSM3MobileNetworkRegistry theMobileNetworkRegistry;
     cbc:	0f 93       	push	r16
     cbe:	00 e0       	ldi	r16, 0x00	; 0
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	85 e4       	ldi	r24, 0x45	; 69
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
*/
#include <GSM3MobileNetworkRegistry.h>

GSM3MobileNetworkRegistry::GSM3MobileNetworkRegistry()
{
	theProvider=0;
     cce:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <theMobileNetworkRegistry+0x1>
     cd2:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <theMobileNetworkRegistry>
GSM3MobileNetworkProvider* GSM3MobileNetworkRegistry::getMobileNetworkProvider()
{
	return theProvider;
}

GSM3MobileNetworkRegistry theMobileNetworkRegistry;
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <_GLOBAL__sub_I_theShieldV1ServerProvider>:
	// If we get something different from a 1, we are having a problem
	if(res!=1)
		res=0;

	return res;
}
     cda:	0f 93       	push	r16
     cdc:	00 e0       	ldi	r16, 0x00	; 0
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	81 e5       	ldi	r24, 0x51	; 81
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>

#define GSM3MOBILESERVERSERVICE_SYNCH 0x01 // 1: TRUE, compatible with other clients 0: FALSE

// While there is only a shield (ShieldV1) we will include it by default
#include <GSM3ShieldV1ServerProvider.h>
GSM3ShieldV1ServerProvider theShieldV1ServerProvider;
     cec:	8d e4       	ldi	r24, 0x4D	; 77
     cee:	93 e0       	ldi	r25, 0x03	; 3
	// If we get something different from a 1, we are having a problem
	if(res!=1)
		res=0;

	return res;
}
     cf0:	0f 91       	pop	r16

#define GSM3MOBILESERVERSERVICE_SYNCH 0x01 // 1: TRUE, compatible with other clients 0: FALSE

// While there is only a shield (ShieldV1) we will include it by default
#include <GSM3ShieldV1ServerProvider.h>
GSM3ShieldV1ServerProvider theShieldV1ServerProvider;
     cf2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <_ZN26GSM3ShieldV1ServerProviderC1Ev>

00000cf6 <_GLOBAL__sub_I__ZN12GSM3ShieldV1C2Eb>:
		return true;
	}
	
	
	return false;
}
     cf6:	0f 93       	push	r16
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	8b e5       	ldi	r24, 0x5B	; 91
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <_ZN24GSM3ShieldV1BaseProvider25recognizeUnsolicitedEventEh>:
	
	/** Recognize URC
		@param from		
		@return true if successful (default: false)
	*/		
	virtual bool recognizeUnsolicitedEvent(byte from){return false;};
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret

00000d10 <_ZN26GSM3ShieldV1AccessProvider5readyEv>:
		bool secureShutdown();
		
		/** Returns 0 if last command is still executing
			@return 1 if success, >1 if error 
		*/
		int ready(){return GSM3ShieldV1BaseProvider::ready();};
     d10:	02 96       	adiw	r24, 0x02	; 2
     d12:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>

00000d16 <_ZN26GSM3ShieldV1AccessProvider14secureShutdownEv>:

//Secure shutdown.
bool GSM3ShieldV1AccessProvider::secureShutdown()
{
	// It makes no sense to have an asynchronous shutdown
	pinMode(__RESETPIN__, OUTPUT);
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
	digitalWrite(__RESETPIN__, HIGH);
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	87 e0       	ldi	r24, 0x07	; 7
     d22:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	delay(900);
     d26:	64 e8       	ldi	r22, 0x84	; 132
     d28:	73 e0       	ldi	r23, 0x03	; 3
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
	digitalWrite(__RESETPIN__, LOW);
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	87 e0       	ldi	r24, 0x07	; 7
     d36:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
     d3a:	86 e0       	ldi	r24, 0x06	; 6
     d3c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
	theGSM3ShieldV1ModemCore.setStatus(OFF);
	theGSM3ShieldV1ModemCore.gss.close();
     d40:	86 e9       	ldi	r24, 0x96	; 150
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 2b 18 	call	0x3056	; 0x3056 <_ZN14GSM3SoftSerial5closeEv>
	_delay_ms(12000);
	digitalWrite(__POWERPIN__, LOW);
#endif
	
	return true;
}
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	08 95       	ret

00000d4c <_ZN26GSM3ShieldV1AccessProvider8shutdownEv>:
	}
}

//Shutdown.
bool GSM3ShieldV1AccessProvider::shutdown()
{
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	63 97       	sbiw	r28, 0x13	; 19
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	8c 01       	movw	r16, r24
	unsigned long m;
	bool resp;
	char auxLocate [18];
	
	// It makes no sense to have an asynchronous shutdown
	pinMode(__RESETPIN__, OUTPUT);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	87 e0       	ldi	r24, 0x07	; 7
     d72:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
	digitalWrite(__RESETPIN__, HIGH);
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	delay(1500);
     d7e:	6c ed       	ldi	r22, 0xDC	; 220
     d80:	75 e0       	ldi	r23, 0x05	; 5
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
	digitalWrite(__RESETPIN__, LOW);
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
	theGSM3ShieldV1ModemCore.setStatus(IDLE);
	theGSM3ShieldV1ModemCore.gss.close();
     d98:	86 e9       	ldi	r24, 0x96	; 150
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	0e 94 2b 18 	call	0x3056	; 0x3056 <_ZN14GSM3SoftSerial5closeEv>
	
	m=millis();
     da0:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
     da4:	6b 01       	movw	r12, r22
     da6:	7c 01       	movw	r14, r24
	prepareAuxLocate(PSTR("POWER DOWN"), auxLocate);
     da8:	ae 01       	movw	r20, r28
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	68 e6       	ldi	r22, 0x68	; 104
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	c8 01       	movw	r24, r16
     db4:	02 96       	adiw	r24, 0x02	; 2
     db6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	while((millis()-m) < __TOUTSHUTDOWN__)
     dba:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	8c 19       	sub	r24, r12
     dc4:	9d 09       	sbc	r25, r13
     dc6:	ae 09       	sbc	r26, r14
     dc8:	bf 09       	sbc	r27, r15
     dca:	88 38       	cpi	r24, 0x88	; 136
     dcc:	93 41       	sbci	r25, 0x13	; 19
     dce:	a1 05       	cpc	r26, r1
     dd0:	b1 05       	cpc	r27, r1
     dd2:	b0 f4       	brcc	.+44     	; 0xe00 <_ZN26GSM3ShieldV1AccessProvider8shutdownEv+0xb4>
	{
		delay(1);
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp, auxLocate))
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	ae 01       	movw	r20, r28
     de6:	4f 5f       	subi	r20, 0xFF	; 255
     de8:	5f 4f       	sbci	r21, 0xFF	; 255
     dea:	be 01       	movw	r22, r28
     dec:	6d 5e       	subi	r22, 0xED	; 237
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	89 e7       	ldi	r24, 0x79	; 121
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
     df8:	88 23       	and	r24, r24
     dfa:	f9 f2       	breq	.-66     	; 0xdba <_ZN26GSM3ShieldV1AccessProvider8shutdownEv+0x6e>
			return resp;
     dfc:	8b 89       	ldd	r24, Y+19	; 0x13
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <_ZN26GSM3ShieldV1AccessProvider8shutdownEv+0xb6>
	}
	return false;
     e00:	80 e0       	ldi	r24, 0x00	; 0
}
     e02:	63 96       	adiw	r28, 0x13	; 19
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	08 95       	ret

00000e20 <_ZN26GSM3ShieldV1AccessProviderC1Eb>:

const char _command_AT[] PROGMEM = "AT";
const char _command_CGREG[] PROGMEM = "AT+CGREG?";


GSM3ShieldV1AccessProvider::GSM3ShieldV1AccessProvider(bool debug)
     e20:	27 e4       	ldi	r18, 0x47	; 71
     e22:	31 e0       	ldi	r19, 0x01	; 1
     e24:	fc 01       	movw	r30, r24
     e26:	31 83       	std	Z+1, r19	; 0x01
     e28:	20 83       	st	Z, r18
     e2a:	27 e5       	ldi	r18, 0x57	; 87
     e2c:	31 e0       	ldi	r19, 0x01	; 1
     e2e:	33 83       	std	Z+3, r19	; 0x03
     e30:	22 83       	std	Z+2, r18	; 0x02
		virtual size_t writePGM(PGM_P str, bool CR=true);
		
		/** Establish debug mode
			@param db			Boolean that indicates debug on or off
		 */
		void setDebug(bool db){_debug=db;};
     e32:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <theGSM3ShieldV1ModemCore+0xd>
     e36:	08 95       	ret

00000e38 <_ZN26GSM3ShieldV1AccessProvider9HWrestartEv>:
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
	digitalWrite(__POWERPIN__, HIGH);
	delay(1000);
	#endif
	
	theGSM3ShieldV1ModemCore.setStatus(IDLE);
	digitalWrite(__RESETPIN__, HIGH);
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	87 e0       	ldi	r24, 0x07	; 7
     e42:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	delay(12000);
     e46:	60 ee       	ldi	r22, 0xE0	; 224
     e48:	7e e2       	ldi	r23, 0x2E	; 46
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
	digitalWrite(__RESETPIN__, LOW);
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	87 e0       	ldi	r24, 0x07	; 7
     e56:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	delay(1000);
     e5a:	68 ee       	ldi	r22, 0xE8	; 232
     e5c:	73 e0       	ldi	r23, 0x03	; 3
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
	return 1; //configandwait(pin);
}
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	08 95       	ret

00000e6c <_ZN26GSM3ShieldV1AccessProvider7HWstartEv>:
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
//HWrestart.
int GSM3ShieldV1AccessProvider::HWstart()
{

	theGSM3ShieldV1ModemCore.setStatus(IDLE);
	digitalWrite(__RESETPIN__, HIGH);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	87 e0       	ldi	r24, 0x07	; 7
     e76:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	delay(2000);
     e7a:	60 ed       	ldi	r22, 0xD0	; 208
     e7c:	77 e0       	ldi	r23, 0x07	; 7
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
	digitalWrite(__RESETPIN__, LOW);
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	87 e0       	ldi	r24, 0x07	; 7
     e8a:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	//delay(1000);

	return 1; //configandwait(pin);
}
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	08 95       	ret

00000e94 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Initial configuration continue function.
void GSM3ShieldV1AccessProvider::ModemConfigurationContinue()
{
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	69 97       	sbiw	r28, 0x19	; 25
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	// 5: Wait IFC OK and SMS Text Mode
	// 6: Wait SMS text Mode OK and Calling line identification
	// 7: Wait Calling Line Id OK and Echo off
	// 8: Wait for OK and COLP command for connecting line identification.
	// 9: Wait for OK.
	int ct=theGSM3ShieldV1ModemCore.getCommandCounter();
     eac:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
     eb0:	30 e0       	ldi	r19, 0x00	; 0
	if(ct==1)
     eb2:	21 30       	cpi	r18, 0x01	; 1
     eb4:	31 05       	cpc	r19, r1
     eb6:	39 f4       	brne	.+14     	; 0xec6 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x32>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
	{
		// Launch AT	
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		theGSM3ShieldV1ModemCore.genericCommand_rq(_command_AT);
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	6b ec       	ldi	r22, 0xCB	; 203
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	26 c1       	rjmp	.+588    	; 0x1112 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x27e>
	}
	else if(ct==2)
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	89 f5       	brne	.+98     	; 0xf2e <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x9a>
	{
		// Wait for AT - OK.
	   if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	be 01       	movw	r22, r28
     ed6:	67 5e       	subi	r22, 0xE7	; 231
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	89 e7       	ldi	r24, 0x79	; 121
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
     ee2:	88 23       	and	r24, r24
     ee4:	09 f4       	brne	.+2      	; 0xee8 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x54>
     ee6:	19 c1       	rjmp	.+562    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
	   {
			if(resp)
     ee8:	89 8d       	ldd	r24, Y+25	; 0x19
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x5c>
     eee:	76 c0       	rjmp	.+236    	; 0xfdc <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x148>
		GSM3SoftSerial gss; // Direct access to modem
		
		/** Get phone number
			@return phone number
		 */
		char *getPhoneNumber(){return phoneNumber;};
     ef0:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
     ef4:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
			{ 
				// OK received
				if(theGSM3ShieldV1ModemCore.getPhoneNumber() && (theGSM3ShieldV1ModemCore.getPhoneNumber()[0]!=0)) 
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f4       	brne	.+2      	; 0xefe <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x6a>
     efc:	00 c1       	rjmp	.+512    	; 0x10fe <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x26a>
     efe:	80 81       	ld	r24, Z
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x72>
     f04:	fc c0       	rjmp	.+504    	; 0x10fe <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x26a>
					{
						theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CPIN="), false);
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	68 eb       	ldi	r22, 0xB8	; 184
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	89 e7       	ldi	r24, 0x79	; 121
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
						theGSM3ShieldV1ModemCore.setCommandCounter(3);
						theGSM3ShieldV1ModemCore.genericCommand_rqc(theGSM3ShieldV1ModemCore.getPhoneNumber());
     f1a:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
     f1e:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	89 e7       	ldi	r24, 0x79	; 121
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <_ZN21GSM3ShieldV1ModemCore18genericCommand_rqcEPKcb>
     f2c:	f6 c0       	rjmp	.+492    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
					}
			}
			else theGSM3ShieldV1ModemCore.closeCommand(3);
		}
	}
	else if(ct==3)
     f2e:	23 30       	cpi	r18, 0x03	; 3
     f30:	31 05       	cpc	r19, r1
     f32:	d1 f4       	brne	.+52     	; 0xf68 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0xd4>
	{
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	be 01       	movw	r22, r28
     f3e:	67 5e       	subi	r22, 0xE7	; 231
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	89 e7       	ldi	r24, 0x79	; 121
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0xbc>
     f4e:	e5 c0       	rjmp	.+458    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
	    {
			if(resp)
     f50:	89 8d       	ldd	r24, Y+25	; 0x19
     f52:	88 23       	and	r24, r24
     f54:	09 f4       	brne	.+2      	; 0xf58 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0xc4>
     f56:	42 c0       	rjmp	.+132    	; 0xfdc <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x148>
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
			{
				theGSM3ShieldV1ModemCore.setCommandCounter(4);
				theGSM3ShieldV1ModemCore.takeMilliseconds();
     f5e:	89 e7       	ldi	r24, 0x79	; 121
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 84 10 	call	0x2108	; 0x2108 <_ZN21GSM3ShieldV1ModemCore16takeMillisecondsEv>
     f66:	3d c0       	rjmp	.+122    	; 0xfe2 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x14e>
				theGSM3ShieldV1ModemCore.genericCommand_rq(_command_CGREG);
			}
			else theGSM3ShieldV1ModemCore.closeCommand(3);
	    }
	}
	else if(ct==4)
     f68:	24 30       	cpi	r18, 0x04	; 4
     f6a:	31 05       	cpc	r19, r1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0xdc>
     f6e:	42 c0       	rjmp	.+132    	; 0xff4 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x160>
	{
		char auxLocate1 [12];
		char auxLocate2 [12];
		prepareAuxLocate(PSTR("+CGREG: 0,1"), auxLocate1);
     f70:	8c 01       	movw	r16, r24
     f72:	0e 5f       	subi	r16, 0xFE	; 254
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	ae 01       	movw	r20, r28
     f78:	43 5f       	subi	r20, 0xF3	; 243
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	6c ea       	ldi	r22, 0xAC	; 172
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	c8 01       	movw	r24, r16
     f82:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
		prepareAuxLocate(PSTR("+CGREG: 0,5"), auxLocate2);
     f86:	ae 01       	movw	r20, r28
     f88:	4f 5f       	subi	r20, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	60 ea       	ldi	r22, 0xA0	; 160
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	c8 01       	movw	r24, r16
     f92:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp, auxLocate1, auxLocate2))
     f96:	9e 01       	movw	r18, r28
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	ae 01       	movw	r20, r28
     f9e:	43 5f       	subi	r20, 0xF3	; 243
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	be 01       	movw	r22, r28
     fa4:	67 5e       	subi	r22, 0xE7	; 231
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	89 e7       	ldi	r24, 0x79	; 121
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x122>
     fb4:	b2 c0       	rjmp	.+356    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
		{
			if(resp)
     fb6:	89 8d       	ldd	r24, Y+25	; 0x19
     fb8:	88 23       	and	r24, r24
     fba:	39 f0       	breq	.+14     	; 0xfca <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x136>
     fbc:	85 e0       	ldi	r24, 0x05	; 5
     fbe:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
			{
				theGSM3ShieldV1ModemCore.setCommandCounter(5);
				theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+IFC=1,1"));
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	65 e9       	ldi	r22, 0x95	; 149
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	a4 c0       	rjmp	.+328    	; 0x1112 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x27e>
			}
			else
			{
				// If not, launch command again
				if(theGSM3ShieldV1ModemCore.takeMilliseconds() > __TOUTMODEMCONFIGURATION__)
     fca:	89 e7       	ldi	r24, 0x79	; 121
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	0e 94 84 10 	call	0x2108	; 0x2108 <_ZN21GSM3ShieldV1ModemCore16takeMillisecondsEv>
     fd2:	69 38       	cpi	r22, 0x89	; 137
     fd4:	73 41       	sbci	r23, 0x13	; 19
     fd6:	81 05       	cpc	r24, r1
     fd8:	91 05       	cpc	r25, r1
     fda:	18 f0       	brcs	.+6      	; 0xfe2 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x14e>
				{
					theGSM3ShieldV1ModemCore.closeCommand(3);
     fdc:	63 e0       	ldi	r22, 0x03	; 3
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	89 c0       	rjmp	.+274    	; 0x10f4 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x260>
				}
				else 
				{
					theGSM3ShieldV1ModemCore.delayInsideInterrupt(2000);
     fe2:	40 ed       	ldi	r20, 0xD0	; 208
     fe4:	57 e0       	ldi	r21, 0x07	; 7
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	89 e7       	ldi	r24, 0x79	; 121
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm>
     ff2:	8c c0       	rjmp	.+280    	; 0x110c <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x278>
					theGSM3ShieldV1ModemCore.genericCommand_rq(_command_CGREG);
				}
			}
		}	
	}
	else if(ct==5)
     ff4:	25 30       	cpi	r18, 0x05	; 5
     ff6:	31 05       	cpc	r19, r1
     ff8:	e9 f4       	brne	.+58     	; 0x1034 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x1a0>
	{
		// 5: Wait IFC OK
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	be 01       	movw	r22, r28
    1004:	67 5e       	subi	r22, 0xE7	; 231
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	89 e7       	ldi	r24, 0x79	; 121
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x182>
    1014:	82 c0       	rjmp	.+260    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
		{
			//Delay for SW flow control being active.
			theGSM3ShieldV1ModemCore.delayInsideInterrupt(2000);
    1016:	40 ed       	ldi	r20, 0xD0	; 208
    1018:	57 e0       	ldi	r21, 0x07	; 7
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	89 e7       	ldi	r24, 0x79	; 121
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm>
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
			// 9: SMS Text Mode
			theGSM3ShieldV1ModemCore.setCommandCounter(6);
			theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CMGF=1"));
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	6b e8       	ldi	r22, 0x8B	; 139
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	6f c0       	rjmp	.+222    	; 0x1112 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x27e>
		}
	}
	else if(ct==6)
    1034:	26 30       	cpi	r18, 0x06	; 6
    1036:	31 05       	cpc	r19, r1
    1038:	a9 f4       	brne	.+42     	; 0x1064 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x1d0>
	{
		// 6: Wait SMS text Mode OK
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	be 01       	movw	r22, r28
    1044:	67 5e       	subi	r22, 0xE7	; 231
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	89 e7       	ldi	r24, 0x79	; 121
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1050:	88 23       	and	r24, r24
    1052:	09 f4       	brne	.+2      	; 0x1056 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x1c2>
    1054:	62 c0       	rjmp	.+196    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
    1056:	87 e0       	ldi	r24, 0x07	; 7
    1058:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
		{
			//Calling line identification
			theGSM3ShieldV1ModemCore.setCommandCounter(7);			
			theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CLIP=1"));
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	61 e8       	ldi	r22, 0x81	; 129
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	57 c0       	rjmp	.+174    	; 0x1112 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x27e>
		}
	}
	else if(ct==7)
    1064:	27 30       	cpi	r18, 0x07	; 7
    1066:	31 05       	cpc	r19, r1
    1068:	a9 f4       	brne	.+42     	; 0x1094 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x200>
	{
		// 7: Wait Calling Line Id OK
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	be 01       	movw	r22, r28
    1074:	67 5e       	subi	r22, 0xE7	; 231
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	89 e7       	ldi	r24, 0x79	; 121
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1080:	88 23       	and	r24, r24
    1082:	09 f4       	brne	.+2      	; 0x1086 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x1f2>
    1084:	4a c0       	rjmp	.+148    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
    1086:	88 e0       	ldi	r24, 0x08	; 8
    1088:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
		{
			// Echo off
			theGSM3ShieldV1ModemCore.setCommandCounter(8);			
			theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("ATZ"));
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	6d e7       	ldi	r22, 0x7D	; 125
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	3f c0       	rjmp	.+126    	; 0x1112 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x27e>
		}
	}
	else if(ct==8)
    1094:	28 30       	cpi	r18, 0x08	; 8
    1096:	31 05       	cpc	r19, r1
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x22e>
	{
		// 8: Wait ATEO OK, send COLP
		// In Arduino Mega, attention, take away the COLP step
		// It looks as we can only have 8 steps
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	be 01       	movw	r22, r28
    10a4:	67 5e       	subi	r22, 0xE7	; 231
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	89 e7       	ldi	r24, 0x79	; 121
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    10b0:	88 23       	and	r24, r24
    10b2:	99 f1       	breq	.+102    	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
    10b4:	89 e0       	ldi	r24, 0x09	; 9
    10b6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
		{
			theGSM3ShieldV1ModemCore.setCommandCounter(9);
			theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+COLP=1"));
    10ba:	41 e0       	ldi	r20, 0x01	; 1
    10bc:	63 e7       	ldi	r22, 0x73	; 115
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	28 c0       	rjmp	.+80     	; 0x1112 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x27e>
		}
	}
	else if(ct==9)
    10c2:	29 30       	cpi	r18, 0x09	; 9
    10c4:	31 05       	cpc	r19, r1
    10c6:	49 f5       	brne	.+82     	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
	{
		// 9: Wait ATCOLP OK
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	be 01       	movw	r22, r28
    10d2:	67 5e       	subi	r22, 0xE7	; 231
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	89 e7       	ldi	r24, 0x79	; 121
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    10de:	88 23       	and	r24, r24
    10e0:	e1 f0       	breq	.+56     	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
		{
			if (resp) 
    10e2:	89 8d       	ldd	r24, Y+25	; 0x19
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x256>
    10e8:	79 cf       	rjmp	.-270    	; 0xfdc <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x148>
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
				{
					theGSM3ShieldV1ModemCore.setStatus(GSM_READY);
					theGSM3ShieldV1ModemCore.closeCommand(1);
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	89 e7       	ldi	r24, 0x79	; 121
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv+0x286>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
				else 
					{
						//DEBUG	
						//Serial.println("AT+CGREG?");	
						theGSM3ShieldV1ModemCore.setCommandCounter(4);
						theGSM3ShieldV1ModemCore.takeMilliseconds();
    1104:	89 e7       	ldi	r24, 0x79	; 121
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	0e 94 84 10 	call	0x2108	; 0x2108 <_ZN21GSM3ShieldV1ModemCore16takeMillisecondsEv>
						theGSM3ShieldV1ModemCore.genericCommand_rq(_command_CGREG);
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	61 ec       	ldi	r22, 0xC1	; 193
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	89 e7       	ldi	r24, 0x79	; 121
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
					theGSM3ShieldV1ModemCore.closeCommand(1);
				}
			else theGSM3ShieldV1ModemCore.closeCommand(3);
		}
 	}
}
    111a:	69 96       	adiw	r28, 0x19	; 25
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <_ZN26GSM3ShieldV1AccessProvider18ModemConfigurationEPc>:
	return 1; //configandwait(pin);
}

//Initial configuration main function.
int GSM3ShieldV1AccessProvider::ModemConfiguration(char* pin)
{
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	8c 01       	movw	r16, r24
		char *getPhoneNumber(){return phoneNumber;};
		
		/** Establish a new phone number
			@param n			Phone number
		 */
		void setPhoneNumber(char *n){phoneNumber=n;};
    113a:	c9 e7       	ldi	r28, 0x79	; 121
    113c:	d3 e0       	ldi	r29, 0x03	; 3
    113e:	7f 83       	std	Y+7, r23	; 0x07
    1140:	6e 83       	std	Y+6, r22	; 0x06
	theGSM3ShieldV1ModemCore.setPhoneNumber(pin);
	theGSM3ShieldV1ModemCore.openCommand(this,MODEMCONFIG);
    1142:	bc 01       	movw	r22, r24
    1144:	6e 5f       	subi	r22, 0xFE	; 254
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	42 e0       	ldi	r20, 0x02	; 2
    114a:	ce 01       	movw	r24, r28
    114c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	88 8b       	std	Y+16, r24	; 0x10
	theGSM3ShieldV1ModemCore.setStatus(CONNECTING);
	ModemConfigurationContinue();
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    115a:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	08 95       	ret

00001168 <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb>:

// Begin
// Restart or start the modem
// May be synchronous
GSM3_NetworkStatus_t GSM3ShieldV1AccessProvider::begin(char* pin, bool restart, bool synchronous)
{	
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	1f 92       	push	r1
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	6c 01       	movw	r12, r24
    117e:	7b 01       	movw	r14, r22
    1180:	12 2f       	mov	r17, r18
	pinMode(__RESETPIN__, OUTPUT);
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	87 e0       	ldi	r24, 0x07	; 7
    1186:	49 83       	std	Y+1, r20	; 0x01
    1188:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
	pinMode(__POWERPIN__, OUTPUT);
	digitalWrite(__POWERPIN__, HIGH);
	#endif

	// If asked for modem restart, restart
	if (restart) 
    118c:	49 81       	ldd	r20, Y+1	; 0x01
		HWrestart();
    118e:	c6 01       	movw	r24, r12
	pinMode(__POWERPIN__, OUTPUT);
	digitalWrite(__POWERPIN__, HIGH);
	#endif

	// If asked for modem restart, restart
	if (restart) 
    1190:	44 23       	and	r20, r20
    1192:	19 f0       	breq	.+6      	; 0x119a <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb+0x32>
		HWrestart();
    1194:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN26GSM3ShieldV1AccessProvider9HWrestartEv>
    1198:	02 c0       	rjmp	.+4      	; 0x119e <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb+0x36>
	else 
 		HWstart();
    119a:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN26GSM3ShieldV1AccessProvider7HWstartEv>
  
	theGSM3ShieldV1ModemCore.gss.begin(9600);
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	55 e2       	ldi	r21, 0x25	; 37
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	86 e9       	ldi	r24, 0x96	; 150
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN14GSM3SoftSerial5beginEl>
	// Launch modem configuration commands
	ModemConfiguration(pin);
    11ae:	b7 01       	movw	r22, r14
    11b0:	c6 01       	movw	r24, r12
    11b2:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN26GSM3ShieldV1AccessProvider18ModemConfigurationEPc>
	// If synchronous, wait till ModemConfiguration is over
	if(synchronous)
    11b6:	11 11       	cpse	r17, r1
    11b8:	0b c0       	rjmp	.+22     	; 0x11d0 <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb+0x68>
	{
		// if we shorten this delay, the command fails
		while(ready()==0) 
			delay(1000); 
	}
	return getStatus();
    11ba:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
}
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	08 95       	ret
	ModemConfiguration(pin);
	// If synchronous, wait till ModemConfiguration is over
	if(synchronous)
	{
		// if we shorten this delay, the command fails
		while(ready()==0) 
    11d0:	d6 01       	movw	r26, r12
    11d2:	ed 91       	ld	r30, X+
    11d4:	fc 91       	ld	r31, X
    11d6:	00 84       	ldd	r0, Z+8	; 0x08
    11d8:	f1 85       	ldd	r31, Z+9	; 0x09
    11da:	e0 2d       	mov	r30, r0
    11dc:	c6 01       	movw	r24, r12
    11de:	09 95       	icall
    11e0:	89 2b       	or	r24, r25
    11e2:	59 f7       	brne	.-42     	; 0x11ba <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb+0x52>
			delay(1000); 
    11e4:	68 ee       	ldi	r22, 0xE8	; 232
    11e6:	73 e0       	ldi	r23, 0x03	; 3
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    11f0:	ef cf       	rjmp	.-34     	; 0x11d0 <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb+0x68>

000011f2 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Alive Test continue function.
void GSM3ShieldV1AccessProvider::isModemAliveContinue()
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
bool rsp;
switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    11fc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	19 f0       	breq	.+6      	; 0x120a <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x18>
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	61 f0       	breq	.+24     	; 0x1220 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x2e>
    1208:	24 c0       	rjmp	.+72     	; 0x1252 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x60>
    case 1:
		theGSM3ShieldV1ModemCore.genericCommand_rq(_command_AT);
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	6b ec       	ldi	r22, 0xCB	; 203
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	89 e7       	ldi	r24, 0x79	; 121
    1212:	93 e0       	ldi	r25, 0x03	; 3
    1214:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    121e:	19 c0       	rjmp	.+50     	; 0x1252 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x60>
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
      break;
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(rsp))
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	be 01       	movw	r22, r28
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	89 e7       	ldi	r24, 0x79	; 121
    1230:	93 e0       	ldi	r25, 0x03	; 3
    1232:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1236:	88 23       	and	r24, r24
    1238:	61 f0       	breq	.+24     	; 0x1252 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x60>
		{
			if (rsp) theGSM3ShieldV1ModemCore.closeCommand(1);
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 23       	and	r24, r24
    123e:	19 f0       	breq	.+6      	; 0x1246 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x54>
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv+0x58>
			else theGSM3ShieldV1ModemCore.closeCommand(3);
    1246:	63 e0       	ldi	r22, 0x03	; 3
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	89 e7       	ldi	r24, 0x79	; 121
    124c:	93 e0       	ldi	r25, 0x03	; 3
    124e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		}
      break;
	}
}
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <_ZN26GSM3ShieldV1AccessProvider14manageResponseEhh>:

}

void GSM3ShieldV1AccessProvider::manageResponse(byte from, byte to)
{
	switch(theGSM3ShieldV1ModemCore.getOngoingCommand())
    125a:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	19 f0       	breq	.+6      	; 0x1268 <_ZN26GSM3ShieldV1AccessProvider14manageResponseEhh+0xe>
    1262:	23 30       	cpi	r18, 0x03	; 3
    1264:	19 f0       	breq	.+6      	; 0x126c <_ZN26GSM3ShieldV1AccessProvider14manageResponseEhh+0x12>
    1266:	08 95       	ret
	{
		case MODEMCONFIG:
			ModemConfigurationContinue();
    1268:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <_ZN26GSM3ShieldV1AccessProvider26ModemConfigurationContinueEv>
			break;
		case ALIVETEST:
			isModemAliveContinue();
    126c:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv>

00001270 <_ZThn2_N26GSM3ShieldV1AccessProvider14manageResponseEhh>:
    1270:	02 97       	sbiw	r24, 0x02	; 2
    1272:	0c 94 2d 09 	jmp	0x125a	; 0x125a <_ZN26GSM3ShieldV1AccessProvider14manageResponseEhh>

00001276 <_ZN26GSM3ShieldV1AccessProvider13isAccessAliveEv>:
 	}
}

//Alive Test main function.
int GSM3ShieldV1AccessProvider::isAccessAlive()
{
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	8c 01       	movw	r16, r24
		uint8_t getCommandError(){return commandError;};
		
		/** Establish a command error
			@param n			Command error
		 */
		void setCommandError(uint8_t n){commandError=n;};
    1280:	c9 e7       	ldi	r28, 0x79	; 121
    1282:	d3 e0       	ldi	r29, 0x03	; 3
    1284:	1a 86       	std	Y+10, r1	; 0x0a
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8b 87       	std	Y+11, r24	; 0x0b
	theGSM3ShieldV1ModemCore.setCommandError(0);
	theGSM3ShieldV1ModemCore.setCommandCounter(1);
	theGSM3ShieldV1ModemCore.openCommand(this,ALIVETEST);
    128a:	b8 01       	movw	r22, r16
    128c:	6e 5f       	subi	r22, 0xFE	; 254
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	43 e0       	ldi	r20, 0x03	; 3
    1292:	ce 01       	movw	r24, r28
    1294:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	isModemAliveContinue();
    1298:	c8 01       	movw	r24, r16
    129a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN26GSM3ShieldV1AccessProvider20isModemAliveContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    129e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <_GLOBAL__sub_I__ZN26GSM3ShieldV1BandManagementC2Eb>:
	
	if(modemResponse.indexOf("QBAND")>=0)
      return true;
	else
		return false;
}
    12ac:	0f 93       	push	r16
    12ae:	00 e0       	ldi	r16, 0x00	; 0
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	81 e6       	ldi	r24, 0x61	; 97
    12b8:	93 e0       	ldi	r25, 0x03	; 3
    12ba:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    12be:	0f 91       	pop	r16
    12c0:	08 95       	ret

000012c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>:
// Returns 0 if last command is still executing
// 1 if success
// >1 if error 
int GSM3ShieldV1BaseProvider::ready() 
{
	theGSM3ShieldV1ModemCore.manageReceivedData();
    12c2:	89 e7       	ldi	r24, 0x79	; 121
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN21GSM3ShieldV1ModemCore18manageReceivedDataEv>

	return theGSM3ShieldV1ModemCore.getCommandError();
    12ca:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <theGSM3ShieldV1ModemCore+0xa>
};
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret

000012d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>:

void GSM3ShieldV1BaseProvider::prepareAuxLocate(PGM_P str, char auxLocate[])
{
    12d2:	fb 01       	movw	r30, r22
    12d4:	da 01       	movw	r26, r20
	int i=0;
	char c;

	do
	{	
		c=pgm_read_byte_near(str + i); 
    12d6:	84 91       	lpm	r24, Z
		auxLocate[i]=c;
    12d8:	8d 93       	st	X+, r24
    12da:	31 96       	adiw	r30, 0x01	; 1
void GSM3ShieldV1BaseProvider::prepareAuxLocate(PGM_P str, char auxLocate[])
{
	int i=0;
	char c;

	do
    12dc:	81 11       	cpse	r24, r1
    12de:	fb cf       	rjmp	.-10     	; 0x12d6 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc+0x4>
	{	
		c=pgm_read_byte_near(str + i); 
		auxLocate[i]=c;
		i++;
	} while (c!=0);
}
    12e0:	08 95       	ret

000012e2 <_ZN26GSM3ShieldV1ClientProvider9minSocketEv>:
		GSM3ShieldV1ClientProvider();
		
		/** minSocket
			@return 0
		 */
		int minSocket(){return 0;};
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	08 95       	ret

000012e8 <_ZN26GSM3ShieldV1ClientProvider9maxSocketEv>:
		
		/** maxSocket
			@return 0
		 */
		int maxSocket(){return 0;};
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret

000012ee <_ZN26GSM3ShieldV1ClientProvider16connectTCPClientE9IPAddressii>:
	connectTCPClientContinue();	
	return theGSM3ShieldV1ModemCore.getCommandError();	
}

int GSM3ShieldV1ClientProvider::connectTCPClient(IPAddress add, int port, int id_socket)
{
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    12f6:	db 01       	movw	r26, r22
    12f8:	12 96       	adiw	r26, 0x02	; 2
    12fa:	cd 90       	ld	r12, X+
    12fc:	dd 90       	ld	r13, X+
    12fe:	ed 90       	ld	r14, X+
    1300:	fc 90       	ld	r15, X
    1302:	15 97       	sbiw	r26, 0x05	; 5
    1304:	fc 01       	movw	r30, r24
    1306:	c1 86       	std	Z+9, r12	; 0x09
    1308:	d2 86       	std	Z+10, r13	; 0x0a
    130a:	e3 86       	std	Z+11, r14	; 0x0b
    130c:	f4 86       	std	Z+12, r15	; 0x0c
		char *getPhoneNumber(){return phoneNumber;};
		
		/** Establish a new phone number
			@param n			Phone number
		 */
		void setPhoneNumber(char *n){phoneNumber=n;};
    130e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    1312:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
	remoteIP=add;
	theGSM3ShieldV1ModemCore.setPhoneNumber(0);
	return connectTCPClient(0, port, id_socket);
    1316:	01 90       	ld	r0, Z+
    1318:	f0 81       	ld	r31, Z
    131a:	e0 2d       	mov	r30, r0
    131c:	04 84       	ldd	r0, Z+12	; 0x0c
    131e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1320:	e0 2d       	mov	r30, r0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
}
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12

int GSM3ShieldV1ClientProvider::connectTCPClient(IPAddress add, int port, int id_socket)
{
	remoteIP=add;
	theGSM3ShieldV1ModemCore.setPhoneNumber(0);
	return connectTCPClient(0, port, id_socket);
    132e:	09 94       	ijmp

00001330 <_ZN26GSM3ShieldV1ClientProvider16beginWriteSocketEbi>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Write socket first chain main function.
void GSM3ShieldV1ClientProvider::beginWriteSocket(bool client1Server0, int id_socket)
{
    1330:	08 95       	ret

00001332 <_ZN26GSM3ShieldV1ClientProvider14endWriteSocketEv>:
		theGSM3ShieldV1ModemCore.print((char)c);
}

//Write socket last chain main function.
void GSM3ShieldV1ClientProvider::endWriteSocket()
{		
    1332:	08 95       	ret

00001334 <_ZN26GSM3ShieldV1ClientProvider9getSocketEi>:
}

int GSM3ShieldV1ClientProvider::getSocket(int socket)
{
	return 0;
}
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	08 95       	ret

0000133a <_ZN26GSM3ShieldV1ClientProvider13releaseSocketEi>:

void GSM3ShieldV1ClientProvider::releaseSocket(int socket)
{
    133a:	08 95       	ret

0000133c <_ZN26GSM3ShieldV1ClientProvider21getStatusSocketClientEh>:

}

bool GSM3ShieldV1ClientProvider::getStatusSocketClient(uint8_t socket)
{
	return (theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1342:	95 30       	cpi	r25, 0x05	; 5
    1344:	09 f0       	breq	.+2      	; 0x1348 <_ZN26GSM3ShieldV1ClientProvider21getStatusSocketClientEh+0xc>
    1346:	80 e0       	ldi	r24, 0x00	; 0

};
    1348:	08 95       	ret

0000134a <_ZN26GSM3ShieldV1ClientProvider11writeSocketEPKc>:


//Write socket next chain function.
void GSM3ShieldV1ClientProvider::writeSocket(const char* buf)
{
	if(theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED)
    134a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    134e:	85 30       	cpi	r24, 0x05	; 5
    1350:	21 f4       	brne	.+8      	; 0x135a <_ZN26GSM3ShieldV1ClientProvider11writeSocketEPKc+0x10>
		theGSM3ShieldV1ModemCore.print(buf);
    1352:	8b e7       	ldi	r24, 0x7B	; 123
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
    135a:	08 95       	ret

0000135c <_ZN26GSM3ShieldV1ClientProvider11writeSocketEh>:
}

//Write socket character function.
void GSM3ShieldV1ClientProvider::writeSocket(uint8_t c)
{
	if(theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED)
    135c:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1360:	85 30       	cpi	r24, 0x05	; 5
    1362:	21 f4       	brne	.+8      	; 0x136c <_ZN26GSM3ShieldV1ClientProvider11writeSocketEh+0x10>
		theGSM3ShieldV1ModemCore.print((char)c);
    1364:	8b e7       	ldi	r24, 0x7B	; 123
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <_ZN5Print5printEc>
    136c:	08 95       	ret

0000136e <_ZN26GSM3ShieldV1ClientProvider15availableSocketEbi>:

//Available socket main function.
int GSM3ShieldV1ClientProvider::availableSocket(bool client1Server0, int id_socket)
{
		
	if(!(theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED))
    136e:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1372:	85 30       	cpi	r24, 0x05	; 5
    1374:	31 f0       	breq	.+12     	; 0x1382 <_ZN26GSM3ShieldV1ClientProvider15availableSocketEbi+0x14>
		theGSM3ShieldV1ModemCore.closeCommand(4);
    1376:	64 e0       	ldi	r22, 0x04	; 4
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	89 e7       	ldi	r24, 0x79	; 121
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		inline byte availableBytes(){ return ((head-(tail+1))&__BUFFERMASK__);};
		
		/** Stored bytes in circular buffer
			@return stored bytes
		 */
		inline byte storedBytes(){ return ((tail-head)&__BUFFERMASK__);};
    1382:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    1386:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    138a:	89 1b       	sub	r24, r25
    138c:	8f 77       	andi	r24, 0x7F	; 127
		
	if(theGSM3ShieldV1ModemCore.theBuffer().storedBytes())
    138e:	19 f0       	breq	.+6      	; 0x1396 <_ZN26GSM3ShieldV1ClientProvider15availableSocketEbi+0x28>
		theGSM3ShieldV1ModemCore.closeCommand(1);
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <_ZN26GSM3ShieldV1ClientProvider15availableSocketEbi+0x2c>
	else
		theGSM3ShieldV1ModemCore.closeCommand(4);
    1396:	64 e0       	ldi	r22, 0x04	; 4
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	89 e7       	ldi	r24, 0x79	; 121
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		
	return theGSM3ShieldV1ModemCore.getCommandError();
    13a2:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <theGSM3ShieldV1ModemCore+0xa>
}
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	08 95       	ret

000013aa <_ZN26GSM3ShieldV1ClientProvider25recognizeUnsolicitedEventEh>:
}

// URC recognize.
// Yes, we recognize "closes" in client mode
bool GSM3ShieldV1ClientProvider::recognizeUnsolicitedEvent(byte oldTail)
{
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	2c 97       	sbiw	r28, 0x0c	; 12
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
	char auxLocate [12];
	prepareAuxLocate(PSTR("CLOSED"), auxLocate);
    13c4:	03 96       	adiw	r24, 0x03	; 3
    13c6:	7c 01       	movw	r14, r24
    13c8:	ae 01       	movw	r20, r28
    13ca:	4f 5f       	subi	r20, 0xFF	; 255
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	6e ec       	ldi	r22, 0xCE	; 206
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>

	if((theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED) & theGSM3ShieldV1ModemCore.theBuffer().chopUntil(auxLocate, false, false))
    13d6:	11 e0       	ldi	r17, 0x01	; 1
    13d8:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	09 f0       	breq	.+2      	; 0x13e2 <_ZN26GSM3ShieldV1ClientProvider25recognizeUnsolicitedEventEh+0x38>
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	be 01       	movw	r22, r28
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	89 ea       	ldi	r24, 0xA9	; 169
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>
    13f4:	18 23       	and	r17, r24
    13f6:	41 f0       	breq	.+16     	; 0x1408 <_ZN26GSM3ShieldV1ClientProvider25recognizeUnsolicitedEventEh+0x5e>
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
	{
		theGSM3ShieldV1ModemCore.setStatus(GPRS_READY);
		theGSM3ShieldV1ModemCore.unRegisterUMProvider(this);
    13fe:	b7 01       	movw	r22, r14
    1400:	89 e7       	ldi	r24, 0x79	; 121
    1402:	93 e0       	ldi	r25, 0x03	; 3
    1404:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider>
		return true;
	}
		
	return false;
}
    1408:	81 2f       	mov	r24, r17
    140a:	2c 96       	adiw	r28, 0x0c	; 12
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	08 95       	ret

00001422 <_ZThn3_N26GSM3ShieldV1ClientProvider25recognizeUnsolicitedEventEh>:
    1422:	03 97       	sbiw	r24, 0x03	; 3
    1424:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_ZN26GSM3ShieldV1ClientProvider25recognizeUnsolicitedEventEh>

00001428 <_ZN26GSM3ShieldV1ClientProvider10peekSocketEv>:
}

//Read socket main function.
int GSM3ShieldV1ClientProvider::peekSocket()
{
	return theGSM3ShieldV1ModemCore.theBuffer().peek(0); 
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	89 ea       	ldi	r24, 0xA9	; 169
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN18GSM3CircularBuffer4peekEi>
}
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	08 95       	ret

00001438 <_ZN26GSM3ShieldV1ClientProvider5readyEv>:
		void manageResponse(byte from, byte to);
		
		/** Get last command status
			@return returns 0 if last command is still executing, 1 success, >1 error
		 */
		int ready(){return GSM3ShieldV1BaseProvider::ready();};
    1438:	03 96       	adiw	r24, 0x03	; 3
    143a:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>

0000143e <_ZN26GSM3ShieldV1ClientProviderC1Ev>:
https://github.com/BlueVia/Official-Arduino
*/
#include <GSM3ShieldV1ClientProvider.h>
#include <GSM3ShieldV1ModemCore.h>

GSM3ShieldV1ClientProvider::GSM3ShieldV1ClientProvider()
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
    1444:	82 e8       	ldi	r24, 0x82	; 130
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	99 83       	std	Y+1, r25	; 0x01
    144a:	88 83       	st	Y, r24
    144c:	8c ea       	ldi	r24, 0xAC	; 172
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	ce 01       	movw	r24, r28
    1456:	07 96       	adiw	r24, 0x07	; 7
    1458:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_ZN9IPAddressC1Ev>
{
	theGSM3MobileClientProvider=this;
    145c:	d0 93 1b 03 	sts	0x031B, r29	; 0x80031b <__data_end+0x1>
    1460:	c0 93 1a 03 	sts	0x031A, r28	; 0x80031a <__data_end>
};
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <_GLOBAL__sub_I__ZN26GSM3ShieldV1ClientProviderC2Ev>:

bool GSM3ShieldV1ClientProvider::getStatusSocketClient(uint8_t socket)
{
	return (theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED);

};
    146a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    146c:	00 e0       	ldi	r16, 0x00	; 0
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	87 e6       	ldi	r24, 0x67	; 103
    1476:	93 e0       	ldi	r25, 0x03	; 3
    1478:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    147c:	0f 91       	pop	r16
    147e:	08 95       	ret

00001480 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv>:
	return connectTCPClient(0, port, id_socket);
}

//Connect TCP continue function.
void GSM3ShieldV1ClientProvider::connectTCPClientContinue()
{
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	2d 97       	sbiw	r28, 0x0d	; 13
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	8c 01       	movw	r16, r24
	// 2: Waiting for IFC OK
	// 3: Start-up TCP connection "AT+QIOPEN"
	// 4: Wait for connection OK
	// 5: Wait for CONNECT
	
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    149a:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    149e:	93 30       	cpi	r25, 0x03	; 3
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x24>
    14a2:	73 c0       	rjmp	.+230    	; 0x158a <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x10a>
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x30>
    14a6:	91 30       	cpi	r25, 0x01	; 1
    14a8:	49 f0       	breq	.+18     	; 0x14bc <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x3c>
    14aa:	92 30       	cpi	r25, 0x02	; 2
    14ac:	01 f1       	breq	.+64     	; 0x14ee <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x6e>
    14ae:	c7 c0       	rjmp	.+398    	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
    14b0:	94 30       	cpi	r25, 0x04	; 4
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x36>
    14b4:	85 c0       	rjmp	.+266    	; 0x15c0 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x140>
    14b6:	9b 30       	cpi	r25, 0x0B	; 11
    14b8:	29 f0       	breq	.+10     	; 0x14c4 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x44>
    14ba:	c1 c0       	rjmp	.+386    	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
	case 1:
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CIPSTART="), false);
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	64 e0       	ldi	r22, 0x04	; 4
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	29 c0       	rjmp	.+82     	; 0x1516 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x96>
		
		theGSM3ShieldV1ModemCore.setCommandCounter(3);
		break;
	
	case 11:
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+QIDNSIP="), false);
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	68 ef       	ldi	r22, 0xF8	; 248
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	89 e7       	ldi	r24, 0x79	; 121
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		GSM3SoftSerial gss; // Direct access to modem
		
		/** Get phone number
			@return phone number
		 */
		char *getPhoneNumber(){return phoneNumber;};
    14d2:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    14d6:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
		if ((theGSM3ShieldV1ModemCore.getPhoneNumber()!=0)&&
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x60>
    14de:	a3 c0       	rjmp	.+326    	; 0x1626 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1a6>
    14e0:	80 81       	ld	r24, Z
    14e2:	80 53       	subi	r24, 0x30	; 48
    14e4:	8a 30       	cpi	r24, 0x0A	; 10
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x6a>
    14e8:	9e c0       	rjmp	.+316    	; 0x1626 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1a6>
			((*(theGSM3ShieldV1ModemCore.getPhoneNumber())<'0')||((*(theGSM3ShieldV1ModemCore.getPhoneNumber())>'9'))))
		{
			theGSM3ShieldV1ModemCore.print('1');
    14ea:	61 e3       	ldi	r22, 0x31	; 49
    14ec:	9d c0       	rjmp	.+314    	; 0x1628 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1a8>
			theGSM3ShieldV1ModemCore.print('\r');
		}
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		break;
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	be 01       	movw	r22, r28
    14f8:	63 5f       	subi	r22, 0xF3	; 243
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	89 e7       	ldi	r24, 0x79	; 121
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x8a>
    1508:	9a c0       	rjmp	.+308    	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
	    {
			//Response received
			if(resp)
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	88 23       	and	r24, r24
    150e:	d1 f1       	breq	.+116    	; 0x1584 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x104>
			{				
				// AT+QIOPEN
				theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+QIOPEN="),false);
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	6d ee       	ldi	r22, 0xED	; 237
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	89 e7       	ldi	r24, 0x79	; 121
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
				theGSM3ShieldV1ModemCore.print("\"TCP\",\"");
    151e:	6b e5       	ldi	r22, 0x5B	; 91
    1520:	71 e0       	ldi	r23, 0x01	; 1
    1522:	8b e7       	ldi	r24, 0x7B	; 123
    1524:	93 e0       	ldi	r25, 0x03	; 3
    1526:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
    152a:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    152e:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
				if(theGSM3ShieldV1ModemCore.getPhoneNumber()!=0)
    1532:	61 15       	cp	r22, r1
    1534:	71 05       	cpc	r23, r1
    1536:	29 f0       	breq	.+10     	; 0x1542 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0xc2>
				{
					theGSM3ShieldV1ModemCore.print(theGSM3ShieldV1ModemCore.getPhoneNumber());
    1538:	8b e7       	ldi	r24, 0x7B	; 123
    153a:	93 e0       	ldi	r25, 0x03	; 3
    153c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
    1540:	06 c0       	rjmp	.+12     	; 0x154e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0xce>
				}
				else
				{
					remoteIP.printTo(theGSM3ShieldV1ModemCore);
    1542:	6b e7       	ldi	r22, 0x7B	; 123
    1544:	73 e0       	ldi	r23, 0x03	; 3
    1546:	c8 01       	movw	r24, r16
    1548:	07 96       	adiw	r24, 0x07	; 7
    154a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <_ZNK9IPAddress7printToER5Print>
				}
				theGSM3ShieldV1ModemCore.print('"');
    154e:	62 e2       	ldi	r22, 0x22	; 34
    1550:	8b e7       	ldi	r24, 0x7B	; 123
    1552:	93 e0       	ldi	r25, 0x03	; 3
    1554:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
				theGSM3ShieldV1ModemCore.print(',');
    1558:	6c e2       	ldi	r22, 0x2C	; 44
    155a:	8b e7       	ldi	r24, 0x7B	; 123
    155c:	93 e0       	ldi	r25, 0x03	; 3
    155e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
				theGSM3ShieldV1ModemCore.print(theGSM3ShieldV1ModemCore.getPort());
    1562:	60 91 81 03 	lds	r22, 0x0381	; 0x800381 <theGSM3ShieldV1ModemCore+0x8>
    1566:	70 91 82 03 	lds	r23, 0x0382	; 0x800382 <theGSM3ShieldV1ModemCore+0x9>
    156a:	4a e0       	ldi	r20, 0x0A	; 10
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	8b e7       	ldi	r24, 0x7B	; 123
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN5Print5printEii>
				theGSM3ShieldV1ModemCore.print('\r');
    1576:	6d e0       	ldi	r22, 0x0D	; 13
    1578:	8b e7       	ldi	r24, 0x7B	; 123
    157a:	93 e0       	ldi	r25, 0x03	; 3
    157c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	1b c0       	rjmp	.+54     	; 0x15ba <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x13a>
				theGSM3ShieldV1ModemCore.setCommandCounter(3);
			}
			else theGSM3ShieldV1ModemCore.closeCommand(3);
    1584:	63 e0       	ldi	r22, 0x03	; 3
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	49 c0       	rjmp	.+146    	; 0x161c <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x19c>
		}	
		break;
	
	case 3:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	be 01       	movw	r22, r28
    1594:	63 5f       	subi	r22, 0xF3	; 243
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	89 e7       	ldi	r24, 0x79	; 121
    159a:	93 e0       	ldi	r25, 0x03	; 3
    159c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    15a0:	88 23       	and	r24, r24
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x126>
    15a4:	4c c0       	rjmp	.+152    	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
	    {
			// Response received
			if(resp)
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	88 23       	and	r24, r24
    15aa:	61 f3       	breq	.-40     	; 0x1584 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x104>
			{
				// OK Received
				Serial.println("OK Received");
    15ac:	63 e6       	ldi	r22, 0x63	; 99
    15ae:	71 e0       	ldi	r23, 0x01	; 1
    15b0:	85 ea       	ldi	r24, 0xA5	; 165
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    15be:	3f c0       	rjmp	.+126    	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
			else theGSM3ShieldV1ModemCore.closeCommand(3);
		}	
		break;
	case 4:
		char auxLocate [12];
		prepareAuxLocate(PSTR("CONNECT OK\r\n"), auxLocate);
    15c0:	ae 01       	movw	r20, r28
    15c2:	4f 5f       	subi	r20, 0xFF	; 255
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	60 ee       	ldi	r22, 0xE0	; 224
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	c8 01       	movw	r24, r16
    15cc:	03 96       	adiw	r24, 0x03	; 3
    15ce:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp,auxLocate))
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	ae 01       	movw	r20, r28
    15d8:	4f 5f       	subi	r20, 0xFF	; 255
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	be 01       	movw	r22, r28
    15de:	63 5f       	subi	r22, 0xF3	; 243
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	89 e7       	ldi	r24, 0x79	; 121
    15e4:	93 e0       	ldi	r25, 0x03	; 3
    15e6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    15ea:	88 23       	and	r24, r24
    15ec:	41 f1       	breq	.+80     	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
	    {
			Serial.println("Connect OK");
    15ee:	6f e6       	ldi	r22, 0x6F	; 111
    15f0:	71 e0       	ldi	r23, 0x01	; 1
    15f2:	85 ea       	ldi	r24, 0xA5	; 165
    15f4:	94 e0       	ldi	r25, 0x04	; 4
    15f6:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>
			// Response received
			if(resp)
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	88 23       	and	r24, r24
    15fe:	11 f2       	breq	.-124    	; 0x1584 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x104>
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
    1600:	85 e0       	ldi	r24, 0x05	; 5
    1602:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
			{
				// Received CONNECT OK
				// Great. We're done
				theGSM3ShieldV1ModemCore.setStatus(TRANSPARENT_CONNECTED);
				theGSM3ShieldV1ModemCore.theBuffer().chopUntil(auxLocate, true);
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	be 01       	movw	r22, r28
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	89 ea       	ldi	r24, 0xA9	; 169
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>
				theGSM3ShieldV1ModemCore.closeCommand(1);
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	89 e7       	ldi	r24, 0x79	; 121
    161e:	93 e0       	ldi	r25, 0x03	; 3
    1620:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    1624:	0c c0       	rjmp	.+24     	; 0x163e <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x1be>
			theGSM3ShieldV1ModemCore.print('1');
			theGSM3ShieldV1ModemCore.print('\r');
		}
		else 
		{
			theGSM3ShieldV1ModemCore.print('0');
    1626:	60 e3       	ldi	r22, 0x30	; 48
    1628:	8b e7       	ldi	r24, 0x7B	; 123
    162a:	93 e0       	ldi	r25, 0x03	; 3
    162c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
			theGSM3ShieldV1ModemCore.print('\r');
    1630:	6d e0       	ldi	r22, 0x0D	; 13
    1632:	8b e7       	ldi	r24, 0x7B	; 123
    1634:	93 e0       	ldi	r25, 0x03	; 3
    1636:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	be cf       	rjmp	.-132    	; 0x15ba <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv+0x13a>
			else 
				theGSM3ShieldV1ModemCore.closeCommand(3);
		}		
		break;	
	}
}
    163e:	2d 96       	adiw	r28, 0x0d	; 13
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <_ZN26GSM3ShieldV1ClientProvider16connectTCPClientEPKcii>:
	}
}

//Connect TCP main function.
int GSM3ShieldV1ClientProvider::connectTCPClient(const char* server, int port, int id_socket)
{
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	8c 01       	movw	r16, r24
		int getPort(){return port;};
		
		/** Establish a new port for use
			@param p			Port
		 */
		void setPort(int p){port=p;};
    1662:	c9 e7       	ldi	r28, 0x79	; 121
    1664:	d3 e0       	ldi	r29, 0x03	; 3
    1666:	59 87       	std	Y+9, r21	; 0x09
    1668:	48 87       	std	Y+8, r20	; 0x08
	theGSM3ShieldV1ModemCore.setPort(port);		
	idSocket = id_socket;
    166a:	fc 01       	movw	r30, r24
    166c:	36 87       	std	Z+14, r19	; 0x0e
    166e:	25 87       	std	Z+13, r18	; 0x0d
		char *getPhoneNumber(){return phoneNumber;};
		
		/** Establish a new phone number
			@param n			Phone number
		 */
		void setPhoneNumber(char *n){phoneNumber=n;};
    1670:	7f 83       	std	Y+7, r23	; 0x07
    1672:	6e 83       	std	Y+6, r22	; 0x06
	
	theGSM3ShieldV1ModemCore.setPhoneNumber((char*)server);
	theGSM3ShieldV1ModemCore.openCommand(this,CONNECTTCPCLIENT);
    1674:	7c 01       	movw	r14, r24
    1676:	f3 e0       	ldi	r31, 0x03	; 3
    1678:	ef 0e       	add	r14, r31
    167a:	f1 1c       	adc	r15, r1
    167c:	4e e0       	ldi	r20, 0x0E	; 14
    167e:	b7 01       	movw	r22, r14
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	theGSM3ShieldV1ModemCore.registerUMProvider(this);
    1686:	b7 01       	movw	r22, r14
    1688:	ce 01       	movw	r24, r28
    168a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider>
	connectTCPClientContinue();	
    168e:	c8 01       	movw	r24, r16
    1690:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();	
    1694:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	08 95       	ret

000016a6 <_ZN26GSM3ShieldV1ClientProvider13disconnectTCPEbi>:
	}
}

//Disconnect TCP main function.
int GSM3ShieldV1ClientProvider::disconnectTCP(bool client1Server0, int id_socket)
{		
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
	// id Socket does not really mean anything, in this case we have
	// only one socket running
	theGSM3ShieldV1ModemCore.openCommand(this,DISCONNECTTCP);
    16aa:	ec 01       	movw	r28, r24
    16ac:	23 96       	adiw	r28, 0x03	; 3
    16ae:	4f e0       	ldi	r20, 0x0F	; 15
    16b0:	be 01       	movw	r22, r28
    16b2:	89 e7       	ldi	r24, 0x79	; 121
    16b4:	93 e0       	ldi	r25, 0x03	; 3
    16b6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	
	// If we are not closed, launch the command
//[ZZ]	if(theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED)
//	{
		delay(1000);
    16ba:	68 ee       	ldi	r22, 0xE8	; 232
    16bc:	73 e0       	ldi	r23, 0x03	; 3
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
		theGSM3ShieldV1ModemCore.print("+++");
    16c6:	6a e7       	ldi	r22, 0x7A	; 122
    16c8:	71 e0       	ldi	r23, 0x01	; 1
    16ca:	8b e7       	ldi	r24, 0x7B	; 123
    16cc:	93 e0       	ldi	r25, 0x03	; 3
    16ce:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		delay(1000);
    16d2:	68 ee       	ldi	r22, 0xE8	; 232
    16d4:	73 e0       	ldi	r23, 0x03	; 3
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+QICLOSE"));
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	65 ed       	ldi	r22, 0xD5	; 213
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	89 e7       	ldi	r24, 0x79	; 121
    16e6:	93 e0       	ldi	r25, 0x03	; 3
    16e8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
	// Looks like it runs everytime, so we simply flush to death and go on
	do
	{
		// Empty the local buffer, and tell the modem to XON
		// If meanwhile we receive a DISCONNECT we should detect it as URC.
		theGSM3ShieldV1ModemCore.theBuffer().flush();
    16f2:	89 ea       	ldi	r24, 0xA9	; 169
    16f4:	93 e0       	ldi	r25, 0x03	; 3
    16f6:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    16fa:	86 e9       	ldi	r24, 0x96	; 150
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
		// Give some time for the buffer to refill
		delay(100);
    1702:	64 e6       	ldi	r22, 0x64	; 100
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
		theGSM3ShieldV1ModemCore.closeCommand(1);
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	89 e7       	ldi	r24, 0x79	; 121
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    171a:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    171e:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    1722:	98 1b       	sub	r25, r24
    1724:	9f 77       	andi	r25, 0x7F	; 127
		delay(1000);
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+QICLOSE"));
		theGSM3ShieldV1ModemCore.setStatus(GPRS_READY);
//	}
	// Looks like it runs everytime, so we simply flush to death and go on
	do
    1726:	29 f7       	brne	.-54     	; 0x16f2 <_ZN26GSM3ShieldV1ClientProvider13disconnectTCPEbi+0x4c>
		// Give some time for the buffer to refill
		delay(100);
		theGSM3ShieldV1ModemCore.closeCommand(1);
	}while(theGSM3ShieldV1ModemCore.theBuffer().storedBytes()>0);

	theGSM3ShieldV1ModemCore.unRegisterUMProvider(this);
    1728:	be 01       	movw	r22, r28
    172a:	89 e7       	ldi	r24, 0x79	; 121
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider>
	return theGSM3ShieldV1ModemCore.getCommandError();
    1732:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <theGSM3ShieldV1ModemCore+0xa>
}
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <_ZN26GSM3ShieldV1ClientProvider10readSocketEv>:
		
	return theGSM3ShieldV1ModemCore.getCommandError();
}

int GSM3ShieldV1ClientProvider::readSocket()
{
    173e:	cf 93       	push	r28
		// TO-DO.Check if this formule runs too at the buffer limit
		
		/** Get available bytes in circular buffer
			@return available bytes
		 */
		inline byte availableBytes(){ return ((head-(tail+1))&__BUFFERMASK__);};
    1740:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    1744:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    1748:	81 50       	subi	r24, 0x01	; 1
    174a:	89 1b       	sub	r24, r25
    174c:	8f 77       	andi	r24, 0x7F	; 127
	char charSocket;
		
	if(theGSM3ShieldV1ModemCore.theBuffer().availableBytes()==0)
    174e:	a9 f0       	breq	.+42     	; 0x177a <_ZN26GSM3ShieldV1ClientProvider10readSocketEv+0x3c>
	{
		return 0;
	}
	
	charSocket = theGSM3ShieldV1ModemCore.theBuffer().read(); 
    1750:	89 ea       	ldi	r24, 0xA9	; 169
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN18GSM3CircularBuffer4readEv>
    1758:	c8 2f       	mov	r28, r24
    175a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    175e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    1762:	91 50       	subi	r25, 0x01	; 1
    1764:	98 1b       	sub	r25, r24
    1766:	9f 77       	andi	r25, 0x7F	; 127
	
	if(theGSM3ShieldV1ModemCore.theBuffer().availableBytes()==100)
    1768:	94 36       	cpi	r25, 0x64	; 100
    176a:	21 f4       	brne	.+8      	; 0x1774 <_ZN26GSM3ShieldV1ClientProvider10readSocketEv+0x36>
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    176c:	86 e9       	ldi	r24, 0x96	; 150
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>

	return charSocket;
    1774:	8c 2f       	mov	r24, r28
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <_ZN26GSM3ShieldV1ClientProvider10readSocketEv+0x40>
{
	char charSocket;
		
	if(theGSM3ShieldV1ModemCore.theBuffer().availableBytes()==0)
	{
		return 0;
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
	if(theGSM3ShieldV1ModemCore.theBuffer().availableBytes()==100)
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();

	return charSocket;

}
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <_ZN26GSM3ShieldV1ClientProvider19flushSocketContinueEv>:
		
		/** Stored bytes in circular buffer
			@return stored bytes
		 */
		inline byte storedBytes(){ return ((tail-head)&__BUFFERMASK__);};
    1782:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    1786:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    178a:	89 1b       	sub	r24, r25
    178c:	8f 77       	andi	r24, 0x7F	; 127

//Send SMS continue function.
void GSM3ShieldV1ClientProvider::flushSocketContinue()
{
	// If we have incomed data
	if(theGSM3ShieldV1ModemCore.theBuffer().storedBytes()>0)
    178e:	41 f0       	breq	.+16     	; 0x17a0 <_ZN26GSM3ShieldV1ClientProvider19flushSocketContinueEv+0x1e>
	{
		// Empty the local buffer, and tell the modem to XON
		// If meanwhile we receive a DISCONNECT we should detect it as URC.
		theGSM3ShieldV1ModemCore.theBuffer().flush();
    1790:	89 ea       	ldi	r24, 0xA9	; 169
    1792:	93 e0       	ldi	r25, 0x03	; 3
    1794:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    1798:	86 e9       	ldi	r24, 0x96	; 150
    179a:	93 e0       	ldi	r25, 0x03	; 3
    179c:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
	}
	else 
	{
		//We're done		
		theGSM3ShieldV1ModemCore.closeCommand(1);
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	89 e7       	ldi	r24, 0x79	; 121
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>

000017ac <_ZN26GSM3ShieldV1ClientProvider14manageResponseEhh>:
};

//Response management.
void GSM3ShieldV1ClientProvider::manageResponse(byte from, byte to)
{
	switch(theGSM3ShieldV1ModemCore.getOngoingCommand())
    17ac:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    17b0:	2e 30       	cpi	r18, 0x0E	; 14
    17b2:	39 f0       	breq	.+14     	; 0x17c2 <_ZN26GSM3ShieldV1ClientProvider14manageResponseEhh+0x16>
    17b4:	23 31       	cpi	r18, 0x13	; 19
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <_ZN26GSM3ShieldV1ClientProvider14manageResponseEhh+0x1a>
    17b8:	21 30       	cpi	r18, 0x01	; 1
    17ba:	39 f4       	brne	.+14     	; 0x17ca <_ZN26GSM3ShieldV1ClientProvider14manageResponseEhh+0x1e>
		
		// Only can be executed from the interrupt!
		/** Delete circular buffer to the end
			@param from			Initial byte position
		 */
		inline void deleteToTheEnd(byte from){tail=from;};
    17bc:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    17c0:	08 95       	ret
	{
		case NONE:
			theGSM3ShieldV1ModemCore.gss.cb.deleteToTheEnd(from);
			break;
		case CONNECTTCPCLIENT:
			connectTCPClientContinue();
    17c2:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <_ZN26GSM3ShieldV1ClientProvider24connectTCPClientContinueEv>
			break;
		case FLUSHSOCKET:
			flushSocketContinue();
    17c6:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <_ZN26GSM3ShieldV1ClientProvider19flushSocketContinueEv>
    17ca:	08 95       	ret

000017cc <_ZThn3_N26GSM3ShieldV1ClientProvider14manageResponseEhh>:
    17cc:	03 97       	sbiw	r24, 0x03	; 3
    17ce:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <_ZN26GSM3ShieldV1ClientProvider14manageResponseEhh>

000017d2 <_ZN26GSM3ShieldV1ClientProvider11flushSocketEv>:
}


//Flush SMS main function.
void GSM3ShieldV1ClientProvider::flushSocket()
{
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	ec 01       	movw	r28, r24
	theGSM3ShieldV1ModemCore.openCommand(this,FLUSHSOCKET);
    17d8:	bc 01       	movw	r22, r24
    17da:	6d 5f       	subi	r22, 0xFD	; 253
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	43 e1       	ldi	r20, 0x13	; 19
    17e0:	89 e7       	ldi	r24, 0x79	; 121
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>

	flushSocketContinue();
    17e8:	ce 01       	movw	r24, r28
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
//Flush SMS main function.
void GSM3ShieldV1ClientProvider::flushSocket()
{
	theGSM3ShieldV1ModemCore.openCommand(this,FLUSHSOCKET);

	flushSocketContinue();
    17ee:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <_ZN26GSM3ShieldV1ClientProvider19flushSocketContinueEv>

000017f2 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv>:
		delay(100);
	} 
	IPAddress ip;
	inet_aton(ip_temp, ip);
	return ip;
}
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	2d 97       	sbiw	r28, 0x0d	; 13
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	21 30       	cpi	r18, 0x01	; 1
    180e:	31 05       	cpc	r19, r1
    1810:	b1 f4       	brne	.+44     	; 0x183e <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x4c>
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	6d ea       	ldi	r22, 0xAD	; 173
    1816:	71 e0       	ldi	r23, 0x01	; 1
    1818:	89 e7       	ldi	r24, 0x79	; 121
    181a:	93 e0       	ldi	r25, 0x03	; 3
    181c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1820:	4a e0       	ldi	r20, 0x0A	; 10
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	8b e7       	ldi	r24, 0x7B	; 123
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN5Print5printEii>
    1830:	6d e0       	ldi	r22, 0x0D	; 13
    1832:	8b e7       	ldi	r24, 0x7B	; 123
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	1c c0       	rjmp	.+56     	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	f9 f4       	brne	.+62     	; 0x1882 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x90>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	be 01       	movw	r22, r28
    184e:	63 5f       	subi	r22, 0xF3	; 243
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	89 e7       	ldi	r24, 0x79	; 121
    1854:	93 e0       	ldi	r25, 0x03	; 3
    1856:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x6e>
    185e:	74 c1       	rjmp	.+744    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	88 23       	and	r24, r24
    1864:	59 f0       	breq	.+22     	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	62 ea       	ldi	r22, 0xA2	; 162
    186a:	71 e0       	ldi	r23, 0x01	; 1
    186c:	89 e7       	ldi	r24, 0x79	; 121
    186e:	93 e0       	ldi	r25, 0x03	; 3
    1870:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    187a:	66 c1       	rjmp	.+716    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    187c:	63 e0       	ldi	r22, 0x03	; 3
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	5f c1       	rjmp	.+702    	; 0x1b40 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x34e>
    1882:	23 30       	cpi	r18, 0x03	; 3
    1884:	31 05       	cpc	r19, r1
    1886:	d1 f4       	brne	.+52     	; 0x18bc <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0xca>
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	be 01       	movw	r22, r28
    1892:	63 5f       	subi	r22, 0xF3	; 243
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	89 e7       	ldi	r24, 0x79	; 121
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    189e:	88 23       	and	r24, r24
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0xb2>
    18a2:	52 c1       	rjmp	.+676    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    18a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a6:	88 23       	and	r24, r24
    18a8:	49 f3       	breq	.-46     	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	66 e9       	ldi	r22, 0x96	; 150
    18ae:	71 e0       	ldi	r23, 0x01	; 1
    18b0:	89 e7       	ldi	r24, 0x79	; 121
    18b2:	93 e0       	ldi	r25, 0x03	; 3
    18b4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    18b8:	84 e0       	ldi	r24, 0x04	; 4
    18ba:	dd cf       	rjmp	.-70     	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    18bc:	24 30       	cpi	r18, 0x04	; 4
    18be:	31 05       	cpc	r19, r1
    18c0:	d1 f4       	brne	.+52     	; 0x18f6 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x104>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	be 01       	movw	r22, r28
    18cc:	63 5f       	subi	r22, 0xF3	; 243
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	89 e7       	ldi	r24, 0x79	; 121
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0xec>
    18dc:	35 c1       	rjmp	.+618    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	88 23       	and	r24, r24
    18e2:	61 f2       	breq	.-104    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	69 e8       	ldi	r22, 0x89	; 137
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	89 e7       	ldi	r24, 0x79	; 121
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    18f2:	85 e0       	ldi	r24, 0x05	; 5
    18f4:	c0 cf       	rjmp	.-128    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    18f6:	25 30       	cpi	r18, 0x05	; 5
    18f8:	31 05       	cpc	r19, r1
    18fa:	79 f5       	brne	.+94     	; 0x195a <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x168>
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	be 01       	movw	r22, r28
    1906:	63 5f       	subi	r22, 0xF3	; 243
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	89 e7       	ldi	r24, 0x79	; 121
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1912:	88 23       	and	r24, r24
    1914:	09 f4       	brne	.+2      	; 0x1918 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x126>
    1916:	18 c1       	rjmp	.+560    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	88 23       	and	r24, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x12e>
    191e:	ae cf       	rjmp	.-164    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	65 e7       	ldi	r22, 0x75	; 117
    1924:	71 e0       	ldi	r23, 0x01	; 1
    1926:	89 e7       	ldi	r24, 0x79	; 121
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    192e:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    1932:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    1936:	8b e7       	ldi	r24, 0x7B	; 123
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
    193e:	68 ef       	ldi	r22, 0xF8	; 248
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	8b e7       	ldi	r24, 0x7B	; 123
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
    194a:	63 ea       	ldi	r22, 0xA3	; 163
    194c:	72 e0       	ldi	r23, 0x02	; 2
    194e:	8b e7       	ldi	r24, 0x7B	; 123
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
    1956:	86 e0       	ldi	r24, 0x06	; 6
    1958:	8e cf       	rjmp	.-228    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    195a:	26 30       	cpi	r18, 0x06	; 6
    195c:	31 05       	cpc	r19, r1
    195e:	d9 f4       	brne	.+54     	; 0x1996 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x1a4>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	be 01       	movw	r22, r28
    196a:	63 5f       	subi	r22, 0xF3	; 243
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	89 e7       	ldi	r24, 0x79	; 121
    1970:	93 e0       	ldi	r25, 0x03	; 3
    1972:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x18a>
    197a:	e6 c0       	rjmp	.+460    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x192>
    1982:	7c cf       	rjmp	.-264    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	68 e6       	ldi	r22, 0x68	; 104
    1988:	71 e0       	ldi	r23, 0x01	; 1
    198a:	89 e7       	ldi	r24, 0x79	; 121
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1992:	88 e0       	ldi	r24, 0x08	; 8
    1994:	70 cf       	rjmp	.-288    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    1996:	28 30       	cpi	r18, 0x08	; 8
    1998:	31 05       	cpc	r19, r1
    199a:	d9 f4       	brne	.+54     	; 0x19d2 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x1e0>
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	be 01       	movw	r22, r28
    19a6:	63 5f       	subi	r22, 0xF3	; 243
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	89 e7       	ldi	r24, 0x79	; 121
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    19b2:	88 23       	and	r24, r24
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x1c6>
    19b6:	c8 c0       	rjmp	.+400    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	88 23       	and	r24, r24
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x1ce>
    19be:	5e cf       	rjmp	.-324    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	6d e5       	ldi	r22, 0x5D	; 93
    19c4:	71 e0       	ldi	r23, 0x01	; 1
    19c6:	89 e7       	ldi	r24, 0x79	; 121
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    19ce:	89 e0       	ldi	r24, 0x09	; 9
    19d0:	52 cf       	rjmp	.-348    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    19d2:	29 30       	cpi	r18, 0x09	; 9
    19d4:	31 05       	cpc	r19, r1
    19d6:	d9 f4       	brne	.+54     	; 0x1a0e <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x21c>
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	be 01       	movw	r22, r28
    19e2:	63 5f       	subi	r22, 0xF3	; 243
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	89 e7       	ldi	r24, 0x79	; 121
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x202>
    19f2:	aa c0       	rjmp	.+340    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    19f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f6:	88 23       	and	r24, r24
    19f8:	09 f4       	brne	.+2      	; 0x19fc <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x20a>
    19fa:	40 cf       	rjmp	.-384    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	60 e5       	ldi	r22, 0x50	; 80
    1a00:	71 e0       	ldi	r23, 0x01	; 1
    1a02:	89 e7       	ldi	r24, 0x79	; 121
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1a0a:	8a e0       	ldi	r24, 0x0A	; 10
    1a0c:	34 cf       	rjmp	.-408    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    1a0e:	2a 30       	cpi	r18, 0x0A	; 10
    1a10:	31 05       	cpc	r19, r1
    1a12:	d9 f4       	brne	.+54     	; 0x1a4a <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x258>
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	be 01       	movw	r22, r28
    1a1e:	63 5f       	subi	r22, 0xF3	; 243
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	89 e7       	ldi	r24, 0x79	; 121
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x23e>
    1a2e:	8c c0       	rjmp	.+280    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a32:	88 23       	and	r24, r24
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x246>
    1a36:	22 cf       	rjmp	.-444    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	68 e4       	ldi	r22, 0x48	; 72
    1a3c:	71 e0       	ldi	r23, 0x01	; 1
    1a3e:	89 e7       	ldi	r24, 0x79	; 121
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1a46:	8b e0       	ldi	r24, 0x0B	; 11
    1a48:	16 cf       	rjmp	.-468    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    1a4a:	2b 30       	cpi	r18, 0x0B	; 11
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	d9 f4       	brne	.+54     	; 0x1a86 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x294>
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	be 01       	movw	r22, r28
    1a5a:	63 5f       	subi	r22, 0xF3	; 243
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	89 e7       	ldi	r24, 0x79	; 121
    1a60:	93 e0       	ldi	r25, 0x03	; 3
    1a62:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1a66:	88 23       	and	r24, r24
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x27a>
    1a6a:	6e c0       	rjmp	.+220    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6e:	88 23       	and	r24, r24
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x282>
    1a72:	04 cf       	rjmp	.-504    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	6b e3       	ldi	r22, 0x3B	; 59
    1a78:	71 e0       	ldi	r23, 0x01	; 1
    1a7a:	89 e7       	ldi	r24, 0x79	; 121
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1a82:	8c e0       	ldi	r24, 0x0C	; 12
    1a84:	f8 ce       	rjmp	.-528    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    1a86:	2c 30       	cpi	r18, 0x0C	; 12
    1a88:	31 05       	cpc	r19, r1
    1a8a:	d9 f4       	brne	.+54     	; 0x1ac2 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x2d0>
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	be 01       	movw	r22, r28
    1a96:	63 5f       	subi	r22, 0xF3	; 243
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	89 e7       	ldi	r24, 0x79	; 121
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x2b6>
    1aa6:	50 c0       	rjmp	.+160    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x2be>
    1aae:	e6 ce       	rjmp	.-564    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	62 e3       	ldi	r22, 0x32	; 50
    1ab4:	71 e0       	ldi	r23, 0x01	; 1
    1ab6:	89 e7       	ldi	r24, 0x79	; 121
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1abe:	8d e0       	ldi	r24, 0x0D	; 13
    1ac0:	da ce       	rjmp	.-588    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    1ac2:	2d 30       	cpi	r18, 0x0D	; 13
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	d1 f4       	brne	.+52     	; 0x1afc <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x30a>
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	be 01       	movw	r22, r28
    1ad2:	63 5f       	subi	r22, 0xF3	; 243
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	89 e7       	ldi	r24, 0x79	; 121
    1ad8:	93 e0       	ldi	r25, 0x03	; 3
    1ada:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1ade:	88 23       	and	r24, r24
    1ae0:	99 f1       	breq	.+102    	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x2f8>
    1ae8:	c9 ce       	rjmp	.-622    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	69 e2       	ldi	r22, 0x29	; 41
    1aee:	71 e0       	ldi	r23, 0x01	; 1
    1af0:	89 e7       	ldi	r24, 0x79	; 121
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1af8:	8e e0       	ldi	r24, 0x0E	; 14
    1afa:	bd ce       	rjmp	.-646    	; 0x1876 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x84>
    1afc:	2e 30       	cpi	r18, 0x0E	; 14
    1afe:	31 05       	cpc	r19, r1
    1b00:	19 f5       	brne	.+70     	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1b02:	ae 01       	movw	r20, r28
    1b04:	4f 5f       	subi	r20, 0xFF	; 255
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	67 e2       	ldi	r22, 0x27	; 39
    1b0a:	71 e0       	ldi	r23, 0x01	; 1
    1b0c:	02 96       	adiw	r24, 0x02	; 2
    1b0e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	ae 01       	movw	r20, r28
    1b18:	4f 5f       	subi	r20, 0xFF	; 255
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	be 01       	movw	r22, r28
    1b1e:	63 5f       	subi	r22, 0xF3	; 243
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	89 e7       	ldi	r24, 0x79	; 121
    1b24:	93 e0       	ldi	r25, 0x03	; 3
    1b26:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1b2a:	88 23       	and	r24, r24
    1b2c:	69 f0       	breq	.+26     	; 0x1b48 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x356>
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	88 23       	and	r24, r24
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x344>
    1b34:	a3 ce       	rjmp	.-698    	; 0x187c <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv+0x8a>
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	89 e7       	ldi	r24, 0x79	; 121
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    1b48:	2d 96       	adiw	r28, 0x0d	; 13
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	08 95       	ret

00001b5a <_ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b>:
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	0f 93       	push	r16
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	5d 83       	std	Y+5, r21	; 0x05
    1b68:	4c 83       	std	Y+4, r20	; 0x04
    1b6a:	3f 83       	std	Y+7, r19	; 0x07
    1b6c:	2e 83       	std	Y+6, r18	; 0x06
    1b6e:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    1b72:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    1b76:	7c 01       	movw	r14, r24
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	e8 0e       	add	r14, r24
    1b7c:	f1 1c       	adc	r15, r1
    1b7e:	4c e0       	ldi	r20, 0x0C	; 12
    1b80:	b7 01       	movw	r22, r14
    1b82:	89 e7       	ldi	r24, 0x79	; 121
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1b90:	ce 01       	movw	r24, r28
    1b92:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv>
    1b96:	01 11       	cpse	r16, r1
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <_ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b+0x50>
    1b9a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	08 95       	ret
    1baa:	c7 01       	movw	r24, r14
    1bac:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	99 f7       	brne	.-26     	; 0x1b9a <_ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b+0x40>
    1bb4:	64 e6       	ldi	r22, 0x64	; 100
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    1bc0:	f4 cf       	rjmp	.-24     	; 0x1baa <_ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b+0x50>

00001bc2 <_ZN31GSM3ShieldV1DataNetworkProvider13networkAttachEPcS0_S0_>:
    1bc2:	0f 93       	push	r16
    1bc4:	01 e0       	ldi	r16, 0x01	; 1
    1bc6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b>
    1bca:	0f 91       	pop	r16
    1bcc:	08 95       	ret

00001bce <_ZN31GSM3ShieldV1DataNetworkProvider16parseQILOCIP_rspEPciRb>:
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	e9 01       	movw	r28, r18
    1bd8:	8a 01       	movw	r16, r20
    1bda:	9b 01       	movw	r18, r22
    1bdc:	43 ea       	ldi	r20, 0xA3	; 163
    1bde:	52 e0       	ldi	r21, 0x02	; 2
    1be0:	ba 01       	movw	r22, r20
    1be2:	89 ea       	ldi	r24, 0xA9	; 169
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci>
    1bea:	81 11       	cpse	r24, r1
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <_ZN31GSM3ShieldV1DataNetworkProvider16parseQILOCIP_rspEPciRb+0x24>
    1bee:	18 82       	st	Y, r1
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <_ZN31GSM3ShieldV1DataNetworkProvider16parseQILOCIP_rspEPciRb+0x28>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	88 83       	st	Y, r24
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	08 95       	ret

00001c02 <_GLOBAL__sub_I__ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b>:
    1c02:	0f 93       	push	r16
    1c04:	00 e0       	ldi	r16, 0x00	; 0
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	8d e6       	ldi	r24, 0x6D	; 109
    1c0e:	93 e0       	ldi	r25, 0x03	; 3
    1c10:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv>:
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	2d 97       	sbiw	r28, 0x0d	; 13
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	10 91 84 03 	lds	r17, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    1c32:	12 30       	cpi	r17, 0x02	; 2
    1c34:	d9 f0       	breq	.+54     	; 0x1c6c <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0x54>
    1c36:	13 30       	cpi	r17, 0x03	; 3
    1c38:	c1 f1       	breq	.+112    	; 0x1caa <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0x92>
    1c3a:	11 30       	cpi	r17, 0x01	; 1
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0x28>
    1c3e:	58 c0       	rjmp	.+176    	; 0x1cf0 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xd8>
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	6d ea       	ldi	r22, 0xAD	; 173
    1c44:	71 e0       	ldi	r23, 0x01	; 1
    1c46:	89 e7       	ldi	r24, 0x79	; 121
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1c4e:	4a e0       	ldi	r20, 0x0A	; 10
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	8b e7       	ldi	r24, 0x7B	; 123
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN5Print5printEii>
    1c5e:	6d e0       	ldi	r22, 0x0D	; 13
    1c60:	8b e7       	ldi	r24, 0x7B	; 123
    1c62:	93 e0       	ldi	r25, 0x03	; 3
    1c64:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	15 c0       	rjmp	.+42     	; 0x1c96 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0x7e>
    1c6c:	ae 01       	movw	r20, r28
    1c6e:	4f 5f       	subi	r20, 0xFF	; 255
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	6c e1       	ldi	r22, 0x1C	; 28
    1c74:	71 e0       	ldi	r23, 0x01	; 1
    1c76:	02 96       	adiw	r24, 0x02	; 2
    1c78:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
    1c7c:	be 01       	movw	r22, r28
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	89 ea       	ldi	r24, 0xA9	; 169
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    1c8a:	88 23       	and	r24, r24
    1c8c:	89 f1       	breq	.+98     	; 0x1cf0 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xd8>
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	88 23       	and	r24, r24
    1c92:	21 f0       	breq	.+8      	; 0x1c9c <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0x84>
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    1c9a:	2a c0       	rjmp	.+84     	; 0x1cf0 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xd8>
    1c9c:	63 e0       	ldi	r22, 0x03	; 3
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	89 e7       	ldi	r24, 0x79	; 121
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    1ca8:	23 c0       	rjmp	.+70     	; 0x1cf0 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xd8>
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	be 01       	movw	r22, r28
    1cb4:	63 5f       	subi	r22, 0xF3	; 243
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	89 e7       	ldi	r24, 0x79	; 121
    1cba:	93 e0       	ldi	r25, 0x03	; 3
    1cbc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    1cc0:	88 23       	and	r24, r24
    1cc2:	71 f0       	breq	.+28     	; 0x1ce0 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xc8>
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	88 23       	and	r24, r24
    1cc8:	29 f0       	breq	.+10     	; 0x1cd4 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xbc>
    1cca:	10 93 89 03 	sts	0x0389, r17	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv+0xc0>
    1cd4:	63 e0       	ldi	r22, 0x03	; 3
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	89 e7       	ldi	r24, 0x79	; 121
    1cda:	93 e0       	ldi	r25, 0x03	; 3
    1cdc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    1ce0:	89 ea       	ldi	r24, 0xA9	; 169
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
    1ce8:	86 e9       	ldi	r24, 0x96	; 150
    1cea:	93 e0       	ldi	r25, 0x03	; 3
    1cec:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
    1cf0:	2d 96       	adiw	r28, 0x0d	; 13
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	08 95       	ret

00001d04 <_ZN31GSM3ShieldV1DataNetworkProvider10detachGPRSEb>:
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	8c 01       	movw	r16, r24
    1d10:	f6 2e       	mov	r15, r22
    1d12:	ec 01       	movw	r28, r24
    1d14:	22 96       	adiw	r28, 0x02	; 2
    1d16:	4d e0       	ldi	r20, 0x0D	; 13
    1d18:	be 01       	movw	r22, r28
    1d1a:	89 e7       	ldi	r24, 0x79	; 121
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1d28:	c8 01       	movw	r24, r16
    1d2a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv>
    1d2e:	f1 10       	cpse	r15, r1
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <_ZN31GSM3ShieldV1DataNetworkProvider10detachGPRSEb+0x3e>
    1d32:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	08 95       	ret
    1d42:	ce 01       	movw	r24, r28
    1d44:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>
    1d48:	89 2b       	or	r24, r25
    1d4a:	99 f7       	brne	.-26     	; 0x1d32 <_ZN31GSM3ShieldV1DataNetworkProvider10detachGPRSEb+0x2e>
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    1d58:	f4 cf       	rjmp	.-24     	; 0x1d42 <_ZN31GSM3ShieldV1DataNetworkProvider10detachGPRSEb+0x3e>

00001d5a <_ZN31GSM3ShieldV1DataNetworkProvider13networkDetachEv>:
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <_ZN31GSM3ShieldV1DataNetworkProvider10detachGPRSEb>

00001d60 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv>:
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	1f 92       	push	r1
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    1d6e:	21 30       	cpi	r18, 0x01	; 1
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x18>
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	61 f0       	breq	.+24     	; 0x1d8e <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x2e>
    1d76:	2e c0       	rjmp	.+92     	; 0x1dd4 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x74>
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	61 e1       	ldi	r22, 0x11	; 17
    1d7c:	71 e0       	ldi	r23, 0x01	; 1
    1d7e:	89 e7       	ldi	r24, 0x79	; 121
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    1d8c:	23 c0       	rjmp	.+70     	; 0x1dd4 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x74>
    1d8e:	40 91 81 03 	lds	r20, 0x0381	; 0x800381 <theGSM3ShieldV1ModemCore+0x8>
    1d92:	50 91 82 03 	lds	r21, 0x0382	; 0x800382 <theGSM3ShieldV1ModemCore+0x9>
    1d96:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    1d9a:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    1d9e:	9e 01       	movw	r18, r28
    1da0:	2f 5f       	subi	r18, 0xFF	; 255
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN31GSM3ShieldV1DataNetworkProvider16parseQILOCIP_rspEPciRb>
    1da8:	88 23       	and	r24, r24
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x64>
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	88 23       	and	r24, r24
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x58>
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv+0x5c>
    1db8:	63 e0       	ldi	r22, 0x03	; 3
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	89 e7       	ldi	r24, 0x79	; 121
    1dbe:	93 e0       	ldi	r25, 0x03	; 3
    1dc0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    1dc4:	89 ea       	ldi	r24, 0xA9	; 169
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
    1dcc:	86 e9       	ldi	r24, 0x96	; 150
    1dce:	93 e0       	ldi	r25, 0x03	; 3
    1dd0:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
    1dd4:	0f 90       	pop	r0
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <_ZN31GSM3ShieldV1DataNetworkProvider14manageResponseEhh>:
}

//Response management.
void GSM3ShieldV1DataNetworkProvider::manageResponse(byte from, byte to)
{
	switch(theGSM3ShieldV1ModemCore.getOngoingCommand())
    1ddc:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    1de0:	2d 30       	cpi	r18, 0x0D	; 13
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <_ZN31GSM3ShieldV1DataNetworkProvider14manageResponseEhh+0x14>
    1de4:	25 31       	cpi	r18, 0x15	; 21
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <_ZN31GSM3ShieldV1DataNetworkProvider14manageResponseEhh+0x18>
    1de8:	2c 30       	cpi	r18, 0x0C	; 12
    1dea:	31 f4       	brne	.+12     	; 0x1df8 <_ZN31GSM3ShieldV1DataNetworkProvider14manageResponseEhh+0x1c>
	{
		case ATTACHGPRS:
			attachGPRSContinue();
    1dec:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <_ZN31GSM3ShieldV1DataNetworkProvider18attachGPRSContinueEv>
			break;	
		case DETACHGPRS:
			detachGPRSContinue();
    1df0:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <_ZN31GSM3ShieldV1DataNetworkProvider18detachGPRSContinueEv>
			break;
		case GETIP:
			getIPContinue();
    1df4:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <_ZN31GSM3ShieldV1DataNetworkProvider13getIPContinueEv>
    1df8:	08 95       	ret

00001dfa <_ZThn2_N31GSM3ShieldV1DataNetworkProvider14manageResponseEhh>:
    1dfa:	02 97       	sbiw	r24, 0x02	; 2
    1dfc:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <_ZN31GSM3ShieldV1DataNetworkProvider14manageResponseEhh>

00001e00 <_GLOBAL__sub_I__ZN31GSM3ShieldV1DirectModemProviderC2Eb>:
  if(trace)
	Serial.println(result);
  //Leave the debug mode.
  disconnect();
  return result;
    1e00:	0f 93       	push	r16
    1e02:	00 e0       	ldi	r16, 0x00	; 0
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	83 e7       	ldi	r24, 0x73	; 115
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <_ZN21GSM3ShieldV1ModemCore8writePGMEPKcb>:
	_dataInBufferTo=0;

};

size_t GSM3ShieldV1ModemCore::writePGM(PGM_P str, bool CR)
{
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	1f 92       	push	r1
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	6b 01       	movw	r12, r22
	int i=0;
	char c;
	
	do
	{	
		c=pgm_read_byte_near(str + i); 
    1e2e:	f6 01       	movw	r30, r12
    1e30:	f4 90       	lpm	r15, Z
		if(c!=0)
    1e32:	ff 20       	and	r15, r15
    1e34:	59 f0       	breq	.+22     	; 0x1e4c <_ZN21GSM3ShieldV1ModemCore8writePGMEPKcb+0x36>
			write(c);
    1e36:	d8 01       	movw	r26, r16
    1e38:	ed 91       	ld	r30, X+
    1e3a:	fc 91       	ld	r31, X
    1e3c:	02 80       	ldd	r0, Z+2	; 0x02
    1e3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e40:	e0 2d       	mov	r30, r0
    1e42:	6f 2d       	mov	r22, r15
    1e44:	c8 01       	movw	r24, r16
    1e46:	49 83       	std	Y+1, r20	; 0x01
    1e48:	09 95       	icall
    1e4a:	49 81       	ldd	r20, Y+1	; 0x01
    1e4c:	bf ef       	ldi	r27, 0xFF	; 255
    1e4e:	cb 1a       	sub	r12, r27
    1e50:	db 0a       	sbc	r13, r27
size_t GSM3ShieldV1ModemCore::writePGM(PGM_P str, bool CR)
{
	int i=0;
	char c;
	
	do
    1e52:	f1 10       	cpse	r15, r1
    1e54:	ec cf       	rjmp	.-40     	; 0x1e2e <_ZN21GSM3ShieldV1ModemCore8writePGMEPKcb+0x18>
		c=pgm_read_byte_near(str + i); 
		if(c!=0)
			write(c);
		i++;
	} while (c!=0);
	if(CR)
    1e56:	44 23       	and	r20, r20
    1e58:	31 f0       	breq	.+12     	; 0x1e66 <_ZN21GSM3ShieldV1ModemCore8writePGMEPKcb+0x50>
		print("\r");
    1e5a:	6b ef       	ldi	r22, 0xFB	; 251
    1e5c:	71 e0       	ldi	r23, 0x01	; 1
    1e5e:	c8 01       	movw	r24, r16
    1e60:	02 96       	adiw	r24, 0x02	; 2
    1e62:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		
	return 1;
}
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0f 90       	pop	r0
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	08 95       	ret

00001e7c <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider>:
	for(int i=0;i<UMPROVIDERS;i++)
		UMProvider[i]=0;
}

void GSM3ShieldV1ModemCore::registerUMProvider(GSM3ShieldV1BaseProvider* provider)
{
    1e7c:	fc 01       	movw	r30, r24
	for(int i=0;i<UMPROVIDERS;i++)
	{
		if(UMProvider[i]==0)
    1e7e:	81 89       	ldd	r24, Z+17	; 0x11
    1e80:	92 89       	ldd	r25, Z+18	; 0x12
    1e82:	89 2b       	or	r24, r25
    1e84:	59 f0       	breq	.+22     	; 0x1e9c <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider+0x20>
    1e86:	83 89       	ldd	r24, Z+19	; 0x13
    1e88:	94 89       	ldd	r25, Z+20	; 0x14
    1e8a:	89 2b       	or	r24, r25
    1e8c:	51 f0       	breq	.+20     	; 0x1ea2 <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider+0x26>
    1e8e:	85 89       	ldd	r24, Z+21	; 0x15
    1e90:	96 89       	ldd	r25, Z+22	; 0x16
    1e92:	89 2b       	or	r24, r25
    1e94:	71 f4       	brne	.+28     	; 0x1eb2 <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider+0x36>
		UMProvider[i]=0;
}

void GSM3ShieldV1ModemCore::registerUMProvider(GSM3ShieldV1BaseProvider* provider)
{
	for(int i=0;i<UMPROVIDERS;i++)
    1e96:	22 e0       	ldi	r18, 0x02	; 2
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider+0x2a>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider+0x2a>
    1ea2:	21 e0       	ldi	r18, 0x01	; 1
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(UMProvider[i]==0)
		{
			UMProvider[i]=provider;
    1ea6:	22 0f       	add	r18, r18
    1ea8:	33 1f       	adc	r19, r19
    1eaa:	e2 0f       	add	r30, r18
    1eac:	f3 1f       	adc	r31, r19
    1eae:	72 8b       	std	Z+18, r23	; 0x12
    1eb0:	61 8b       	std	Z+17, r22	; 0x11
    1eb2:	08 95       	ret

00001eb4 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider>:
	}

}

void GSM3ShieldV1ModemCore::unRegisterUMProvider(GSM3ShieldV1BaseProvider* provider)
{
    1eb4:	fc 01       	movw	r30, r24
	for(int i=0;i<UMPROVIDERS;i++)
	{
		if(UMProvider[i]==provider)
    1eb6:	81 89       	ldd	r24, Z+17	; 0x11
    1eb8:	92 89       	ldd	r25, Z+18	; 0x12
    1eba:	86 17       	cp	r24, r22
    1ebc:	97 07       	cpc	r25, r23
    1ebe:	69 f0       	breq	.+26     	; 0x1eda <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider+0x26>
    1ec0:	83 89       	ldd	r24, Z+19	; 0x13
    1ec2:	94 89       	ldd	r25, Z+20	; 0x14
    1ec4:	86 17       	cp	r24, r22
    1ec6:	97 07       	cpc	r25, r23
    1ec8:	59 f0       	breq	.+22     	; 0x1ee0 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider+0x2c>
    1eca:	85 89       	ldd	r24, Z+21	; 0x15
    1ecc:	96 89       	ldd	r25, Z+22	; 0x16
    1ece:	86 17       	cp	r24, r22
    1ed0:	97 07       	cpc	r25, r23
    1ed2:	71 f4       	brne	.+28     	; 0x1ef0 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider+0x3c>

}

void GSM3ShieldV1ModemCore::unRegisterUMProvider(GSM3ShieldV1BaseProvider* provider)
{
	for(int i=0;i<UMPROVIDERS;i++)
    1ed4:	22 e0       	ldi	r18, 0x02	; 2
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider+0x30>
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <_ZN21GSM3ShieldV1ModemCore20unRegisterUMProviderEP24GSM3ShieldV1BaseProvider+0x30>
    1ee0:	21 e0       	ldi	r18, 0x01	; 1
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(UMProvider[i]==provider)
		{
			UMProvider[i]=0;
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	e2 0f       	add	r30, r18
    1eea:	f3 1f       	adc	r31, r19
    1eec:	12 8a       	std	Z+18, r1	; 0x12
    1eee:	11 8a       	std	Z+17, r1	; 0x11
    1ef0:	08 95       	ret

00001ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>:
}


//Response parse.
bool GSM3ShieldV1ModemCore::genericParse_rsp(bool& rsp, char* string, char* string2)
{
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	7b 01       	movw	r14, r22
    1f00:	89 01       	movw	r16, r18
	if((string==0) && (string2==0))
    1f02:	41 15       	cp	r20, r1
    1f04:	51 05       	cpc	r21, r1
    1f06:	31 f4       	brne	.+12     	; 0x1f14 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_+0x22>
    1f08:	23 2b       	or	r18, r19
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_+0x22>
		string=__ok__;
    1f0c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__ok__>
    1f10:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__ok__+0x1>
		void genericCommand_rqc(const char* str, bool addCR=true);		
		
		/** Returns the circular buffer
			@return circular buffer
		 */
		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};
    1f14:	ec 01       	movw	r28, r24
    1f16:	e0 96       	adiw	r28, 0x30	; 48
	
	rsp=theBuffer().locate(string);
    1f18:	ba 01       	movw	r22, r20
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    1f20:	f7 01       	movw	r30, r14
    1f22:	80 83       	st	Z, r24
	
	if((!rsp)&&(string2!=0))
    1f24:	81 11       	cpse	r24, r1
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_+0x48>
    1f28:	01 15       	cp	r16, r1
    1f2a:	11 05       	cpc	r17, r1
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_+0x48>
		rsp=theBuffer().locate(string2);
    1f2e:	b8 01       	movw	r22, r16
    1f30:	ce 01       	movw	r24, r28
    1f32:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    1f36:	f7 01       	movw	r30, r14
    1f38:	80 83       	st	Z, r24
		
	return true;
}
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	08 95       	ret

00001f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>:

void GSM3ShieldV1ModemCore::closeCommand(int code)
{
    1f4a:	fc 01       	movw	r30, r24
	// If we were configuring the modem,
	// and there's been an error
	// we don't know exactly where we are
	if((code!=1)&&(theGSM3ShieldV1ModemCore.getOngoingCommand()==MODEMCONFIG))
    1f4c:	61 30       	cpi	r22, 0x01	; 1
    1f4e:	71 05       	cpc	r23, r1
    1f50:	21 f0       	breq	.+8      	; 0x1f5a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi+0x10>
    1f52:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    1f56:	82 30       	cpi	r24, 0x02	; 2
    1f58:	39 f0       	breq	.+14     	; 0x1f68 <_ZN21GSM3ShieldV1ModemCore12closeCommandEi+0x1e>
		theGSM3ShieldV1ModemCore.setStatus(ERROR);

	setCommandError(code);
    1f5a:	62 87       	std	Z+10, r22	; 0x0a
	ongoingCommand=NONE;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	84 87       	std	Z+12, r24	; 0x0c
	activeProvider=0;
    1f60:	10 8e       	std	Z+24, r1	; 0x18
    1f62:	17 8a       	std	Z+23, r1	; 0x17
	commandCounter=1;
    1f64:	83 87       	std	Z+11, r24	; 0x0b
    1f66:	08 95       	ret

		/** Establish a new network status
			@param status		Network status
		 */
		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };
    1f68:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    1f6c:	f6 cf       	rjmp	.-20     	; 0x1f5a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi+0x10>

00001f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>:
}

//Generic command (stored in flash).
void GSM3ShieldV1ModemCore::genericCommand_rq(PGM_P str, bool addCR)
{
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb+0xa>
    1f78:	1f 92       	push	r1
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	8c 01       	movw	r16, r24
	theBuffer().flush();
    1f80:	c0 96       	adiw	r24, 0x30	; 48
    1f82:	4b 83       	std	Y+3, r20	; 0x03
    1f84:	69 83       	std	Y+1, r22	; 0x01
    1f86:	7a 83       	std	Y+2, r23	; 0x02
    1f88:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
	writePGM(str, addCR);
    1f8c:	d8 01       	movw	r26, r16
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fc 91       	ld	r31, X
    1f92:	04 80       	ldd	r0, Z+4	; 0x04
    1f94:	f5 81       	ldd	r31, Z+5	; 0x05
    1f96:	e0 2d       	mov	r30, r0
    1f98:	4b 81       	ldd	r20, Y+3	; 0x03
    1f9a:	69 81       	ldd	r22, Y+1	; 0x01
    1f9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f9e:	c8 01       	movw	r24, r16
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16

//Generic command (stored in flash).
void GSM3ShieldV1ModemCore::genericCommand_rq(PGM_P str, bool addCR)
{
	theBuffer().flush();
	writePGM(str, addCR);
    1fae:	09 94       	ijmp

00001fb0 <_ZN21GSM3ShieldV1ModemCore18genericCommand_rqcEPKcb>:
}

//Generic command (const string).
void GSM3ShieldV1ModemCore::genericCommand_rqc(const char* str, bool addCR)
{
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <_ZN21GSM3ShieldV1ModemCore18genericCommand_rqcEPKcb+0xa>
    1fba:	1f 92       	push	r1
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	8c 01       	movw	r16, r24
	theBuffer().flush();
    1fc2:	c0 96       	adiw	r24, 0x30	; 48
    1fc4:	4b 83       	std	Y+3, r20	; 0x03
    1fc6:	69 83       	std	Y+1, r22	; 0x01
    1fc8:	7a 83       	std	Y+2, r23	; 0x02
    1fca:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
	print(str);
    1fce:	0e 5f       	subi	r16, 0xFE	; 254
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	69 81       	ldd	r22, Y+1	; 0x01
    1fd4:	7a 81       	ldd	r23, Y+2	; 0x02
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
	if(addCR)
    1fdc:	4b 81       	ldd	r20, Y+3	; 0x03
    1fde:	44 23       	and	r20, r20
    1fe0:	61 f0       	breq	.+24     	; 0x1ffa <_ZN21GSM3ShieldV1ModemCore18genericCommand_rqcEPKcb+0x4a>
		print("\r");
    1fe2:	6b ef       	ldi	r22, 0xFB	; 251
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
    1fe6:	c8 01       	movw	r24, r16
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
void GSM3ShieldV1ModemCore::genericCommand_rqc(const char* str, bool addCR)
{
	theBuffer().flush();
	print(str);
	if(addCR)
		print("\r");
    1ff6:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh>:
	}
}

//Select between URC or response.
void GSM3ShieldV1ModemCore::manageMsgNow(byte from, byte to)
{
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	1f 92       	push	r1
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	8c 01       	movw	r16, r24
    2024:	f6 2e       	mov	r15, r22
    2026:	5c 01       	movw	r10, r24
    2028:	81 e1       	ldi	r24, 0x11	; 17
    202a:	a8 0e       	add	r10, r24
    202c:	b1 1c       	adc	r11, r1
    202e:	68 01       	movw	r12, r16
    2030:	a7 e1       	ldi	r26, 0x17	; 23
    2032:	ca 0e       	add	r12, r26
    2034:	d1 1c       	adc	r13, r1
	bool recognized=false;
	
	for(int i=0;(i<UMPROVIDERS)&&(!recognized);i++)
	{
		if(UMProvider[i])
    2036:	f5 01       	movw	r30, r10
    2038:	81 91       	ld	r24, Z+
    203a:	91 91       	ld	r25, Z+
    203c:	5f 01       	movw	r10, r30
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	49 f1       	breq	.+82     	; 0x2094 <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x8a>
			recognized=UMProvider[i]->recognizeUnsolicitedEvent(from);
    2042:	dc 01       	movw	r26, r24
    2044:	ed 91       	ld	r30, X+
    2046:	fc 91       	ld	r31, X
    2048:	02 80       	ldd	r0, Z+2	; 0x02
    204a:	f3 81       	ldd	r31, Z+3	; 0x03
    204c:	e0 2d       	mov	r30, r0
    204e:	6f 2d       	mov	r22, r15
    2050:	49 83       	std	Y+1, r20	; 0x01
    2052:	09 95       	icall
//Select between URC or response.
void GSM3ShieldV1ModemCore::manageMsgNow(byte from, byte to)
{
	bool recognized=false;
	
	for(int i=0;(i<UMPROVIDERS)&&(!recognized);i++)
    2054:	49 81       	ldd	r20, Y+1	; 0x01
    2056:	ac 14       	cp	r10, r12
    2058:	bd 04       	cpc	r11, r13
    205a:	19 f0       	breq	.+6      	; 0x2062 <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x58>
    205c:	88 23       	and	r24, r24
    205e:	59 f3       	breq	.-42     	; 0x2036 <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x2c>
    2060:	1d c0       	rjmp	.+58     	; 0x209c <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x92>
	{
		if(UMProvider[i])
			recognized=UMProvider[i]->recognizeUnsolicitedEvent(from);
	}
	if((!recognized)&&(activeProvider))
    2062:	81 11       	cpse	r24, r1
    2064:	1b c0       	rjmp	.+54     	; 0x209c <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x92>
    2066:	f8 01       	movw	r30, r16
    2068:	87 89       	ldd	r24, Z+23	; 0x17
    206a:	90 8d       	ldd	r25, Z+24	; 0x18
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	b1 f0       	breq	.+44     	; 0x209c <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x92>
		activeProvider->manageResponse(from, to);
    2070:	dc 01       	movw	r26, r24
    2072:	ed 91       	ld	r30, X+
    2074:	fc 91       	ld	r31, X
    2076:	01 90       	ld	r0, Z+
    2078:	f0 81       	ld	r31, Z
    207a:	e0 2d       	mov	r30, r0
    207c:	6f 2d       	mov	r22, r15
}
    207e:	0f 90       	pop	r0
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	df 90       	pop	r13
    208c:	cf 90       	pop	r12
    208e:	bf 90       	pop	r11
    2090:	af 90       	pop	r10
	{
		if(UMProvider[i])
			recognized=UMProvider[i]->recognizeUnsolicitedEvent(from);
	}
	if((!recognized)&&(activeProvider))
		activeProvider->manageResponse(from, to);
    2092:	09 94       	ijmp
//Select between URC or response.
void GSM3ShieldV1ModemCore::manageMsgNow(byte from, byte to)
{
	bool recognized=false;
	
	for(int i=0;(i<UMPROVIDERS)&&(!recognized);i++)
    2094:	ec 15       	cp	r30, r12
    2096:	fd 05       	cpc	r31, r13
    2098:	71 f6       	brne	.-100    	; 0x2036 <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x2c>
    209a:	e5 cf       	rjmp	.-54     	; 0x2066 <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh+0x5c>
		if(UMProvider[i])
			recognized=UMProvider[i]->recognizeUnsolicitedEvent(from);
	}
	if((!recognized)&&(activeProvider))
		activeProvider->manageResponse(from, to);
}
    209c:	0f 90       	pop	r0
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	08 95       	ret

000020b2 <_ZN21GSM3ShieldV1ModemCore9manageMsgEhh>:

// If we are not debugging, lets manage data in interrupt time
// but if we are not, just take note.
void GSM3ShieldV1ModemCore::manageMsg(byte from, byte to)
{
	if(_debug)
    20b2:	fc 01       	movw	r30, r24
    20b4:	25 85       	ldd	r18, Z+13	; 0x0d
    20b6:	22 23       	and	r18, r18
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <_ZN21GSM3ShieldV1ModemCore9manageMsgEhh+0xe>
	{
		_dataInBufferFrom=from;
    20ba:	66 87       	std	Z+14, r22	; 0x0e
		_dataInBufferTo=to;
    20bc:	47 87       	std	Z+15, r20	; 0x0f
    20be:	08 95       	ret
	}
	else
	{
		manageMsgNow(from, to);
    20c0:	0c 94 05 10 	jmp	0x200a	; 0x200a <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh>

000020c4 <_ZN21GSM3ShieldV1ModemCore18manageReceivedDataEv>:
	}
}

void GSM3ShieldV1ModemCore::manageReceivedData()
{
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	ec 01       	movw	r28, r24
	if(_debug)
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	88 23       	and	r24, r24
    20ce:	79 f0       	breq	.+30     	; 0x20ee <_ZN21GSM3ShieldV1ModemCore18manageReceivedDataEv+0x2a>
	{
/*		Serial.print(theBuffer().getHead());
		Serial.print(" ");
		Serial.println(theBuffer().getTail());*/
		if(_dataInBufferFrom != _dataInBufferTo)
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d4:	98 17       	cp	r25, r24
    20d6:	59 f0       	breq	.+22     	; 0x20ee <_ZN21GSM3ShieldV1ModemCore18manageReceivedDataEv+0x2a>
		{
			theBuffer().debugBuffer();
    20d8:	ce 01       	movw	r24, r28
    20da:	c0 96       	adiw	r24, 0x30	; 48
    20dc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN18GSM3CircularBuffer11debugBufferEv>
			manageMsgNow(_dataInBufferFrom, _dataInBufferTo);
    20e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    20e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    20e4:	ce 01       	movw	r24, r28
    20e6:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN21GSM3ShieldV1ModemCore12manageMsgNowEhh>
			_dataInBufferFrom=0;
    20ea:	1e 86       	std	Y+14, r1	; 0x0e
			_dataInBufferTo=0;
    20ec:	1f 86       	std	Y+15, r1	; 0x0f
//		Serial.print("Com:");
//		Serial.print(ongoingCommand);
//		Serial.print("   Step:");
//		Serial.print(commandCounter);
	}
}
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>:
		activeProvider->manageResponse(from, to);
}


void GSM3ShieldV1ModemCore::openCommand(GSM3ShieldV1BaseProvider* provider, GSM3_commandType_e c)
{	
    20f4:	fc 01       	movw	r30, r24
	activeProvider=provider;
    20f6:	70 8f       	std	Z+24, r23	; 0x18
    20f8:	67 8b       	std	Z+23, r22	; 0x17
	commandError=0;
    20fa:	12 86       	std	Z+10, r1	; 0x0a
	commandCounter=1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	83 87       	std	Z+11, r24	; 0x0b
	ongoingCommand=c;
    2100:	44 87       	std	Z+12, r20	; 0x0c
	_dataInBufferFrom=0;
    2102:	16 86       	std	Z+14, r1	; 0x0e
	_dataInBufferTo=0;
    2104:	17 86       	std	Z+15, r1	; 0x0f
    2106:	08 95       	ret

00002108 <_ZN21GSM3ShieldV1ModemCore16takeMillisecondsEv>:
		GSM3CircularBuffer::printCharDebug(c);
	return gss.write(c);
}

unsigned long GSM3ShieldV1ModemCore::takeMilliseconds()
{
    2108:	cf 92       	push	r12
    210a:	df 92       	push	r13
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	ec 01       	movw	r28, r24
	unsigned long now=millis();
    211a:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
    211e:	8b 01       	movw	r16, r22
    2120:	9c 01       	movw	r18, r24
	unsigned long delta;
	delta=now-milliseconds;
    2122:	49 8d       	ldd	r20, Y+25	; 0x19
    2124:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2126:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2128:	7c 8d       	ldd	r23, Y+28	; 0x1c
    212a:	68 01       	movw	r12, r16
    212c:	79 01       	movw	r14, r18
    212e:	c4 1a       	sub	r12, r20
    2130:	d5 0a       	sbc	r13, r21
    2132:	e6 0a       	sbc	r14, r22
    2134:	f7 0a       	sbc	r15, r23
    2136:	c7 01       	movw	r24, r14
    2138:	b6 01       	movw	r22, r12
	milliseconds=now;
    213a:	09 8f       	std	Y+25, r16	; 0x19
    213c:	1a 8f       	std	Y+26, r17	; 0x1a
    213e:	2b 8f       	std	Y+27, r18	; 0x1b
    2140:	3c 8f       	std	Y+28, r19	; 0x1c
	return delta;
}
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	df 90       	pop	r13
    2150:	cf 90       	pop	r12
    2152:	08 95       	ret

00002154 <_ZN21GSM3ShieldV1ModemCoreC1Ev>:

GSM3ShieldV1ModemCore theGSM3ShieldV1ModemCore;

char* __ok__="OK";

GSM3ShieldV1ModemCore::GSM3ShieldV1ModemCore() : gss()
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	ec 01       	movw	r28, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    215a:	1d 82       	std	Y+5, r1	; 0x05
    215c:	1c 82       	std	Y+4, r1	; 0x04
    215e:	86 ec       	ldi	r24, 0xC6	; 198
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	99 83       	std	Y+1, r25	; 0x01
    2164:	88 83       	st	Y, r24
    2166:	80 ed       	ldi	r24, 0xD0	; 208
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	9b 83       	std	Y+3, r25	; 0x03
    216c:	8a 83       	std	Y+2, r24	; 0x02
    216e:	ce 01       	movw	r24, r28
    2170:	4d 96       	adiw	r24, 0x1d	; 29
    2172:	0e 94 22 19 	call	0x3244	; 0x3244 <_ZN14GSM3SoftSerialC1Ev>
		GSM3CircularBuffer cb; // Circular buffer
		
		/** Register serial manager
			@param manager		Serial manager
		 */
		inline void registerMgr(GSM3SoftSerialMgr* manager){mgr=manager;};
    2176:	de a3       	std	Y+38, r29	; 0x26
    2178:	cd a3       	std	Y+37, r28	; 0x25
{
	gss.registerMgr(this);
	_dataInBufferFrom=0;
    217a:	1e 86       	std	Y+14, r1	; 0x0e
	_dataInBufferTo=0;
    217c:	1f 86       	std	Y+15, r1	; 0x0f
	commandError=1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	8a 87       	std	Y+10, r24	; 0x0a
	commandCounter=0;
    2182:	1b 86       	std	Y+11, r1	; 0x0b
	ongoingCommand=NONE;
    2184:	8c 87       	std	Y+12, r24	; 0x0c
	takeMilliseconds();
    2186:	ce 01       	movw	r24, r28
    2188:	0e 94 84 10 	call	0x2108	; 0x2108 <_ZN21GSM3ShieldV1ModemCore16takeMillisecondsEv>
	
	for(int i=0;i<UMPROVIDERS;i++)
		UMProvider[i]=0;
    218c:	1a 8a       	std	Y+18, r1	; 0x12
    218e:	19 8a       	std	Y+17, r1	; 0x11
    2190:	1c 8a       	std	Y+20, r1	; 0x14
    2192:	1b 8a       	std	Y+19, r1	; 0x13
    2194:	1e 8a       	std	Y+22, r1	; 0x16
    2196:	1d 8a       	std	Y+21, r1	; 0x15
}
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	08 95       	ret

0000219e <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm>:
	milliseconds=now;
	return delta;
}

void GSM3ShieldV1ModemCore::delayInsideInterrupt(unsigned long milliseconds)
{
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm+0xe>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm+0x10>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	for (unsigned long k=0;k<milliseconds;k++)  
    21b2:	c1 2c       	mov	r12, r1
    21b4:	d1 2c       	mov	r13, r1
    21b6:	76 01       	movw	r14, r12
    21b8:	c4 16       	cp	r12, r20
    21ba:	d5 06       	cpc	r13, r21
    21bc:	e6 06       	cpc	r14, r22
    21be:	f7 06       	cpc	r15, r23
    21c0:	91 f0       	breq	.+36     	; 0x21e6 <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm+0x48>
		theGSM3ShieldV1ModemCore.gss.tunedDelay(1000); 
    21c2:	88 ee       	ldi	r24, 0xE8	; 232
    21c4:	93 e0       	ldi	r25, 0x03	; 3
    21c6:	49 83       	std	Y+1, r20	; 0x01
    21c8:	5a 83       	std	Y+2, r21	; 0x02
    21ca:	6b 83       	std	Y+3, r22	; 0x03
    21cc:	7c 83       	std	Y+4, r23	; 0x04
    21ce:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
	return delta;
}

void GSM3ShieldV1ModemCore::delayInsideInterrupt(unsigned long milliseconds)
{
	for (unsigned long k=0;k<milliseconds;k++)  
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	c8 1a       	sub	r12, r24
    21d6:	d8 0a       	sbc	r13, r24
    21d8:	e8 0a       	sbc	r14, r24
    21da:	f8 0a       	sbc	r15, r24
    21dc:	7c 81       	ldd	r23, Y+4	; 0x04
    21de:	6b 81       	ldd	r22, Y+3	; 0x03
    21e0:	5a 81       	ldd	r21, Y+2	; 0x02
    21e2:	49 81       	ldd	r20, Y+1	; 0x01
    21e4:	e9 cf       	rjmp	.-46     	; 0x21b8 <_ZN21GSM3ShieldV1ModemCore20delayInsideInterruptEm+0x1a>
		theGSM3ShieldV1ModemCore.gss.tunedDelay(1000); 
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	df 90       	pop	r13
    21f8:	cf 90       	pop	r12
    21fa:	08 95       	ret

000021fc <_GLOBAL__sub_I_theGSM3ShieldV1ModemCore>:
https://github.com/BlueVia/Official-Arduino
*/
#include <GSM3ShieldV1ModemCore.h>
#include <Arduino.h>

GSM3ShieldV1ModemCore theGSM3ShieldV1ModemCore;
    21fc:	89 e7       	ldi	r24, 0x79	; 121
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <_ZN21GSM3ShieldV1ModemCoreC1Ev>

00002204 <_ZN21GSM3ShieldV1ModemCore5writeEh>:
		
	return 1;
}

size_t GSM3ShieldV1ModemCore::write(uint8_t c)
{
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	1f 92       	push	r1
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	8c 01       	movw	r16, r24
	if(_debug)
    2214:	fc 01       	movw	r30, r24
    2216:	85 85       	ldd	r24, Z+13	; 0x0d
    2218:	88 23       	and	r24, r24
    221a:	29 f0       	breq	.+10     	; 0x2226 <_ZN21GSM3ShieldV1ModemCore5writeEh+0x22>
		GSM3CircularBuffer::printCharDebug(c);
    221c:	86 2f       	mov	r24, r22
    221e:	69 83       	std	Y+1, r22	; 0x01
    2220:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN18GSM3CircularBuffer14printCharDebugEh>
    2224:	69 81       	ldd	r22, Y+1	; 0x01
	return gss.write(c);
    2226:	c8 01       	movw	r24, r16
    2228:	4d 96       	adiw	r24, 0x1d	; 29
}
    222a:	0f 90       	pop	r0
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16

size_t GSM3ShieldV1ModemCore::write(uint8_t c)
{
	if(_debug)
		GSM3CircularBuffer::printCharDebug(c);
	return gss.write(c);
    2234:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <_ZN14GSM3SoftSerial5writeEh>

00002238 <_ZThn2_N21GSM3ShieldV1ModemCore5writeEh>:
    2238:	02 97       	sbiw	r24, 0x02	; 2
    223a:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_ZN21GSM3ShieldV1ModemCore5writeEh>

0000223e <_GLOBAL__sub_I__ZN29GSM3ShieldV1ModemVerificationC2Ev>:
	char res_to_compare[modemResponse.length()];
	modemResponse.toCharArray(res_to_compare, modemResponse.length());
	if(strstr(res_to_compare,"OK") != NULL)
		number = modemResponse.substring(1, 17);
	return number;
}
    223e:	0f 93       	push	r16
    2240:	00 e0       	ldi	r16, 0x00	; 0
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	8d e2       	ldi	r24, 0x2D	; 45
    224a:	94 e0       	ldi	r25, 0x04	; 4
    224c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <_GLOBAL__sub_I__ZN31GSM3ShieldV1MultiClientProviderC2Ev>:
		return 0;
	if(sockets&(0x0001<<socket))
		return 1;
	else
		return 0;
};
    2254:	0f 93       	push	r16
    2256:	00 e0       	ldi	r16, 0x00	; 0
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	83 e3       	ldi	r24, 0x33	; 51
    2260:	94 e0       	ldi	r25, 0x04	; 4
    2262:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    2266:	0f 91       	pop	r16
    2268:	08 95       	ret

0000226a <_GLOBAL__sub_I__ZN25GSM3ShieldV1PinManagementC2Ev>:
  Set if PIN lock is used
*/
void GSM3ShieldV1PinManagement::setPINUsed(bool used)
{
	pin_used = used;
    226a:	0f 93       	push	r16
    226c:	00 e0       	ldi	r16, 0x00	; 0
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	89 e3       	ldi	r24, 0x39	; 57
    2276:	94 e0       	ldi	r25, 0x04	; 4
    2278:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <_GLOBAL__sub_I__ZN24GSM3ShieldV1ScanNetworksC2Eb>:
				result+=modemResponse[i];
			}
		}
	}
	return result;
}
    2280:	0f 93       	push	r16
    2282:	00 e0       	ldi	r16, 0x00	; 0
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	8f e3       	ldi	r24, 0x3F	; 63
    228c:	94 e0       	ldi	r25, 0x04	; 4
    228e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <_ZN26GSM3ShieldV1ServerProvider17minSocketAsServerEv>:
{
	return(theGSM3ShieldV1ModemCore.getStatus()==TRANSPARENT_CONNECTED);
};

void GSM3ShieldV1ServerProvider::releaseSocket(int socket)
{
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	08 95       	ret

0000229c <_ZN26GSM3ShieldV1ServerProvider17maxSocketAsServerEv>:
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	08 95       	ret

000022a2 <_ZN26GSM3ShieldV1ServerProvider28getSocketAsServerModemStatusEi>:
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    22a8:	95 30       	cpi	r25, 0x05	; 5
    22aa:	09 f0       	breq	.+2      	; 0x22ae <_ZN26GSM3ShieldV1ServerProvider28getSocketAsServerModemStatusEi+0xc>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	08 95       	ret

000022b0 <_ZN26GSM3ShieldV1ServerProvider23getStatusSocketAsServerEh>:
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    22b6:	95 30       	cpi	r25, 0x05	; 5
    22b8:	09 f0       	breq	.+2      	; 0x22bc <_ZN26GSM3ShieldV1ServerProvider23getStatusSocketAsServerEh+0xc>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	08 95       	ret

000022be <_ZN26GSM3ShieldV1ServerProvider28getNewOccupiedSocketAsServerEv>:
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	08 95       	ret

000022c4 <_ZN26GSM3ShieldV1ServerProvider5readyEv>:
    22c4:	02 96       	adiw	r24, 0x02	; 2
    22c6:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>

000022ca <_ZN26GSM3ShieldV1ServerProviderC1Ev>:
    22ca:	28 ed       	ldi	r18, 0xD8	; 216
    22cc:	31 e0       	ldi	r19, 0x01	; 1
    22ce:	fc 01       	movw	r30, r24
    22d0:	31 83       	std	Z+1, r19	; 0x01
    22d2:	20 83       	st	Z, r18
    22d4:	2e ee       	ldi	r18, 0xEE	; 238
    22d6:	31 e0       	ldi	r19, 0x01	; 1
    22d8:	33 83       	std	Z+3, r19	; 0x03
    22da:	22 83       	std	Z+2, r18	; 0x02
    22dc:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <theGSM3MobileServerProvider+0x1>
    22e0:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <theGSM3MobileServerProvider>
    22e4:	08 95       	ret

000022e6 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv>:
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xa>
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xc>
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	8c 01       	movw	r16, r24
    22f8:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    22fc:	92 30       	cpi	r25, 0x02	; 2
    22fe:	99 f0       	breq	.+38     	; 0x2326 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x40>
    2300:	60 f4       	brcc	.+24     	; 0x231a <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x34>
    2302:	91 30       	cpi	r25, 0x01	; 1
    2304:	09 f0       	breq	.+2      	; 0x2308 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x22>
    2306:	79 c0       	rjmp	.+242    	; 0x23fa <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x114>
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	68 ee       	ldi	r22, 0xE8	; 232
    230c:	71 e0       	ldi	r23, 0x01	; 1
    230e:	89 e7       	ldi	r24, 0x79	; 121
    2310:	93 e0       	ldi	r25, 0x03	; 3
    2312:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	34 c0       	rjmp	.+104    	; 0x2382 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x9c>
    231a:	93 30       	cpi	r25, 0x03	; 3
    231c:	c1 f1       	breq	.+112    	; 0x238e <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xa8>
    231e:	94 30       	cpi	r25, 0x04	; 4
    2320:	09 f4       	brne	.+2      	; 0x2324 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x3e>
    2322:	4e c0       	rjmp	.+156    	; 0x23c0 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xda>
    2324:	6a c0       	rjmp	.+212    	; 0x23fa <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x114>
    2326:	8d e0       	ldi	r24, 0x0D	; 13
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	8a e0       	ldi	r24, 0x0A	; 10
    232c:	8a 83       	std	Y+2, r24	; 0x02
    232e:	1b 82       	std	Y+3, r1	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	ae 01       	movw	r20, r28
    2336:	4f 5f       	subi	r20, 0xFF	; 255
    2338:	5f 4f       	sbci	r21, 0xFF	; 255
    233a:	be 01       	movw	r22, r28
    233c:	6c 5f       	subi	r22, 0xFC	; 252
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	89 e7       	ldi	r24, 0x79	; 121
    2342:	93 e0       	ldi	r25, 0x03	; 3
    2344:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    2348:	88 23       	and	r24, r24
    234a:	09 f4       	brne	.+2      	; 0x234e <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x68>
    234c:	56 c0       	rjmp	.+172    	; 0x23fa <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x114>
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	88 23       	and	r24, r24
    2352:	d1 f0       	breq	.+52     	; 0x2388 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xa2>
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	66 ed       	ldi	r22, 0xD6	; 214
    2358:	71 e0       	ldi	r23, 0x01	; 1
    235a:	89 e7       	ldi	r24, 0x79	; 121
    235c:	93 e0       	ldi	r25, 0x03	; 3
    235e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    2362:	60 91 81 03 	lds	r22, 0x0381	; 0x800381 <theGSM3ShieldV1ModemCore+0x8>
    2366:	70 91 82 03 	lds	r23, 0x0382	; 0x800382 <theGSM3ShieldV1ModemCore+0x9>
    236a:	4a e0       	ldi	r20, 0x0A	; 10
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	8b e7       	ldi	r24, 0x7B	; 123
    2370:	93 e0       	ldi	r25, 0x03	; 3
    2372:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN5Print5printEii>
    2376:	6d e0       	ldi	r22, 0x0D	; 13
    2378:	8b e7       	ldi	r24, 0x7B	; 123
    237a:	93 e0       	ldi	r25, 0x03	; 3
    237c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2386:	39 c0       	rjmp	.+114    	; 0x23fa <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x114>
    2388:	63 e0       	ldi	r22, 0x03	; 3
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	32 c0       	rjmp	.+100    	; 0x23f2 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x10c>
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	be 01       	movw	r22, r28
    2398:	6c 5f       	subi	r22, 0xFC	; 252
    239a:	7f 4f       	sbci	r23, 0xFF	; 255
    239c:	89 e7       	ldi	r24, 0x79	; 121
    239e:	93 e0       	ldi	r25, 0x03	; 3
    23a0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    23a4:	88 23       	and	r24, r24
    23a6:	49 f1       	breq	.+82     	; 0x23fa <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x114>
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	88 23       	and	r24, r24
    23ac:	69 f3       	breq	.-38     	; 0x2388 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xa2>
    23ae:	41 e0       	ldi	r20, 0x01	; 1
    23b0:	6a ec       	ldi	r22, 0xCA	; 202
    23b2:	71 e0       	ldi	r23, 0x01	; 1
    23b4:	89 e7       	ldi	r24, 0x79	; 121
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    23bc:	84 e0       	ldi	r24, 0x04	; 4
    23be:	e1 cf       	rjmp	.-62     	; 0x2382 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x9c>
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	be 01       	movw	r22, r28
    23ca:	6c 5f       	subi	r22, 0xFC	; 252
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	89 e7       	ldi	r24, 0x79	; 121
    23d0:	93 e0       	ldi	r25, 0x03	; 3
    23d2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    23d6:	88 23       	and	r24, r24
    23d8:	81 f0       	breq	.+32     	; 0x23fa <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0x114>
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	88 23       	and	r24, r24
    23de:	a1 f2       	breq	.-88     	; 0x2388 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv+0xa2>
    23e0:	b8 01       	movw	r22, r16
    23e2:	6e 5f       	subi	r22, 0xFE	; 254
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	89 e7       	ldi	r24, 0x79	; 121
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider>
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	89 e7       	ldi	r24, 0x79	; 121
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	08 95       	ret

0000240c <_ZN26GSM3ShieldV1ServerProvider14manageResponseEhh>:
    240c:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    2410:	21 30       	cpi	r18, 0x01	; 1
    2412:	19 f0       	breq	.+6      	; 0x241a <_ZN26GSM3ShieldV1ServerProvider14manageResponseEhh+0xe>
    2414:	24 31       	cpi	r18, 0x14	; 20
    2416:	21 f0       	breq	.+8      	; 0x2420 <_ZN26GSM3ShieldV1ServerProvider14manageResponseEhh+0x14>
    2418:	08 95       	ret
    241a:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    241e:	08 95       	ret
    2420:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv>

00002424 <_ZThn2_N26GSM3ShieldV1ServerProvider14manageResponseEhh>:
    2424:	02 97       	sbiw	r24, 0x02	; 2
    2426:	0c 94 06 12 	jmp	0x240c	; 0x240c <_ZN26GSM3ShieldV1ServerProvider14manageResponseEhh>

0000242a <_ZN26GSM3ShieldV1ServerProvider16connectTCPServerEi>:
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	8c 01       	movw	r16, r24
    2434:	c9 e7       	ldi	r28, 0x79	; 121
    2436:	d3 e0       	ldi	r29, 0x03	; 3
    2438:	79 87       	std	Y+9, r23	; 0x09
    243a:	68 87       	std	Y+8, r22	; 0x08
    243c:	bc 01       	movw	r22, r24
    243e:	6e 5f       	subi	r22, 0xFE	; 254
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	44 e1       	ldi	r20, 0x14	; 20
    2444:	ce 01       	movw	r24, r28
    2446:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
    244a:	c8 01       	movw	r24, r16
    244c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <_ZN26GSM3ShieldV1ServerProvider24connectTCPServerContinueEv>
    2450:	8a 85       	ldd	r24, Y+10	; 0x0a
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <_ZN26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEh>:
}


//URC recognize.
bool GSM3ShieldV1ServerProvider::recognizeUnsolicitedEvent(byte oldTail)
{
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	2f 97       	sbiw	r28, 0x0f	; 15
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61

	int nlength;
	char auxLocate [15];
	
	//REMOTE SOCKET CLOSED.
	prepareAuxLocate(PSTR("CLOSED\r\n"), auxLocate);
    2476:	8c 01       	movw	r16, r24
    2478:	0e 5f       	subi	r16, 0xFE	; 254
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	ae 01       	movw	r20, r28
    247e:	4f 5f       	subi	r20, 0xFF	; 255
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	61 ec       	ldi	r22, 0xC1	; 193
    2484:	71 e0       	ldi	r23, 0x01	; 1
    2486:	c8 01       	movw	r24, r16
    2488:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.gss.cb.locate(auxLocate))
    248c:	be 01       	movw	r22, r28
    248e:	6f 5f       	subi	r22, 0xFF	; 255
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	89 ea       	ldi	r24, 0xA9	; 169
    2494:	93 e0       	ldi	r25, 0x03	; 3
    2496:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    249a:	88 23       	and	r24, r24
    249c:	19 f0       	breq	.+6      	; 0x24a4 <_ZN26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEh+0x46>
    249e:	84 e0       	ldi	r24, 0x04	; 4
    24a0:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
		theGSM3ShieldV1ModemCore.setStatus(GPRS_READY);
	}
	
	
	//REMOTE SOCKET ACCEPTED.
	prepareAuxLocate(PSTR("CONNECT\r\n"), auxLocate);
    24a4:	ae 01       	movw	r20, r28
    24a6:	4f 5f       	subi	r20, 0xFF	; 255
    24a8:	5f 4f       	sbci	r21, 0xFF	; 255
    24aa:	67 eb       	ldi	r22, 0xB7	; 183
    24ac:	71 e0       	ldi	r23, 0x01	; 1
    24ae:	c8 01       	movw	r24, r16
    24b0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.gss.cb.locate(auxLocate))
    24b4:	be 01       	movw	r22, r28
    24b6:	6f 5f       	subi	r22, 0xFF	; 255
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	89 ea       	ldi	r24, 0xA9	; 169
    24bc:	93 e0       	ldi	r25, 0x03	; 3
    24be:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    24c2:	18 2f       	mov	r17, r24
    24c4:	88 23       	and	r24, r24
    24c6:	81 f0       	breq	.+32     	; 0x24e8 <_ZN26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEh+0x8a>
	{
		//To detect remote socket closed for example inside socket data.
		theGSM3ShieldV1ModemCore.theBuffer().chopUntil(auxLocate, true);
    24c8:	21 e0       	ldi	r18, 0x01	; 1
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	be 01       	movw	r22, r28
    24ce:	6f 5f       	subi	r22, 0xFF	; 255
    24d0:	7f 4f       	sbci	r23, 0xFF	; 255
    24d2:	89 ea       	ldi	r24, 0xA9	; 169
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    24da:	86 e9       	ldi	r24, 0x96	; 150
    24dc:	93 e0       	ldi	r25, 0x03	; 3
    24de:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
    24e2:	85 e0       	ldi	r24, 0x05	; 5
    24e4:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
		theGSM3ShieldV1ModemCore.setStatus(TRANSPARENT_CONNECTED);
		return true;
	}
	
	return false;
}
    24e8:	81 2f       	mov	r24, r17
    24ea:	2f 96       	adiw	r28, 0x0f	; 15
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <_ZThn2_N26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEh>:
    2500:	02 97       	sbiw	r24, 0x02	; 2
    2502:	0c 94 2f 12 	jmp	0x245e	; 0x245e <_ZN26GSM3ShieldV1ServerProvider25recognizeUnsolicitedEventEh>

00002506 <_ZN23GSM3ShieldV1SMSProvider15remoteSMSNumberEPci>:
	return true;
}

//remoteNumber SMS function.
int GSM3ShieldV1SMSProvider::remoteSMSNumber(char* number, int nlength)
{
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	9b 01       	movw	r18, r22
	theGSM3ShieldV1ModemCore.theBuffer().extractSubstring("READ\",\"", "\"", number, nlength);	
    250c:	8a 01       	movw	r16, r20
    250e:	48 ef       	ldi	r20, 0xF8	; 248
    2510:	51 e0       	ldi	r21, 0x01	; 1
    2512:	62 ef       	ldi	r22, 0xF2	; 242
    2514:	71 e0       	ldi	r23, 0x01	; 1
    2516:	89 ea       	ldi	r24, 0xA9	; 169
    2518:	93 e0       	ldi	r25, 0x03	; 3
    251a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci>
	
	return 1;
}
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	08 95       	ret

00002528 <_ZN23GSM3ShieldV1SMSProvider7peekSMSEv>:
}	

//Read socket main function.
int GSM3ShieldV1SMSProvider::peekSMS()
{
	if (!flagReadingSMS) 
    2528:	fc 01       	movw	r30, r24
    252a:	26 81       	ldd	r18, Z+6	; 0x06
    252c:	21 11       	cpse	r18, r1
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <_ZN23GSM3ShieldV1SMSProvider7peekSMSEv+0x1a>
	{
		flagReadingSMS = 1;
    2530:	21 e0       	ldi	r18, 0x01	; 1
    2532:	26 83       	std	Z+6, r18	; 0x06
		theGSM3ShieldV1ModemCore.theBuffer().chopUntil("\n", true);
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	64 ea       	ldi	r22, 0xA4	; 164
    2538:	72 e0       	ldi	r23, 0x02	; 2
    253a:	89 ea       	ldi	r24, 0xA9	; 169
    253c:	93 e0       	ldi	r25, 0x03	; 3
    253e:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>
	}

	return theGSM3ShieldV1ModemCore.theBuffer().peek(0); 
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	89 ea       	ldi	r24, 0xA9	; 169
    2548:	93 e0       	ldi	r25, 0x03	; 3
    254a:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN18GSM3CircularBuffer4peekEi>
}
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	08 95       	ret

00002552 <_ZN23GSM3ShieldV1SMSProvider5readyEv>:
		int readSMS();
		
		/** Get last command status
			@return returns 0 if last command is still executing, 1 success, >1 error
		 */
		int ready(){return GSM3ShieldV1BaseProvider::ready();};
    2552:	02 96       	adiw	r24, 0x02	; 2
    2554:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>

00002558 <_ZN23GSM3ShieldV1SMSProviderC1Ev>:
https://github.com/BlueVia/Official-Arduino
*/
#include <GSM3ShieldV1SMSProvider.h>
#include <Arduino.h>
	
GSM3ShieldV1SMSProvider::GSM3ShieldV1SMSProvider()
    2558:	27 e1       	ldi	r18, 0x17	; 23
    255a:	32 e0       	ldi	r19, 0x02	; 2
    255c:	fc 01       	movw	r30, r24
    255e:	31 83       	std	Z+1, r19	; 0x01
    2560:	20 83       	st	Z, r18
    2562:	2f e2       	ldi	r18, 0x2F	; 47
    2564:	32 e0       	ldi	r19, 0x02	; 2
    2566:	33 83       	std	Z+3, r19	; 0x03
    2568:	22 83       	std	Z+2, r18	; 0x02
{
	theGSM3SMSProvider=this;
    256a:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <theGSM3SMSProvider+0x1>
    256e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <theGSM3SMSProvider>
    2572:	08 95       	ret

00002574 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Send SMS continue function.
void GSM3ShieldV1SMSProvider::beginSMSContinue()
{
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	1f 92       	push	r1
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	bool resp;
	// 1: Send AT
	// 2: wait for > and write text
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    257e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	19 f0       	breq	.+6      	; 0x258c <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x18>
    2586:	82 30       	cpi	r24, 0x02	; 2
    2588:	d1 f0       	breq	.+52     	; 0x25be <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x4a>
    258a:	32 c0       	rjmp	.+100    	; 0x25f0 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x7c>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    case 1:
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CMGS=\""), false);
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	63 e1       	ldi	r22, 0x13	; 19
    2596:	72 e0       	ldi	r23, 0x02	; 2
    2598:	89 e7       	ldi	r24, 0x79	; 121
    259a:	93 e0       	ldi	r25, 0x03	; 3
    259c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		theGSM3ShieldV1ModemCore.print(theGSM3ShieldV1ModemCore.getPhoneNumber());
    25a0:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    25a4:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    25a8:	8b e7       	ldi	r24, 0x7B	; 123
    25aa:	93 e0       	ldi	r25, 0x03	; 3
    25ac:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		theGSM3ShieldV1ModemCore.print("\"\r");
    25b0:	6a ef       	ldi	r22, 0xFA	; 250
    25b2:	71 e0       	ldi	r23, 0x01	; 1
    25b4:	8b e7       	ldi	r24, 0x7B	; 123
    25b6:	93 e0       	ldi	r25, 0x03	; 3
    25b8:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		break;
    25bc:	19 c0       	rjmp	.+50     	; 0x25f0 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x7c>
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp, ">"))
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4d ef       	ldi	r20, 0xFD	; 253
    25c4:	51 e0       	ldi	r21, 0x01	; 1
    25c6:	be 01       	movw	r22, r28
    25c8:	6f 5f       	subi	r22, 0xFF	; 255
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	89 e7       	ldi	r24, 0x79	; 121
    25ce:	93 e0       	ldi	r25, 0x03	; 3
    25d0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    25d4:	88 23       	and	r24, r24
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x7c>
		{
			if (resp) theGSM3ShieldV1ModemCore.closeCommand(1);
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	88 23       	and	r24, r24
    25dc:	19 f0       	breq	.+6      	; 0x25e4 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x70>
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv+0x74>
			else theGSM3ShieldV1ModemCore.closeCommand(3);
    25e4:	63 e0       	ldi	r22, 0x03	; 3
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	89 e7       	ldi	r24, 0x79	; 121
    25ea:	93 e0       	ldi	r25, 0x03	; 3
    25ec:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		}
		break;
	}
}
    25f0:	0f 90       	pop	r0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <_ZN23GSM3ShieldV1SMSProvider8beginSMSEPKc>:
	theGSM3SMSProvider=this;
};

//Send SMS begin function.
int GSM3ShieldV1SMSProvider::beginSMS(const char* to)
{
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
	if((theGSM3ShieldV1ModemCore.getStatus() != GSM_READY)&&(theGSM3ShieldV1ModemCore.getStatus() != GPRS_READY))
    25fc:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <theGSM3ShieldV1ModemCore+0x10>
    2600:	23 50       	subi	r18, 0x03	; 3
    2602:	22 30       	cpi	r18, 0x02	; 2
    2604:	18 f0       	brcs	.+6      	; 0x260c <_ZN23GSM3ShieldV1SMSProvider8beginSMSEPKc+0x14>
	  return 2;
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	13 c0       	rjmp	.+38     	; 0x2632 <_ZN23GSM3ShieldV1SMSProvider8beginSMSEPKc+0x3a>
    260c:	ec 01       	movw	r28, r24
		char *getPhoneNumber(){return phoneNumber;};
		
		/** Establish a new phone number
			@param n			Phone number
		 */
		void setPhoneNumber(char *n){phoneNumber=n;};
    260e:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    2612:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>

	theGSM3ShieldV1ModemCore.setPhoneNumber((char*)to);
	theGSM3ShieldV1ModemCore.openCommand(this,BEGINSMS);
    2616:	bc 01       	movw	r22, r24
    2618:	6e 5f       	subi	r22, 0xFE	; 254
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	44 e0       	ldi	r20, 0x04	; 4
    261e:	89 e7       	ldi	r24, 0x79	; 121
    2620:	93 e0       	ldi	r25, 0x03	; 3
    2622:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	beginSMSContinue();
    2626:	ce 01       	movw	r24, r28
    2628:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    262c:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <theGSM3ShieldV1ModemCore+0xa>
    2630:	90 e0       	ldi	r25, 0x00	; 0
}
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <_ZN23GSM3ShieldV1SMSProvider19parseCMGL_availableERb>:
	  
}	
		
//SMS available parse.
bool GSM3ShieldV1SMSProvider::parseCMGL_available(bool& rsp)
{
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	ec 01       	movw	r28, r24
    2642:	8b 01       	movw	r16, r22
		// TO-DO.Check if this formule runs too at the buffer limit
		
		/** Get available bytes in circular buffer
			@return available bytes
		 */
		inline byte availableBytes(){ return ((head-(tail+1))&__BUFFERMASK__);};
    2644:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    2648:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    264c:	91 50       	subi	r25, 0x01	; 1
    264e:	98 1b       	sub	r25, r24
    2650:	9f 77       	andi	r25, 0x7F	; 127
	fullBufferSMS = (theGSM3ShieldV1ModemCore.theBuffer().availableBytes()<=4);
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	95 30       	cpi	r25, 0x05	; 5
    2656:	08 f0       	brcs	.+2      	; 0x265a <_ZN23GSM3ShieldV1SMSProvider19parseCMGL_availableERb+0x22>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	8f 83       	std	Y+7, r24	; 0x07
	if (!(theGSM3ShieldV1ModemCore.theBuffer().chopUntil("+CMGL:", true)))
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	6f ef       	ldi	r22, 0xFF	; 255
    2662:	71 e0       	ldi	r23, 0x01	; 1
    2664:	89 ea       	ldi	r24, 0xA9	; 169
    2666:	93 e0       	ldi	r25, 0x03	; 3
    2668:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>
    266c:	81 11       	cpse	r24, r1
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <_ZN23GSM3ShieldV1SMSProvider19parseCMGL_availableERb+0x3e>
		rsp = false;
    2670:	f8 01       	movw	r30, r16
    2672:	10 82       	st	Z, r1
    2674:	03 c0       	rjmp	.+6      	; 0x267c <_ZN23GSM3ShieldV1SMSProvider19parseCMGL_availableERb+0x44>
	else 
		rsp = true;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	f8 01       	movw	r30, r16
    267a:	80 83       	st	Z, r24
	idSMS=theGSM3ShieldV1ModemCore.theBuffer().readInt();
    267c:	89 ea       	ldi	r24, 0xA9	; 169
    267e:	93 e0       	ldi	r25, 0x03	; 3
    2680:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN18GSM3CircularBuffer7readIntEv>
    2684:	9d 83       	std	Y+5, r25	; 0x05
    2686:	8c 83       	std	Y+4, r24	; 0x04

	//If there are 2 SMS in buffer, response is ...CRLFCRLF+CMGL
	twoSMSinBuffer = theGSM3ShieldV1ModemCore.theBuffer().locate("\r\n\r\n+");
    2688:	66 e0       	ldi	r22, 0x06	; 6
    268a:	72 e0       	ldi	r23, 0x02	; 2
    268c:	89 ea       	ldi	r24, 0xA9	; 169
    268e:	93 e0       	ldi	r25, 0x03	; 3
    2690:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2694:	88 87       	std	Y+8, r24	; 0x08

	checkSecondBuffer = 0;
    2696:	19 86       	std	Y+9, r1	; 0x09
	
	return true;
}
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Available SMS continue function.
void GSM3ShieldV1SMSProvider::availableSMSContinue()
{
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	1f 92       	push	r1
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	// 4: Receive OK
	// 5: Remaining SMS text in case full buffer.
	// This implementation really does not care much if the modem aswers trash to CMGL
	bool resp;
	//int msglength_aux;
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    26ae:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    26b2:	21 30       	cpi	r18, 0x01	; 1
    26b4:	19 f0       	breq	.+6      	; 0x26bc <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x18>
    26b6:	22 30       	cpi	r18, 0x02	; 2
    26b8:	61 f0       	breq	.+24     	; 0x26d2 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x2e>
    26ba:	1e c0       	rjmp	.+60     	; 0x26f8 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x54>
    case 1:	
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CMGL=\"REC UNREAD\",1"));
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	6c ef       	ldi	r22, 0xFC	; 252
    26c0:	71 e0       	ldi	r23, 0x01	; 1
    26c2:	89 e7       	ldi	r24, 0x79	; 121
    26c4:	93 e0       	ldi	r25, 0x03	; 3
    26c6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    26d0:	13 c0       	rjmp	.+38     	; 0x26f8 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x54>
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		break;
	case 2:
		if(parseCMGL_available(resp))
    26d2:	be 01       	movw	r22, r28
    26d4:	6f 5f       	subi	r22, 0xFF	; 255
    26d6:	7f 4f       	sbci	r23, 0xFF	; 255
    26d8:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN23GSM3ShieldV1SMSProvider19parseCMGL_availableERb>
    26dc:	88 23       	and	r24, r24
    26de:	61 f0       	breq	.+24     	; 0x26f8 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x54>
			{
				if (!resp) theGSM3ShieldV1ModemCore.closeCommand(4);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	81 11       	cpse	r24, r1
    26e4:	03 c0       	rjmp	.+6      	; 0x26ec <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x48>
    26e6:	64 e0       	ldi	r22, 0x04	; 4
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv+0x4c>
				else theGSM3ShieldV1ModemCore.closeCommand(1);
    26ec:	61 e0       	ldi	r22, 0x01	; 1
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	89 e7       	ldi	r24, 0x79	; 121
    26f2:	93 e0       	ldi	r25, 0x03	; 3
    26f4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
			}
		break;
	}
	  
}	
    26f8:	0f 90       	pop	r0
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <_ZN23GSM3ShieldV1SMSProvider12availableSMSEv>:
	}
}

//Available SMS main function.
int GSM3ShieldV1SMSProvider::availableSMS()
{
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	ec 01       	movw	r28, r24
	flagReadingSMS = 0;
    2706:	1e 82       	std	Y+6, r1	; 0x06
	theGSM3ShieldV1ModemCore.openCommand(this,AVAILABLESMS);
    2708:	bc 01       	movw	r22, r24
    270a:	6e 5f       	subi	r22, 0xFE	; 254
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	46 e0       	ldi	r20, 0x06	; 6
    2710:	89 e7       	ldi	r24, 0x79	; 121
    2712:	93 e0       	ldi	r25, 0x03	; 3
    2714:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	availableSMSContinue();
    2718:	ce 01       	movw	r24, r28
    271a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    271e:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <theGSM3ShieldV1ModemCore+0xa>
}
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv>:
	flushSMSContinue();
}

//Send SMS continue function.
void GSM3ShieldV1SMSProvider::flushSMSContinue()
{
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	1f 92       	push	r1
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	8c 01       	movw	r16, r24
	bool resp;
	// 1: Deleting SMS
	// 2: wait for OK
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    273a:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    273e:	91 30       	cpi	r25, 0x01	; 1
    2740:	19 f0       	breq	.+6      	; 0x2748 <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x1e>
    2742:	92 30       	cpi	r25, 0x02	; 2
    2744:	d9 f0       	breq	.+54     	; 0x277c <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x52>
    2746:	33 c0       	rjmp	.+102    	; 0x27ae <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x84>
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    case 1:
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CMGD="), false);
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	63 ef       	ldi	r22, 0xF3	; 243
    2752:	71 e0       	ldi	r23, 0x01	; 1
    2754:	89 e7       	ldi	r24, 0x79	; 121
    2756:	93 e0       	ldi	r25, 0x03	; 3
    2758:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
		theGSM3ShieldV1ModemCore.print(idSMS);
    275c:	f8 01       	movw	r30, r16
    275e:	64 81       	ldd	r22, Z+4	; 0x04
    2760:	75 81       	ldd	r23, Z+5	; 0x05
    2762:	4a e0       	ldi	r20, 0x0A	; 10
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	8b e7       	ldi	r24, 0x7B	; 123
    2768:	93 e0       	ldi	r25, 0x03	; 3
    276a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <_ZN5Print5printEii>
		theGSM3ShieldV1ModemCore.print("\r");
    276e:	6b ef       	ldi	r22, 0xFB	; 251
    2770:	71 e0       	ldi	r23, 0x01	; 1
    2772:	8b e7       	ldi	r24, 0x7B	; 123
    2774:	93 e0       	ldi	r25, 0x03	; 3
    2776:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		break;
    277a:	19 c0       	rjmp	.+50     	; 0x27ae <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x84>
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	be 01       	movw	r22, r28
    2786:	6f 5f       	subi	r22, 0xFF	; 255
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	89 e7       	ldi	r24, 0x79	; 121
    278c:	93 e0       	ldi	r25, 0x03	; 3
    278e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    2792:	88 23       	and	r24, r24
    2794:	61 f0       	breq	.+24     	; 0x27ae <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x84>
		{
			if (resp) theGSM3ShieldV1ModemCore.closeCommand(1);
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 23       	and	r24, r24
    279a:	19 f0       	breq	.+6      	; 0x27a2 <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x78>
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv+0x7c>
			else theGSM3ShieldV1ModemCore.closeCommand(3);
    27a2:	63 e0       	ldi	r22, 0x03	; 3
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	89 e7       	ldi	r24, 0x79	; 121
    27a8:	93 e0       	ldi	r25, 0x03	; 3
    27aa:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		}
		break;
	}
}
    27ae:	0f 90       	pop	r0
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	08 95       	ret

000027ba <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Send SMS continue function.
void GSM3ShieldV1SMSProvider::endSMSContinue()
{
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	1f 92       	push	r1
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
	bool resp;
	// 1: Send #26
	// 2: wait for OK
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    27c4:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	19 f0       	breq	.+6      	; 0x27d2 <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x18>
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	81 f0       	breq	.+32     	; 0x27f0 <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x36>
    27d0:	28 c0       	rjmp	.+80     	; 0x2822 <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x68>
    27d2:	82 e0       	ldi	r24, 0x02	; 2
    27d4:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    case 1:
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		theGSM3ShieldV1ModemCore.write(26);
    27d8:	6a e1       	ldi	r22, 0x1A	; 26
    27da:	89 e7       	ldi	r24, 0x79	; 121
    27dc:	93 e0       	ldi	r25, 0x03	; 3
    27de:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN21GSM3ShieldV1ModemCore5writeEh>
		theGSM3ShieldV1ModemCore.print("\r");
    27e2:	6b ef       	ldi	r22, 0xFB	; 251
    27e4:	71 e0       	ldi	r23, 0x01	; 1
    27e6:	8b e7       	ldi	r24, 0x7B	; 123
    27e8:	93 e0       	ldi	r25, 0x03	; 3
    27ea:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		break;
    27ee:	19 c0       	rjmp	.+50     	; 0x2822 <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x68>
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	be 01       	movw	r22, r28
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	89 e7       	ldi	r24, 0x79	; 121
    2800:	93 e0       	ldi	r25, 0x03	; 3
    2802:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    2806:	88 23       	and	r24, r24
    2808:	61 f0       	breq	.+24     	; 0x2822 <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x68>
		{
			if (resp) 
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	88 23       	and	r24, r24
    280e:	19 f0       	breq	.+6      	; 0x2816 <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x5c>
				theGSM3ShieldV1ModemCore.closeCommand(1);
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	02 c0       	rjmp	.+4      	; 0x281a <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv+0x60>
			else 
				theGSM3ShieldV1ModemCore.closeCommand(3);
    2816:	63 e0       	ldi	r22, 0x03	; 3
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	89 e7       	ldi	r24, 0x79	; 121
    281c:	93 e0       	ldi	r25, 0x03	; 3
    281e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		}
		break;
	}
}
    2822:	0f 90       	pop	r0
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	08 95       	ret

0000282a <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh>:
	}
}

void GSM3ShieldV1SMSProvider::manageResponse(byte from, byte to)
{
	switch(theGSM3ShieldV1ModemCore.getOngoingCommand())
    282a:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    282e:	25 30       	cpi	r18, 0x05	; 5
    2830:	81 f0       	breq	.+32     	; 0x2852 <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh+0x28>
    2832:	28 f4       	brcc	.+10     	; 0x283e <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh+0x14>
    2834:	21 30       	cpi	r18, 0x01	; 1
    2836:	41 f0       	breq	.+16     	; 0x2848 <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh+0x1e>
    2838:	24 30       	cpi	r18, 0x04	; 4
    283a:	49 f0       	breq	.+18     	; 0x284e <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh+0x24>
    283c:	08 95       	ret
    283e:	26 30       	cpi	r18, 0x06	; 6
    2840:	51 f0       	breq	.+20     	; 0x2856 <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh+0x2c>
    2842:	27 30       	cpi	r18, 0x07	; 7
    2844:	51 f0       	breq	.+20     	; 0x285a <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh+0x30>
    2846:	08 95       	ret
		
		// Only can be executed from the interrupt!
		/** Delete circular buffer to the end
			@param from			Initial byte position
		 */
		inline void deleteToTheEnd(byte from){tail=from;};
    2848:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    284c:	08 95       	ret
			break;
*/		case NONE:
			theGSM3ShieldV1ModemCore.gss.cb.deleteToTheEnd(from);
			break;
		case BEGINSMS:
			beginSMSContinue();
    284e:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <_ZN23GSM3ShieldV1SMSProvider16beginSMSContinueEv>
			break;
		case ENDSMS:
			endSMSContinue();
    2852:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv>
			break;
		case AVAILABLESMS:
			availableSMSContinue();
    2856:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <_ZN23GSM3ShieldV1SMSProvider20availableSMSContinueEv>
			break;
		case FLUSHSMS:
			flushSMSContinue();
    285a:	0c 94 95 13 	jmp	0x272a	; 0x272a <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv>

0000285e <_ZThn2_N23GSM3ShieldV1SMSProvider14manageResponseEhh>:
    285e:	02 97       	sbiw	r24, 0x02	; 2
    2860:	0c 94 15 14 	jmp	0x282a	; 0x282a <_ZN23GSM3ShieldV1SMSProvider14manageResponseEhh>

00002864 <_ZN23GSM3ShieldV1SMSProvider6endSMSEv>:
	theGSM3ShieldV1ModemCore.write(c);
}

//Send SMS begin function.
int GSM3ShieldV1SMSProvider::endSMS()
{
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	ec 01       	movw	r28, r24
	theGSM3ShieldV1ModemCore.openCommand(this,ENDSMS);
    286a:	bc 01       	movw	r22, r24
    286c:	6e 5f       	subi	r22, 0xFE	; 254
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	45 e0       	ldi	r20, 0x05	; 5
    2872:	89 e7       	ldi	r24, 0x79	; 121
    2874:	93 e0       	ldi	r25, 0x03	; 3
    2876:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	endSMSContinue();
    287a:	ce 01       	movw	r24, r28
    287c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_ZN23GSM3ShieldV1SMSProvider14endSMSContinueEv>
	while(ready()==0) delay(100);
    2880:	e8 81       	ld	r30, Y
    2882:	f9 81       	ldd	r31, Y+1	; 0x01
    2884:	00 88       	ldd	r0, Z+16	; 0x10
    2886:	f1 89       	ldd	r31, Z+17	; 0x11
    2888:	e0 2d       	mov	r30, r0
    288a:	ce 01       	movw	r24, r28
    288c:	09 95       	icall
    288e:	89 2b       	or	r24, r25
    2890:	39 f4       	brne	.+14     	; 0x28a0 <_ZN23GSM3ShieldV1SMSProvider6endSMSEv+0x3c>
    2892:	64 e6       	ldi	r22, 0x64	; 100
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    289e:	f0 cf       	rjmp	.-32     	; 0x2880 <_ZN23GSM3ShieldV1SMSProvider6endSMSEv+0x1c>
	return theGSM3ShieldV1ModemCore.getCommandError();
    28a0:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <theGSM3ShieldV1ModemCore+0xa>
}
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <_ZN23GSM3ShieldV1SMSProvider8writeSMSEc>:
}

//Send SMS write function.
void GSM3ShieldV1SMSProvider::writeSMS(char c)
{
	theGSM3ShieldV1ModemCore.write(c);
    28ac:	89 e7       	ldi	r24, 0x79	; 121
    28ae:	93 e0       	ldi	r25, 0x03	; 3
    28b0:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_ZN21GSM3ShieldV1ModemCore5writeEh>

000028b4 <_ZN23GSM3ShieldV1SMSProvider7readSMSEv>:
	return 1;
}

//remoteNumber SMS function.
int GSM3ShieldV1SMSProvider::readSMS()
{
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	ec 01       	movw	r28, r24
	char charSMS;
	//First char.
	if (!flagReadingSMS) 
    28be:	8e 81       	ldd	r24, Y+6	; 0x06
    28c0:	81 11       	cpse	r24, r1
    28c2:	0a c0       	rjmp	.+20     	; 0x28d8 <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0x24>
	{
		flagReadingSMS = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	8e 83       	std	Y+6, r24	; 0x06
		theGSM3ShieldV1ModemCore.theBuffer().chopUntil("\n", true);
    28c8:	21 e0       	ldi	r18, 0x01	; 1
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	64 ea       	ldi	r22, 0xA4	; 164
    28ce:	72 e0       	ldi	r23, 0x02	; 2
    28d0:	89 ea       	ldi	r24, 0xA9	; 169
    28d2:	93 e0       	ldi	r25, 0x03	; 3
    28d4:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18GSM3CircularBuffer9chopUntilEPKcbb>
	}
	charSMS = theGSM3ShieldV1ModemCore.theBuffer().read(); 
    28d8:	89 ea       	ldi	r24, 0xA9	; 169
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN18GSM3CircularBuffer4readEv>
    28e0:	08 2f       	mov	r16, r24
	
	//Second Buffer.
	if (checkSecondBuffer)
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	88 23       	and	r24, r24
    28e6:	41 f0       	breq	.+16     	; 0x28f8 <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0x44>
	{
		checkSecondBuffer = 0;
    28e8:	19 86       	std	Y+9, r1	; 0x09
		twoSMSinBuffer = theGSM3ShieldV1ModemCore.theBuffer().locate("\r\n\r\n+");
    28ea:	66 e0       	ldi	r22, 0x06	; 6
    28ec:	72 e0       	ldi	r23, 0x02	; 2
    28ee:	89 ea       	ldi	r24, 0xA9	; 169
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    28f6:	88 87       	std	Y+8, r24	; 0x08
	}

	//Case the last char in buffer.
	if ((!twoSMSinBuffer)&&fullBufferSMS&&(theGSM3ShieldV1ModemCore.theBuffer().availableBytes()==127))
    28f8:	88 85       	ldd	r24, Y+8	; 0x08
    28fa:	81 11       	cpse	r24, r1
    28fc:	28 c0       	rjmp	.+80     	; 0x294e <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0x9a>
    28fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2900:	88 23       	and	r24, r24
    2902:	41 f1       	breq	.+80     	; 0x2954 <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xa0>
		// TO-DO.Check if this formule runs too at the buffer limit
		
		/** Get available bytes in circular buffer
			@return available bytes
		 */
		inline byte availableBytes(){ return ((head-(tail+1))&__BUFFERMASK__);};
    2904:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <theGSM3ShieldV1ModemCore+0x30>
    2908:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <theGSM3ShieldV1ModemCore+0x31>
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	89 1b       	sub	r24, r25
    2910:	8f 77       	andi	r24, 0x7F	; 127
    2912:	10 e0       	ldi	r17, 0x00	; 0
    2914:	8f 37       	cpi	r24, 0x7F	; 127
    2916:	09 f0       	breq	.+2      	; 0x291a <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0x66>
    2918:	41 c0       	rjmp	.+130    	; 0x299c <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xe8>
	{
		theGSM3ShieldV1ModemCore.theBuffer().flush();
    291a:	89 ea       	ldi	r24, 0xA9	; 169
    291c:	93 e0       	ldi	r25, 0x03	; 3
    291e:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
		fullBufferSMS = 0;
    2922:	1f 82       	std	Y+7, r1	; 0x07
		checkSecondBuffer = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	89 87       	std	Y+9, r24	; 0x09
		theGSM3ShieldV1ModemCore.openCommand(this,XON);
    2928:	be 01       	movw	r22, r28
    292a:	6e 5f       	subi	r22, 0xFE	; 254
    292c:	7f 4f       	sbci	r23, 0xFF	; 255
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	89 e7       	ldi	r24, 0x79	; 121
    2932:	93 e0       	ldi	r25, 0x03	; 3
    2934:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    2938:	86 e9       	ldi	r24, 0x96	; 150
    293a:	93 e0       	ldi	r25, 0x03	; 3
    293c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
		delay(10);
    2940:	6a e0       	ldi	r22, 0x0A	; 10
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    294c:	27 c0       	rjmp	.+78     	; 0x299c <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xe8>
		return charSMS;
	}
	//Case two SMS in buffer
	else if (twoSMSinBuffer)
	{
		if (theGSM3ShieldV1ModemCore.theBuffer().locate("\r\n\r\n+")) 
    294e:	66 e0       	ldi	r22, 0x06	; 6
    2950:	72 e0       	ldi	r23, 0x02	; 2
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xa4>
		}
	}
	//Case 1 SMS and buffer not full
	else if (!fullBufferSMS)
	{
		if (theGSM3ShieldV1ModemCore.theBuffer().locate("\r\n\r\nOK")) 
    2954:	6c e0       	ldi	r22, 0x0C	; 12
    2956:	72 e0       	ldi	r23, 0x02	; 2
    2958:	89 ea       	ldi	r24, 0xA9	; 169
    295a:	93 e0       	ldi	r25, 0x03	; 3
    295c:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2960:	81 11       	cpse	r24, r1
    2962:	19 c0       	rjmp	.+50     	; 0x2996 <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xe2>
		{
					return charSMS;
		}
		else 
		{
			theGSM3ShieldV1ModemCore.theBuffer().flush();
    2964:	89 ea       	ldi	r24, 0xA9	; 169
    2966:	93 e0       	ldi	r25, 0x03	; 3
    2968:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
			theGSM3ShieldV1ModemCore.openCommand(this,XON);
    296c:	be 01       	movw	r22, r28
    296e:	6e 5f       	subi	r22, 0xFE	; 254
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	89 e7       	ldi	r24, 0x79	; 121
    2976:	93 e0       	ldi	r25, 0x03	; 3
    2978:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
			theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    297c:	86 e9       	ldi	r24, 0x96	; 150
    297e:	93 e0       	ldi	r25, 0x03	; 3
    2980:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
			delay(10);
    2984:	6a e0       	ldi	r22, 0x0A	; 10
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
			return 0;
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	04 c0       	rjmp	.+8      	; 0x299e <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xea>
	//Case 1 SMS and buffer not full
	else if (!fullBufferSMS)
	{
		if (theGSM3ShieldV1ModemCore.theBuffer().locate("\r\n\r\nOK")) 
		{
			return charSMS;
    2996:	80 2f       	mov	r24, r16
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	01 c0       	rjmp	.+2      	; 0x299e <_ZN23GSM3ShieldV1SMSProvider7readSMSEv+0xea>
		checkSecondBuffer = 1;
		theGSM3ShieldV1ModemCore.openCommand(this,XON);
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
		delay(10);
		
		return charSMS;
    299c:	c8 01       	movw	r24, r16
	//Case to read all the chars in buffer to the end.
	else 
	{
		return charSMS;		
	}
}	
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	08 95       	ret

000029a8 <_ZN23GSM3ShieldV1SMSProvider8flushSMSEv>:
	return theGSM3ShieldV1ModemCore.theBuffer().peek(0); 
}
	
//Flush SMS main function.
void GSM3ShieldV1SMSProvider::flushSMS()
{
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	8c 01       	movw	r16, r24
    29b2:	c5 e0       	ldi	r28, 0x05	; 5
    29b4:	d0 e0       	ldi	r29, 0x00	; 0

	//With this, sms data can fill up to 2x128+5x128 bytes.
	for (int aux = 0;aux<5;aux++)
	{
		theGSM3ShieldV1ModemCore.theBuffer().flush();
    29b6:	89 ea       	ldi	r24, 0xA9	; 169
    29b8:	93 e0       	ldi	r25, 0x03	; 3
    29ba:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
    29be:	86 e9       	ldi	r24, 0x96	; 150
    29c0:	93 e0       	ldi	r25, 0x03	; 3
    29c2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>
		delay(10);
    29c6:	6a e0       	ldi	r22, 0x0A	; 10
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    29d2:	21 97       	sbiw	r28, 0x01	; 1
//Flush SMS main function.
void GSM3ShieldV1SMSProvider::flushSMS()
{

	//With this, sms data can fill up to 2x128+5x128 bytes.
	for (int aux = 0;aux<5;aux++)
    29d4:	81 f7       	brne	.-32     	; 0x29b6 <_ZN23GSM3ShieldV1SMSProvider8flushSMSEv+0xe>
		theGSM3ShieldV1ModemCore.theBuffer().flush();
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
		delay(10);
	}
		
	theGSM3ShieldV1ModemCore.openCommand(this,FLUSHSMS);
    29d6:	b8 01       	movw	r22, r16
    29d8:	6e 5f       	subi	r22, 0xFE	; 254
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	47 e0       	ldi	r20, 0x07	; 7
    29de:	89 e7       	ldi	r24, 0x79	; 121
    29e0:	93 e0       	ldi	r25, 0x03	; 3
    29e2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	flushSMSContinue();
    29e6:	c8 01       	movw	r24, r16
}
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
		theGSM3ShieldV1ModemCore.gss.spaceAvailable();
		delay(10);
	}
		
	theGSM3ShieldV1ModemCore.openCommand(this,FLUSHSMS);
	flushSMSContinue();
    29f0:	0c 94 95 13 	jmp	0x272a	; 0x272a <_ZN23GSM3ShieldV1SMSProvider16flushSMSContinueEv>

000029f4 <_ZN25GSM3ShieldV1VoiceProvider18getvoiceCallStatusEv>:
		bool recognizeUnsolicitedEvent(byte oldTail);
		
		/** Returns voice call status
			@return voice call status
		 */
		GSM3_voiceCall_st getvoiceCallStatus(){ready(); return _voiceCallstatus;};
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	ec 01       	movw	r28, r24
    29fa:	e8 81       	ld	r30, Y
    29fc:	f9 81       	ldd	r31, Y+1	; 0x01
    29fe:	06 84       	ldd	r0, Z+14	; 0x0e
    2a00:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a02:	e0 2d       	mov	r30, r0
    2a04:	09 95       	icall
    2a06:	8e 81       	ldd	r24, Y+6	; 0x06
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	08 95       	ret

00002a0e <_ZN25GSM3ShieldV1VoiceProvider18setvoiceCallStatusE17GSM3_voiceCall_st>:
		
		/**	Set voice call status
			@param status		New status for voice call
		 */
		void setvoiceCallStatus(GSM3_voiceCall_st status) { _voiceCallstatus = status; };
    2a0e:	fc 01       	movw	r30, r24
    2a10:	66 83       	std	Z+6, r22	; 0x06
    2a12:	08 95       	ret

00002a14 <_ZN25GSM3ShieldV1VoiceProvider10initializeEv>:
	theGSM3MobileVoiceProvider=this;
 }
 
 void GSM3ShieldV1VoiceProvider::initialize()
 {
 	theGSM3ShieldV1ModemCore.registerUMProvider(this);
    2a14:	bc 01       	movw	r22, r24
    2a16:	6e 5f       	subi	r22, 0xFE	; 254
    2a18:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1a:	89 e7       	ldi	r24, 0x79	; 121
    2a1c:	93 e0       	ldi	r25, 0x03	; 3
    2a1e:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_ZN21GSM3ShieldV1ModemCore18registerUMProviderEP24GSM3ShieldV1BaseProvider>

00002a22 <_ZN25GSM3ShieldV1VoiceProvider9voiceCallEPKc>:
 }
 
//Voice Call main function.
int GSM3ShieldV1VoiceProvider::voiceCall(const char* to)
{
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	ec 01       	movw	r28, r24
    2a2c:	8b 01       	movw	r16, r22
	theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("ATD"),false);
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	60 e5       	ldi	r22, 0x50	; 80
    2a32:	72 e0       	ldi	r23, 0x02	; 2
    2a34:	89 e7       	ldi	r24, 0x79	; 121
    2a36:	93 e0       	ldi	r25, 0x03	; 3
    2a38:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
	theGSM3ShieldV1ModemCore.print(to);
    2a3c:	b8 01       	movw	r22, r16
    2a3e:	8b e7       	ldi	r24, 0x7B	; 123
    2a40:	93 e0       	ldi	r25, 0x03	; 3
    2a42:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
	theGSM3ShieldV1ModemCore.print(";\r");
    2a46:	63 e3       	ldi	r22, 0x33	; 51
    2a48:	72 e0       	ldi	r23, 0x02	; 2
    2a4a:	8b e7       	ldi	r24, 0x7B	; 123
    2a4c:	93 e0       	ldi	r25, 0x03	; 3
    2a4e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
	setvoiceCallStatus(CALLING);
    2a52:	e8 81       	ld	r30, Y
    2a54:	f9 81       	ldd	r31, Y+1	; 0x01
    2a56:	04 84       	ldd	r0, Z+12	; 0x0c
    2a58:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a5a:	e0 2d       	mov	r30, r0
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	ce 01       	movw	r24, r28
    2a60:	09 95       	icall
	return 1;
}
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	08 95       	ret

00002a70 <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh>:
	}
}

//URC recognize.
bool GSM3ShieldV1VoiceProvider::recognizeUnsolicitedEvent(byte oldTail)
{
    2a70:	cf 92       	push	r12
    2a72:	df 92       	push	r13
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	2f 97       	sbiw	r28, 0x0f	; 15
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	8c 01       	movw	r16, r24

	int nlength;
	char auxLocate [15];
	//RING.
	prepareAuxLocate(PSTR("RING"), auxLocate);
    2a90:	6c 01       	movw	r12, r24
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	c8 0e       	add	r12, r24
    2a96:	d1 1c       	adc	r13, r1
    2a98:	ae 01       	movw	r20, r28
    2a9a:	4f 5f       	subi	r20, 0xFF	; 255
    2a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a9e:	6b e3       	ldi	r22, 0x3B	; 59
    2aa0:	72 e0       	ldi	r23, 0x02	; 2
    2aa2:	c6 01       	movw	r24, r12
    2aa4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.theBuffer().locate(auxLocate))
    2aa8:	be 01       	movw	r22, r28
    2aaa:	6f 5f       	subi	r22, 0xFF	; 255
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	89 ea       	ldi	r24, 0xA9	; 169
    2ab0:	93 e0       	ldi	r25, 0x03	; 3
    2ab2:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2ab6:	f8 2e       	mov	r15, r24
    2ab8:	88 23       	and	r24, r24
    2aba:	41 f0       	breq	.+16     	; 0x2acc <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0x5c>
	{
		// RING
		setvoiceCallStatus(RECEIVINGCALL);
    2abc:	d8 01       	movw	r26, r16
    2abe:	ed 91       	ld	r30, X+
    2ac0:	fc 91       	ld	r31, X
    2ac2:	04 84       	ldd	r0, Z+12	; 0x0c
    2ac4:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ac6:	e0 2d       	mov	r30, r0
    2ac8:	62 e0       	ldi	r22, 0x02	; 2
    2aca:	19 c0       	rjmp	.+50     	; 0x2afe <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0x8e>
		theGSM3ShieldV1ModemCore.theBuffer().flush();
		return true;
	}
	
	//CALL ACEPTED.
	prepareAuxLocate(PSTR("+COLP:"), auxLocate);
    2acc:	ae 01       	movw	r20, r28
    2ace:	4f 5f       	subi	r20, 0xFF	; 255
    2ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad2:	64 e3       	ldi	r22, 0x34	; 52
    2ad4:	72 e0       	ldi	r23, 0x02	; 2
    2ad6:	c6 01       	movw	r24, r12
    2ad8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.theBuffer().locate(auxLocate))
    2adc:	be 01       	movw	r22, r28
    2ade:	6f 5f       	subi	r22, 0xFF	; 255
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	89 ea       	ldi	r24, 0xA9	; 169
    2ae4:	93 e0       	ldi	r25, 0x03	; 3
    2ae6:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2aea:	f8 2e       	mov	r15, r24
    2aec:	88 23       	and	r24, r24
    2aee:	71 f0       	breq	.+28     	; 0x2b0c <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0x9c>
	{
		//DEBUG
		//Serial.println("Call Accepted.");
		setvoiceCallStatus(TALKING);
    2af0:	d8 01       	movw	r26, r16
    2af2:	ed 91       	ld	r30, X+
    2af4:	fc 91       	ld	r31, X
    2af6:	04 84       	ldd	r0, Z+12	; 0x0c
    2af8:	f5 85       	ldd	r31, Z+13	; 0x0d
    2afa:	e0 2d       	mov	r30, r0
    2afc:	63 e0       	ldi	r22, 0x03	; 3
    2afe:	c8 01       	movw	r24, r16
    2b00:	09 95       	icall
		theGSM3ShieldV1ModemCore.theBuffer().flush();
    2b02:	89 ea       	ldi	r24, 0xA9	; 169
    2b04:	93 e0       	ldi	r25, 0x03	; 3
    2b06:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
		return true;
    2b0a:	4b c0       	rjmp	.+150    	; 0x2ba2 <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0x132>
	}	
	
	//NO CARRIER.
	prepareAuxLocate(PSTR("NO CARRIER"), auxLocate);
    2b0c:	ae 01       	movw	r20, r28
    2b0e:	4f 5f       	subi	r20, 0xFF	; 255
    2b10:	5f 4f       	sbci	r21, 0xFF	; 255
    2b12:	69 e2       	ldi	r22, 0x29	; 41
    2b14:	72 e0       	ldi	r23, 0x02	; 2
    2b16:	c6 01       	movw	r24, r12
    2b18:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.theBuffer().locate(auxLocate))
    2b1c:	be 01       	movw	r22, r28
    2b1e:	6f 5f       	subi	r22, 0xFF	; 255
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	89 ea       	ldi	r24, 0xA9	; 169
    2b24:	93 e0       	ldi	r25, 0x03	; 3
    2b26:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2b2a:	f8 2e       	mov	r15, r24
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	12 c0       	rjmp	.+36     	; 0x2b54 <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0xe4>
		theGSM3ShieldV1ModemCore.theBuffer().flush();
		return true;
	}
	
	//BUSY.
	prepareAuxLocate(PSTR("BUSY"), auxLocate);
    2b30:	ae 01       	movw	r20, r28
    2b32:	4f 5f       	subi	r20, 0xFF	; 255
    2b34:	5f 4f       	sbci	r21, 0xFF	; 255
    2b36:	64 e2       	ldi	r22, 0x24	; 36
    2b38:	72 e0       	ldi	r23, 0x02	; 2
    2b3a:	c6 01       	movw	r24, r12
    2b3c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.theBuffer().locate(auxLocate))
    2b40:	be 01       	movw	r22, r28
    2b42:	6f 5f       	subi	r22, 0xFF	; 255
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255
    2b46:	89 ea       	ldi	r24, 0xA9	; 169
    2b48:	93 e0       	ldi	r25, 0x03	; 3
    2b4a:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2b4e:	f8 2e       	mov	r15, r24
    2b50:	88 23       	and	r24, r24
    2b52:	41 f0       	breq	.+16     	; 0x2b64 <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0xf4>
	{
		//DEBUG	
		//Serial.println("BUSY received.");
		setvoiceCallStatus(IDLE_CALL);
    2b54:	d8 01       	movw	r26, r16
    2b56:	ed 91       	ld	r30, X+
    2b58:	fc 91       	ld	r31, X
    2b5a:	04 84       	ldd	r0, Z+12	; 0x0c
    2b5c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b5e:	e0 2d       	mov	r30, r0
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	cd cf       	rjmp	.-102    	; 0x2afe <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0x8e>
		theGSM3ShieldV1ModemCore.theBuffer().flush();
		return true;
	}	
	
	//CALL RECEPTION.
	prepareAuxLocate(PSTR("+CLIP:"), auxLocate);
    2b64:	ae 01       	movw	r20, r28
    2b66:	4f 5f       	subi	r20, 0xFF	; 255
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	6d e1       	ldi	r22, 0x1D	; 29
    2b6c:	72 e0       	ldi	r23, 0x02	; 2
    2b6e:	c6 01       	movw	r24, r12
    2b70:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN24GSM3ShieldV1BaseProvider16prepareAuxLocateEPKcPc>
	if(theGSM3ShieldV1ModemCore.theBuffer().locate(auxLocate))
    2b74:	be 01       	movw	r22, r28
    2b76:	6f 5f       	subi	r22, 0xFF	; 255
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	89 ea       	ldi	r24, 0xA9	; 169
    2b7c:	93 e0       	ldi	r25, 0x03	; 3
    2b7e:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18GSM3CircularBuffer6locateEPKc>
    2b82:	f8 2e       	mov	r15, r24
    2b84:	88 23       	and	r24, r24
    2b86:	69 f0       	breq	.+26     	; 0x2ba2 <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh+0x132>
	{
		theGSM3ShieldV1ModemCore.theBuffer().flush();
    2b88:	89 ea       	ldi	r24, 0xA9	; 169
    2b8a:	93 e0       	ldi	r25, 0x03	; 3
    2b8c:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
		setvoiceCallStatus(RECEIVINGCALL);
    2b90:	d8 01       	movw	r26, r16
    2b92:	ed 91       	ld	r30, X+
    2b94:	fc 91       	ld	r31, X
    2b96:	04 84       	ldd	r0, Z+12	; 0x0c
    2b98:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b9a:	e0 2d       	mov	r30, r0
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	c8 01       	movw	r24, r16
    2ba0:	09 95       	icall
		return true;
	}
	
	return false;
}
    2ba2:	8f 2d       	mov	r24, r15
    2ba4:	2f 96       	adiw	r28, 0x0f	; 15
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	df 90       	pop	r13
    2bbc:	cf 90       	pop	r12
    2bbe:	08 95       	ret

00002bc0 <_ZThn2_N25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh>:
    2bc0:	02 97       	sbiw	r24, 0x02	; 2
    2bc2:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <_ZN25GSM3ShieldV1VoiceProvider25recognizeUnsolicitedEventEh>

00002bc6 <_ZN25GSM3ShieldV1VoiceProvider5readyEv>:
		int retrieveCallingNumber(char* buffer, int bufsize);
		
		/** Get last command status
			@return Returns 0 if last command is still executing, 1 success, >1 error
		 */
		int ready(){return GSM3ShieldV1BaseProvider::ready();};
    2bc6:	02 96       	adiw	r24, 0x02	; 2
    2bc8:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN24GSM3ShieldV1BaseProvider5readyEv>

00002bcc <_ZN25GSM3ShieldV1VoiceProviderC1Ev>:
https://github.com/BlueVia/Official-Arduino
*/
#include <GSM3ShieldV1VoiceProvider.h>
#include <Arduino.h>

GSM3ShieldV1VoiceProvider::GSM3ShieldV1VoiceProvider()
    2bcc:	fc 01       	movw	r30, r24
    2bce:	8d e4       	ldi	r24, 0x4D	; 77
    2bd0:	92 e0       	ldi	r25, 0x02	; 2
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
    2bd6:	85 e6       	ldi	r24, 0x65	; 101
    2bd8:	92 e0       	ldi	r25, 0x02	; 2
    2bda:	93 83       	std	Z+3, r25	; 0x03
    2bdc:	82 83       	std	Z+2, r24	; 0x02
 {
	phonelength=0;
    2bde:	15 82       	std	Z+5, r1	; 0x05
    2be0:	14 82       	std	Z+4, r1	; 0x04
	theGSM3MobileVoiceProvider=this;
    2be2:	f0 93 5a 03 	sts	0x035A, r31	; 0x80035a <theGSM3MobileVoiceProvider+0x1>
    2be6:	e0 93 59 03 	sts	0x0359, r30	; 0x800359 <theGSM3MobileVoiceProvider>
    2bea:	08 95       	ret

00002bec <_ZN25GSM3ShieldV1VoiceProvider9parseCLCCEPci>:
	}	
}	

//CLCC parse.	
bool GSM3ShieldV1VoiceProvider::parseCLCC(char* number, int nlength)
{
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	9b 01       	movw	r18, r22
	theGSM3ShieldV1ModemCore.theBuffer().extractSubstring("+CLCC: 1,1,4,0,0,\"","\"", number, nlength);
    2bf2:	8a 01       	movw	r16, r20
    2bf4:	48 ef       	ldi	r20, 0xF8	; 248
    2bf6:	51 e0       	ldi	r21, 0x01	; 1
    2bf8:	66 e3       	ldi	r22, 0x36	; 54
    2bfa:	72 e0       	ldi	r23, 0x02	; 2
    2bfc:	89 ea       	ldi	r24, 0xA9	; 169
    2bfe:	93 e0       	ldi	r25, 0x03	; 3
    2c00:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN18GSM3CircularBuffer16extractSubstringEPKcS1_Pci>
	theGSM3ShieldV1ModemCore.theBuffer().flush();
    2c04:	89 ea       	ldi	r24, 0xA9	; 169
    2c06:	93 e0       	ldi	r25, 0x03	; 3
    2c08:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN18GSM3CircularBuffer5flushEv>
	return true;
}	
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	08 95       	ret

00002c14 <_ZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEv>:
	// 1:  AT+CLCC
	// 2: Receive +CLCC: 1,1,4,0,0,"num",129,""
	// This implementation really does not care much if the modem aswers trash to CMGL
	bool resp;
	//int msglength_aux;
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    2c14:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2c18:	21 30       	cpi	r18, 0x01	; 1
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <_ZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEv+0xe>
    2c1c:	22 30       	cpi	r18, 0x02	; 2
    2c1e:	61 f0       	breq	.+24     	; 0x2c38 <_ZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEv+0x24>
    2c20:	08 95       	ret
    case 1:	
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("AT+CLCC"));
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	68 e4       	ldi	r22, 0x48	; 72
    2c26:	72 e0       	ldi	r23, 0x02	; 2
    2c28:	89 e7       	ldi	r24, 0x79	; 121
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    2c30:	82 e0       	ldi	r24, 0x02	; 2
    2c32:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2c36:	08 95       	ret
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		break;
	case 2:
		if(parseCLCC(theGSM3ShieldV1ModemCore.getPhoneNumber(), phonelength))
    2c38:	fc 01       	movw	r30, r24
    2c3a:	44 81       	ldd	r20, Z+4	; 0x04
    2c3c:	55 81       	ldd	r21, Z+5	; 0x05
    2c3e:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <theGSM3ShieldV1ModemCore+0x6>
    2c42:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <theGSM3ShieldV1ModemCore+0x7>
    2c46:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_ZN25GSM3ShieldV1VoiceProvider9parseCLCCEPci>
    2c4a:	88 23       	and	r24, r24
    2c4c:	31 f0       	breq	.+12     	; 0x2c5a <_ZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEv+0x46>
		{
			theGSM3ShieldV1ModemCore.closeCommand(1);
    2c4e:	61 e0       	ldi	r22, 0x01	; 1
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	89 e7       	ldi	r24, 0x79	; 121
    2c54:	93 e0       	ldi	r25, 0x03	; 3
    2c56:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
    2c5a:	08 95       	ret

00002c5c <_ZN25GSM3ShieldV1VoiceProvider21retrieveCallingNumberEPci>:
	return 1;
}

//Retrieve calling number main function.
int GSM3ShieldV1VoiceProvider::retrieveCallingNumber (char* buffer, int bufsize)
{
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	8c 01       	movw	r16, r24
		char *getPhoneNumber(){return phoneNumber;};
		
		/** Establish a new phone number
			@param n			Phone number
		 */
		void setPhoneNumber(char *n){phoneNumber=n;};
    2c66:	c9 e7       	ldi	r28, 0x79	; 121
    2c68:	d3 e0       	ldi	r29, 0x03	; 3
    2c6a:	7f 83       	std	Y+7, r23	; 0x07
    2c6c:	6e 83       	std	Y+6, r22	; 0x06
	theGSM3ShieldV1ModemCore.setPhoneNumber(buffer);
	phonelength = bufsize;
    2c6e:	fc 01       	movw	r30, r24
    2c70:	55 83       	std	Z+5, r21	; 0x05
    2c72:	44 83       	std	Z+4, r20	; 0x04
		uint8_t getCommandError(){return commandError;};
		
		/** Establish a command error
			@param n			Command error
		 */
		void setCommandError(uint8_t n){commandError=n;};
    2c74:	1a 86       	std	Y+10, r1	; 0x0a
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	8b 87       	std	Y+11, r24	; 0x0b
	theGSM3ShieldV1ModemCore.setCommandError(0);
	theGSM3ShieldV1ModemCore.setCommandCounter(1);
	theGSM3ShieldV1ModemCore.openCommand(this,RETRIEVECALLINGNUMBER);
    2c7a:	b8 01       	movw	r22, r16
    2c7c:	6e 5f       	subi	r22, 0xFE	; 254
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	4b e0       	ldi	r20, 0x0B	; 11
    2c82:	ce 01       	movw	r24, r28
    2c84:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	retrieveCallingNumberContinue();
    2c88:	c8 01       	movw	r24, r16
    2c8a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    2c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	08 95       	ret

00002c9c <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Answer Call continue function.
void GSM3ShieldV1VoiceProvider::answerCallContinue()
{
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	1f 92       	push	r1
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	8c 01       	movw	r16, r24
	// 1: ATA
	// 2: Waiting for OK
	
	// This implementation really does not care much if the modem aswers trash to CMGL
	bool resp;
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    2cac:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2cb0:	81 30       	cpi	r24, 0x01	; 1
    2cb2:	19 f0       	breq	.+6      	; 0x2cba <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x1e>
    2cb4:	82 30       	cpi	r24, 0x02	; 2
    2cb6:	61 f0       	breq	.+24     	; 0x2cd0 <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x34>
    2cb8:	2d c0       	rjmp	.+90     	; 0x2d14 <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x78>
    case 1:
		// ATA ;
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("ATA"));
    2cba:	41 e0       	ldi	r20, 0x01	; 1
    2cbc:	64 e4       	ldi	r22, 0x44	; 68
    2cbe:	72 e0       	ldi	r23, 0x02	; 2
    2cc0:	89 e7       	ldi	r24, 0x79	; 121
    2cc2:	93 e0       	ldi	r25, 0x03	; 3
    2cc4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2cce:	22 c0       	rjmp	.+68     	; 0x2d14 <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x78>
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		break;
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	be 01       	movw	r22, r28
    2cda:	6f 5f       	subi	r22, 0xFF	; 255
    2cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cde:	89 e7       	ldi	r24, 0x79	; 121
    2ce0:	93 e0       	ldi	r25, 0x03	; 3
    2ce2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    2ce6:	88 23       	and	r24, r24
    2ce8:	a9 f0       	breq	.+42     	; 0x2d14 <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x78>
		   {
			   setvoiceCallStatus(TALKING);
    2cea:	d8 01       	movw	r26, r16
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	04 84       	ldd	r0, Z+12	; 0x0c
    2cf2:	f5 85       	ldd	r31, Z+13	; 0x0d
    2cf4:	e0 2d       	mov	r30, r0
    2cf6:	63 e0       	ldi	r22, 0x03	; 3
    2cf8:	c8 01       	movw	r24, r16
    2cfa:	09 95       	icall
			   if (resp) theGSM3ShieldV1ModemCore.closeCommand(1);
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	88 23       	and	r24, r24
    2d00:	19 f0       	breq	.+6      	; 0x2d08 <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x6c>
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv+0x70>
			   else theGSM3ShieldV1ModemCore.closeCommand(3);
    2d08:	63 e0       	ldi	r22, 0x03	; 3
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	89 e7       	ldi	r24, 0x79	; 121
    2d0e:	93 e0       	ldi	r25, 0x03	; 3
    2d10:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
			}
		break;
	}
}
    2d14:	0f 90       	pop	r0
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	08 95       	ret

00002d20 <_ZN25GSM3ShieldV1VoiceProvider10answerCallEv>:
	return true;
}	

//Answer Call main function.
int GSM3ShieldV1VoiceProvider::answerCall()
{
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	8c 01       	movw	r16, r24
		uint8_t getCommandError(){return commandError;};
		
		/** Establish a command error
			@param n			Command error
		 */
		void setCommandError(uint8_t n){commandError=n;};
    2d2a:	c9 e7       	ldi	r28, 0x79	; 121
    2d2c:	d3 e0       	ldi	r29, 0x03	; 3
    2d2e:	1a 86       	std	Y+10, r1	; 0x0a
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	8b 87       	std	Y+11, r24	; 0x0b
	theGSM3ShieldV1ModemCore.setCommandError(0);
	theGSM3ShieldV1ModemCore.setCommandCounter(1);
	theGSM3ShieldV1ModemCore.openCommand(this,ANSWERCALL);
    2d34:	b8 01       	movw	r22, r16
    2d36:	6e 5f       	subi	r22, 0xFE	; 254
    2d38:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3a:	49 e0       	ldi	r20, 0x09	; 9
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	answerCallContinue();
    2d42:	c8 01       	movw	r24, r16
    2d44:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    2d48:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	1f 91       	pop	r17
    2d52:	0f 91       	pop	r16
    2d54:	08 95       	ret

00002d56 <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv>:
	return theGSM3ShieldV1ModemCore.getCommandError();
}

//Hang Call continue function.
void GSM3ShieldV1VoiceProvider::hangCallContinue()
{
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	1f 92       	push	r1
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	8c 01       	movw	r16, r24
	// 1: ATH
	// 2: Waiting for OK
	
	bool resp;
	switch (theGSM3ShieldV1ModemCore.getCommandCounter()) {
    2d66:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2d6a:	81 30       	cpi	r24, 0x01	; 1
    2d6c:	19 f0       	breq	.+6      	; 0x2d74 <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x1e>
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	61 f0       	breq	.+24     	; 0x2d8a <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x34>
    2d72:	2d c0       	rjmp	.+90     	; 0x2dce <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x78>
    case 1:
		//ATH
		theGSM3ShieldV1ModemCore.genericCommand_rq(PSTR("ATH"));
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	60 e4       	ldi	r22, 0x40	; 64
    2d78:	72 e0       	ldi	r23, 0x02	; 2
    2d7a:	89 e7       	ldi	r24, 0x79	; 121
    2d7c:	93 e0       	ldi	r25, 0x03	; 3
    2d7e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN21GSM3ShieldV1ModemCore17genericCommand_rqEPKcb>
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <theGSM3ShieldV1ModemCore+0xb>
    2d88:	22 c0       	rjmp	.+68     	; 0x2dce <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x78>
		theGSM3ShieldV1ModemCore.setCommandCounter(2);
		break;
	case 2:
		if(theGSM3ShieldV1ModemCore.genericParse_rsp(resp))
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	be 01       	movw	r22, r28
    2d94:	6f 5f       	subi	r22, 0xFF	; 255
    2d96:	7f 4f       	sbci	r23, 0xFF	; 255
    2d98:	89 e7       	ldi	r24, 0x79	; 121
    2d9a:	93 e0       	ldi	r25, 0x03	; 3
    2d9c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN21GSM3ShieldV1ModemCore16genericParse_rspERbPcS1_>
    2da0:	88 23       	and	r24, r24
    2da2:	a9 f0       	breq	.+42     	; 0x2dce <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x78>
		{
		   setvoiceCallStatus(IDLE_CALL);
    2da4:	d8 01       	movw	r26, r16
    2da6:	ed 91       	ld	r30, X+
    2da8:	fc 91       	ld	r31, X
    2daa:	04 84       	ldd	r0, Z+12	; 0x0c
    2dac:	f5 85       	ldd	r31, Z+13	; 0x0d
    2dae:	e0 2d       	mov	r30, r0
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	c8 01       	movw	r24, r16
    2db4:	09 95       	icall
		   if (resp) theGSM3ShieldV1ModemCore.closeCommand(1);
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	88 23       	and	r24, r24
    2dba:	19 f0       	breq	.+6      	; 0x2dc2 <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x6c>
    2dbc:	61 e0       	ldi	r22, 0x01	; 1
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv+0x70>
		   else theGSM3ShieldV1ModemCore.closeCommand(3);
    2dc2:	63 e0       	ldi	r22, 0x03	; 3
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	89 e7       	ldi	r24, 0x79	; 121
    2dc8:	93 e0       	ldi	r25, 0x03	; 3
    2dca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN21GSM3ShieldV1ModemCore12closeCommandEi>
		}
		break;
	}
}		
    2dce:	0f 90       	pop	r0
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	08 95       	ret

00002dda <_ZN25GSM3ShieldV1VoiceProvider8hangCallEv>:
	}
}
		
//Hang Call main function.		
int GSM3ShieldV1VoiceProvider::hangCall()
{
    2dda:	0f 93       	push	r16
    2ddc:	1f 93       	push	r17
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	8c 01       	movw	r16, r24
		uint8_t getCommandError(){return commandError;};
		
		/** Establish a command error
			@param n			Command error
		 */
		void setCommandError(uint8_t n){commandError=n;};
    2de4:	c9 e7       	ldi	r28, 0x79	; 121
    2de6:	d3 e0       	ldi	r29, 0x03	; 3
    2de8:	1a 86       	std	Y+10, r1	; 0x0a
		uint8_t getCommandCounter(){return commandCounter;};
		
		/** Set command counter
			@param c			Initial value
		 */
		void setCommandCounter(uint8_t c){commandCounter=c;};
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	8b 87       	std	Y+11, r24	; 0x0b
	theGSM3ShieldV1ModemCore.setCommandError(0);
	theGSM3ShieldV1ModemCore.setCommandCounter(1);
	theGSM3ShieldV1ModemCore.openCommand(this,HANGCALL);
    2dee:	b8 01       	movw	r22, r16
    2df0:	6e 5f       	subi	r22, 0xFE	; 254
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	4a e0       	ldi	r20, 0x0A	; 10
    2df6:	ce 01       	movw	r24, r28
    2df8:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN21GSM3ShieldV1ModemCore11openCommandEP24GSM3ShieldV1BaseProvider18GSM3_commandType_e>
	hangCallContinue();
    2dfc:	c8 01       	movw	r24, r16
    2dfe:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv>
	return theGSM3ShieldV1ModemCore.getCommandError();
    2e02:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	08 95       	ret

00002e10 <_ZN25GSM3ShieldV1VoiceProvider14manageResponseEhh>:
}		

//Response management.
void GSM3ShieldV1VoiceProvider::manageResponse(byte from, byte to)
{
	switch(theGSM3ShieldV1ModemCore.getOngoingCommand())
    2e10:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <theGSM3ShieldV1ModemCore+0xc>
    2e14:	2a 30       	cpi	r18, 0x0A	; 10
    2e16:	31 f0       	breq	.+12     	; 0x2e24 <_ZN25GSM3ShieldV1VoiceProvider14manageResponseEhh+0x14>
    2e18:	2b 30       	cpi	r18, 0x0B	; 11
    2e1a:	31 f0       	breq	.+12     	; 0x2e28 <_ZN25GSM3ShieldV1VoiceProvider14manageResponseEhh+0x18>
    2e1c:	29 30       	cpi	r18, 0x09	; 9
    2e1e:	31 f4       	brne	.+12     	; 0x2e2c <_ZN25GSM3ShieldV1VoiceProvider14manageResponseEhh+0x1c>
	{
		case ANSWERCALL:
			answerCallContinue();
    2e20:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <_ZN25GSM3ShieldV1VoiceProvider18answerCallContinueEv>
			break;
		case HANGCALL:
			hangCallContinue();
    2e24:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <_ZN25GSM3ShieldV1VoiceProvider16hangCallContinueEv>
			break;
		case RETRIEVECALLINGNUMBER:
			retrieveCallingNumberContinue();
    2e28:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <_ZN25GSM3ShieldV1VoiceProvider29retrieveCallingNumberContinueEv>
    2e2c:	08 95       	ret

00002e2e <_ZThn2_N25GSM3ShieldV1VoiceProvider14manageResponseEhh>:
    2e2e:	02 97       	sbiw	r24, 0x02	; 2
    2e30:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <_ZN25GSM3ShieldV1VoiceProvider14manageResponseEhh>

00002e34 <_ZN14GSM3SMSService5writeEh>:
	return waitForAnswerIfNeeded(theGSM3SMSProvider->beginSMS(number));
};

int GSM3SMSService::endSMS()
{
	return waitForAnswerIfNeeded(theGSM3SMSProvider->endSMS());
    2e34:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2e38:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	ed 91       	ld	r30, X+
    2e40:	fc 91       	ld	r31, X
    2e42:	02 80       	ldd	r0, Z+2	; 0x02
    2e44:	f3 81       	ldd	r31, Z+3	; 0x03
    2e46:	e0 2d       	mov	r30, r0
    2e48:	09 95       	icall
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	08 95       	ret

00002e50 <_ZN14GSM3SMSService4readEv>:
    2e50:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2e54:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	ed 91       	ld	r30, X+
    2e5c:	fc 91       	ld	r31, X
    2e5e:	06 84       	ldd	r0, Z+14	; 0x0e
    2e60:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e62:	e0 2d       	mov	r30, r0
    2e64:	09 94       	ijmp

00002e66 <_ZN14GSM3SMSService4peekEv>:
    2e66:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2e6a:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	00 84       	ldd	r0, Z+8	; 0x08
    2e76:	f1 85       	ldd	r31, Z+9	; 0x09
    2e78:	e0 2d       	mov	r30, r0
    2e7a:	09 94       	ijmp

00002e7c <_ZN14GSM3SMSServiceC1Eb>:
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	13 82       	std	Z+3, r1	; 0x03
    2e80:	12 82       	std	Z+2, r1	; 0x02
    2e82:	88 ee       	ldi	r24, 0xE8	; 232
    2e84:	93 e0       	ldi	r25, 0x03	; 3
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	84 83       	std	Z+4, r24	; 0x04
    2e8c:	95 83       	std	Z+5, r25	; 0x05
    2e8e:	a6 83       	std	Z+6, r26	; 0x06
    2e90:	b7 83       	std	Z+7, r27	; 0x07
    2e92:	8d e6       	ldi	r24, 0x6D	; 109
    2e94:	92 e0       	ldi	r25, 0x02	; 2
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
    2e9a:	66 23       	and	r22, r22
    2e9c:	19 f0       	breq	.+6      	; 0x2ea4 <_ZN14GSM3SMSServiceC1Eb+0x28>
    2e9e:	84 85       	ldd	r24, Z+12	; 0x0c
    2ea0:	81 60       	ori	r24, 0x01	; 1
    2ea2:	84 87       	std	Z+12, r24	; 0x0c
    2ea4:	08 95       	ret

00002ea6 <_ZN14GSM3SMSService5readyEv>:
    2ea6:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2eaa:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	ed 91       	ld	r30, X+
    2eb2:	fc 91       	ld	r31, X
    2eb4:	00 88       	ldd	r0, Z+16	; 0x10
    2eb6:	f1 89       	ldd	r31, Z+17	; 0x11
    2eb8:	e0 2d       	mov	r30, r0
    2eba:	09 94       	ijmp

00002ebc <_ZN14GSM3SMSService12remoteNumberEPci>:
    2ebc:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2ec0:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	ed 91       	ld	r30, X+
    2ec8:	fc 91       	ld	r31, X
    2eca:	04 84       	ldd	r0, Z+12	; 0x0c
    2ecc:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ece:	e0 2d       	mov	r30, r0
    2ed0:	09 94       	ijmp

00002ed2 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi>:
    2ed2:	cf 92       	push	r12
    2ed4:	df 92       	push	r13
    2ed6:	ef 92       	push	r14
    2ed8:	ff 92       	push	r15
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	fc 01       	movw	r30, r24
    2ee0:	24 85       	ldd	r18, Z+12	; 0x0c
    2ee2:	20 ff       	sbrs	r18, 0
    2ee4:	1e c0       	rjmp	.+60     	; 0x2f22 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi+0x50>
    2ee6:	ec 01       	movw	r28, r24
    2ee8:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
    2eec:	6b 01       	movw	r12, r22
    2eee:	7c 01       	movw	r14, r24
    2ef0:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8c 19       	sub	r24, r12
    2efa:	9d 09       	sbc	r25, r13
    2efc:	ae 09       	sbc	r26, r14
    2efe:	bf 09       	sbc	r27, r15
    2f00:	80 31       	cpi	r24, 0x10	; 16
    2f02:	97 42       	sbci	r25, 0x27	; 39
    2f04:	a1 05       	cpc	r26, r1
    2f06:	b1 05       	cpc	r27, r1
    2f08:	a0 f4       	brcc	.+40     	; 0x2f32 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi+0x60>
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN14GSM3SMSService5readyEv>
    2f10:	89 2b       	or	r24, r25
    2f12:	79 f4       	brne	.+30     	; 0x2f32 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi+0x60>
    2f14:	64 e6       	ldi	r22, 0x64	; 100
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    2f20:	e7 cf       	rjmp	.-50     	; 0x2ef0 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi+0x1e>
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <_ZN14GSM3SMSService5readyEv>
    2f32:	ce 01       	movw	r24, r28
    2f34:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN14GSM3SMSService5readyEv>
    2f38:	21 e0       	ldi	r18, 0x01	; 1
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	11 f0       	breq	.+4      	; 0x2f44 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi+0x72>
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	c9 01       	movw	r24, r18
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	08 95       	ret

00002f54 <_ZN14GSM3SMSService5flushEv>:
	theGSM3SMSProvider->writeSMS(c);
	return 1;
}

void GSM3SMSService::flush()
{		
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	ec 01       	movw	r28, r24
	theGSM3SMSProvider->flushSMS();
    2f5a:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2f5e:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2f62:	dc 01       	movw	r26, r24
    2f64:	ed 91       	ld	r30, X+
    2f66:	fc 91       	ld	r31, X
    2f68:	02 84       	ldd	r0, Z+10	; 0x0a
    2f6a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f6c:	e0 2d       	mov	r30, r0
    2f6e:	09 95       	icall
	waitForAnswerIfNeeded(1);
    2f70:	61 e0       	ldi	r22, 0x01	; 1
    2f72:	70 e0       	ldi	r23, 0x00	; 0
    2f74:	ce 01       	movw	r24, r28
};
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
}

void GSM3SMSService::flush()
{		
	theGSM3SMSProvider->flushSMS();
	waitForAnswerIfNeeded(1);
    2f7a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi>

00002f7e <_ZN14GSM3SMSService9availableEv>:
};

int GSM3SMSService::available()
{
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	ec 01       	movw	r28, r24
	return waitForAnswerIfNeeded(theGSM3SMSProvider->availableSMS());
    2f84:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <theGSM3SMSProvider>
    2f88:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <theGSM3SMSProvider+0x1>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	ed 91       	ld	r30, X+
    2f90:	fc 91       	ld	r31, X
    2f92:	06 80       	ldd	r0, Z+6	; 0x06
    2f94:	f7 81       	ldd	r31, Z+7	; 0x07
    2f96:	e0 2d       	mov	r30, r0
    2f98:	09 95       	icall
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	ce 01       	movw	r24, r28
};
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
	waitForAnswerIfNeeded(1);
};

int GSM3SMSService::available()
{
	return waitForAnswerIfNeeded(theGSM3SMSProvider->availableSMS());
    2fa2:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <_ZN14GSM3SMSService21waitForAnswerIfNeededEi>

00002fa6 <_GLOBAL__sub_I_theShieldV1SMSProvider>:
		else
			return 0;
	}
	// If not synchronous just kick ahead the coming result
	return ready();
}
    2fa6:	0f 93       	push	r16
    2fa8:	00 e0       	ldi	r16, 0x00	; 0
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	60 e0       	ldi	r22, 0x00	; 0
    2fb0:	8f e4       	ldi	r24, 0x4F	; 79
    2fb2:	94 e0       	ldi	r25, 0x04	; 4
    2fb4:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
#include <GSM3MobileNetworkProvider.h>
#include <Arduino.h>

// While there is only a shield (ShieldV1) we will include it by default
#include <GSM3ShieldV1SMSProvider.h>
GSM3ShieldV1SMSProvider theShieldV1SMSProvider;
    2fb8:	85 e4       	ldi	r24, 0x45	; 69
    2fba:	94 e0       	ldi	r25, 0x04	; 4
		else
			return 0;
	}
	// If not synchronous just kick ahead the coming result
	return ready();
}
    2fbc:	0f 91       	pop	r16
#include <GSM3MobileNetworkProvider.h>
#include <Arduino.h>

// While there is only a shield (ShieldV1) we will include it by default
#include <GSM3ShieldV1SMSProvider.h>
GSM3ShieldV1SMSProvider theShieldV1SMSProvider;
    2fbe:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <_ZN23GSM3ShieldV1SMSProviderC1Ev>

00002fc2 <_ZN14GSM3SoftSerial14spaceAvailableEv>:

uint8_t GSM3SoftSerial::rx_pin_read()
{
  // Digital port manipulation
  return *_receivePortRegister & _receiveBitMask;
}
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	ed 91       	ld	r30, X+
    2fc6:	fc 91       	ld	r31, X
    2fc8:	02 80       	ldd	r0, Z+2	; 0x02
    2fca:	f3 81       	ldd	r31, Z+3	; 0x03
    2fcc:	e0 2d       	mov	r30, r0
    2fce:	61 e1       	ldi	r22, 0x11	; 17
    2fd0:	09 94       	ijmp

00002fd2 <_ZN14GSM3SoftSerial5writeEh>:
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	20 89       	ldd	r18, Z+16	; 0x10
    2fda:	31 89       	ldd	r19, Z+17	; 0x11
    2fdc:	23 2b       	or	r18, r19
    2fde:	51 f1       	breq	.+84     	; 0x3034 <_ZN14GSM3SoftSerial5writeEh+0x62>
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	01 90       	ld	r0, Z+
    2fe4:	f0 81       	ld	r31, Z
    2fe6:	e0 2d       	mov	r30, r0
    2fe8:	02 80       	ldd	r0, Z+2	; 0x02
    2fea:	f3 81       	ldd	r31, Z+3	; 0x03
    2fec:	e0 2d       	mov	r30, r0
    2fee:	61 31       	cpi	r22, 0x11	; 17
    2ff0:	49 f4       	brne	.+18     	; 0x3004 <_ZN14GSM3SoftSerial5writeEh+0x32>
    2ff2:	67 e7       	ldi	r22, 0x77	; 119
    2ff4:	09 95       	icall
    2ff6:	e8 81       	ld	r30, Y
    2ff8:	f9 81       	ldd	r31, Y+1	; 0x01
    2ffa:	02 80       	ldd	r0, Z+2	; 0x02
    2ffc:	f3 81       	ldd	r31, Z+3	; 0x03
    2ffe:	e0 2d       	mov	r30, r0
    3000:	6e ee       	ldi	r22, 0xEE	; 238
    3002:	14 c0       	rjmp	.+40     	; 0x302c <_ZN14GSM3SoftSerial5writeEh+0x5a>
    3004:	63 31       	cpi	r22, 0x13	; 19
    3006:	49 f4       	brne	.+18     	; 0x301a <_ZN14GSM3SoftSerial5writeEh+0x48>
    3008:	67 e7       	ldi	r22, 0x77	; 119
    300a:	09 95       	icall
    300c:	e8 81       	ld	r30, Y
    300e:	f9 81       	ldd	r31, Y+1	; 0x01
    3010:	02 80       	ldd	r0, Z+2	; 0x02
    3012:	f3 81       	ldd	r31, Z+3	; 0x03
    3014:	e0 2d       	mov	r30, r0
    3016:	6c ee       	ldi	r22, 0xEC	; 236
    3018:	09 c0       	rjmp	.+18     	; 0x302c <_ZN14GSM3SoftSerial5writeEh+0x5a>
    301a:	67 37       	cpi	r22, 0x77	; 119
    301c:	41 f4       	brne	.+16     	; 0x302e <_ZN14GSM3SoftSerial5writeEh+0x5c>
    301e:	09 95       	icall
    3020:	e8 81       	ld	r30, Y
    3022:	f9 81       	ldd	r31, Y+1	; 0x01
    3024:	02 80       	ldd	r0, Z+2	; 0x02
    3026:	f3 81       	ldd	r31, Z+3	; 0x03
    3028:	e0 2d       	mov	r30, r0
    302a:	68 e8       	ldi	r22, 0x88	; 136
    302c:	ce 01       	movw	r24, r28
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	09 94       	ijmp
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	08 95       	ret

0000303e <_ZN14GSM3SoftSerial12tx_pin_writeEh.part.1>:
    303e:	dc 01       	movw	r26, r24
    3040:	16 96       	adiw	r26, 0x06	; 6
    3042:	ed 91       	ld	r30, X+
    3044:	fc 91       	ld	r31, X
    3046:	17 97       	sbiw	r26, 0x07	; 7
    3048:	90 81       	ld	r25, Z
    304a:	15 96       	adiw	r26, 0x05	; 5
    304c:	8c 91       	ld	r24, X
    304e:	80 95       	com	r24
    3050:	89 23       	and	r24, r25
    3052:	80 83       	st	Z, r24
    3054:	08 95       	ret

00003056 <_ZN14GSM3SoftSerial5closeEv>:
    3056:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZN14GSM3SoftSerial13_activeObjectE+0x1>
    305a:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZN14GSM3SoftSerial13_activeObjectE>
    305e:	08 95       	ret

00003060 <_ZN14GSM3SoftSerial10tunedDelayEj>:
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	2f ef       	ldi	r18, 0xFF	; 255
    3066:	8f 3f       	cpi	r24, 0xFF	; 255
    3068:	92 07       	cpc	r25, r18
    306a:	d9 f7       	brne	.-10     	; 0x3062 <_ZN14GSM3SoftSerial10tunedDelayEj+0x2>
    306c:	08 95       	ret

0000306e <_ZN14GSM3SoftSerial5beginEl>:
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	ec 01       	movw	r28, r24
    307c:	19 8a       	std	Y+17, r1	; 0x11
    307e:	18 8a       	std	Y+16, r1	; 0x10
    3080:	1f 86       	std	Y+15, r1	; 0x0f
    3082:	1e 86       	std	Y+14, r1	; 0x0e
    3084:	1d 86       	std	Y+13, r1	; 0x0d
    3086:	1c 86       	std	Y+12, r1	; 0x0c
    3088:	84 e5       	ldi	r24, 0x54	; 84
    308a:	92 e0       	ldi	r25, 0x02	; 2
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	fc 01       	movw	r30, r24
    3092:	c5 90       	lpm	r12, Z+
    3094:	d5 90       	lpm	r13, Z+
    3096:	e5 90       	lpm	r14, Z+
    3098:	f4 90       	lpm	r15, Z
    309a:	c4 16       	cp	r12, r20
    309c:	d5 06       	cpc	r13, r21
    309e:	e6 06       	cpc	r14, r22
    30a0:	f7 06       	cpc	r15, r23
    30a2:	19 f5       	brne	.+70     	; 0x30ea <_ZN14GSM3SoftSerial5beginEl+0x7c>
    30a4:	4c e0       	ldi	r20, 0x0C	; 12
    30a6:	42 9f       	mul	r20, r18
    30a8:	c0 01       	movw	r24, r0
    30aa:	43 9f       	mul	r20, r19
    30ac:	90 0d       	add	r25, r0
    30ae:	11 24       	eor	r1, r1
    30b0:	fc 01       	movw	r30, r24
    30b2:	e8 5a       	subi	r30, 0xA8	; 168
    30b4:	fd 4f       	sbci	r31, 0xFD	; 253
    30b6:	25 91       	lpm	r18, Z+
    30b8:	34 91       	lpm	r19, Z
    30ba:	3b 87       	std	Y+11, r19	; 0x0b
    30bc:	2a 87       	std	Y+10, r18	; 0x0a
    30be:	fc 01       	movw	r30, r24
    30c0:	e6 5a       	subi	r30, 0xA6	; 166
    30c2:	fd 4f       	sbci	r31, 0xFD	; 253
    30c4:	25 91       	lpm	r18, Z+
    30c6:	34 91       	lpm	r19, Z
    30c8:	3d 87       	std	Y+13, r19	; 0x0d
    30ca:	2c 87       	std	Y+12, r18	; 0x0c
    30cc:	fc 01       	movw	r30, r24
    30ce:	e4 5a       	subi	r30, 0xA4	; 164
    30d0:	fd 4f       	sbci	r31, 0xFD	; 253
    30d2:	25 91       	lpm	r18, Z+
    30d4:	34 91       	lpm	r19, Z
    30d6:	3f 87       	std	Y+15, r19	; 0x0f
    30d8:	2e 87       	std	Y+14, r18	; 0x0e
    30da:	fc 01       	movw	r30, r24
    30dc:	e2 5a       	subi	r30, 0xA2	; 162
    30de:	fd 4f       	sbci	r31, 0xFD	; 253
    30e0:	85 91       	lpm	r24, Z+
    30e2:	94 91       	lpm	r25, Z
    30e4:	99 8b       	std	Y+17, r25	; 0x11
    30e6:	88 8b       	std	Y+16, r24	; 0x10
    30e8:	09 c0       	rjmp	.+18     	; 0x30fc <_ZN14GSM3SoftSerial5beginEl+0x8e>
    30ea:	2f 5f       	subi	r18, 0xFF	; 255
    30ec:	3f 4f       	sbci	r19, 0xFF	; 255
    30ee:	0c 96       	adiw	r24, 0x0c	; 12
    30f0:	2c 30       	cpi	r18, 0x0C	; 12
    30f2:	31 05       	cpc	r19, r1
    30f4:	09 f0       	breq	.+2      	; 0x30f8 <_ZN14GSM3SoftSerial5beginEl+0x8a>
    30f6:	cc cf       	rjmp	.-104    	; 0x3090 <_ZN14GSM3SoftSerial5beginEl+0x22>
    30f8:	1b 86       	std	Y+11, r1	; 0x0b
    30fa:	1a 86       	std	Y+10, r1	; 0x0a
    30fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    30fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3100:	89 2b       	or	r24, r25
    3102:	71 f0       	breq	.+28     	; 0x3120 <_ZN14GSM3SoftSerial5beginEl+0xb2>
    3104:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    3108:	84 60       	ori	r24, 0x04	; 4
    310a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    310e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    3112:	84 60       	ori	r24, 0x04	; 4
    3114:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    3118:	88 89       	ldd	r24, Y+16	; 0x10
    311a:	99 89       	ldd	r25, Y+17	; 0x11
    311c:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
    3120:	d0 93 56 04 	sts	0x0456, r29	; 0x800456 <_ZN14GSM3SoftSerial13_activeObjectE+0x1>
    3124:	c0 93 55 04 	sts	0x0455, r28	; 0x800455 <_ZN14GSM3SoftSerial13_activeObjectE>
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	ff 90       	pop	r15
    312e:	ef 90       	pop	r14
    3130:	df 90       	pop	r13
    3132:	cf 90       	pop	r12
    3134:	08 95       	ret

00003136 <_ZN14GSM3SoftSerial12tx_pin_writeEh>:
    3136:	61 11       	cpse	r22, r1
    3138:	02 c0       	rjmp	.+4      	; 0x313e <_ZN14GSM3SoftSerial12tx_pin_writeEh+0x8>
    313a:	0c 94 1f 18 	jmp	0x303e	; 0x303e <_ZN14GSM3SoftSerial12tx_pin_writeEh.part.1>
    313e:	dc 01       	movw	r26, r24
    3140:	16 96       	adiw	r26, 0x06	; 6
    3142:	ed 91       	ld	r30, X+
    3144:	fc 91       	ld	r31, X
    3146:	17 97       	sbiw	r26, 0x07	; 7
    3148:	20 81       	ld	r18, Z
    314a:	15 96       	adiw	r26, 0x05	; 5
    314c:	8c 91       	ld	r24, X
    314e:	82 2b       	or	r24, r18
    3150:	80 83       	st	Z, r24
    3152:	08 95       	ret

00003154 <_ZN14GSM3SoftSerial10finalWriteEh>:
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	ec 01       	movw	r28, r24
    3164:	d6 2e       	mov	r13, r22
    3166:	ef b6       	in	r14, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN14GSM3SoftSerial12tx_pin_writeEh.part.1>
    316e:	88 89       	ldd	r24, Y+16	; 0x10
    3170:	99 89       	ldd	r25, Y+17	; 0x11
    3172:	05 96       	adiw	r24, 0x05	; 5
    3174:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
    3178:	08 e0       	ldi	r16, 0x08	; 8
    317a:	10 e0       	ldi	r17, 0x00	; 0
    317c:	ff 24       	eor	r15, r15
    317e:	f3 94       	inc	r15
    3180:	8f 2d       	mov	r24, r15
    3182:	8d 21       	and	r24, r13
    3184:	29 f0       	breq	.+10     	; 0x3190 <_ZN14GSM3SoftSerial10finalWriteEh+0x3c>
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	ce 01       	movw	r24, r28
    318a:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN14GSM3SoftSerial12tx_pin_writeEh>
    318e:	03 c0       	rjmp	.+6      	; 0x3196 <_ZN14GSM3SoftSerial10finalWriteEh+0x42>
    3190:	ce 01       	movw	r24, r28
    3192:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN14GSM3SoftSerial12tx_pin_writeEh.part.1>
    3196:	88 89       	ldd	r24, Y+16	; 0x10
    3198:	99 89       	ldd	r25, Y+17	; 0x11
    319a:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
    319e:	ff 0c       	add	r15, r15
    31a0:	01 50       	subi	r16, 0x01	; 1
    31a2:	11 09       	sbc	r17, r1
    31a4:	69 f7       	brne	.-38     	; 0x3180 <_ZN14GSM3SoftSerial10finalWriteEh+0x2c>
    31a6:	61 e0       	ldi	r22, 0x01	; 1
    31a8:	ce 01       	movw	r24, r28
    31aa:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN14GSM3SoftSerial12tx_pin_writeEh>
    31ae:	ef be       	out	0x3f, r14	; 63
    31b0:	88 89       	ldd	r24, Y+16	; 0x10
    31b2:	99 89       	ldd	r25, Y+17	; 0x11
    31b4:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	1f 91       	pop	r17
    31c2:	0f 91       	pop	r16
    31c4:	ff 90       	pop	r15
    31c6:	ef 90       	pop	r14
    31c8:	df 90       	pop	r13
    31ca:	08 95       	ret

000031cc <_ZN14GSM3SoftSerial5setTXEv>:
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	ec 01       	movw	r28, r24
    31d2:	61 e0       	ldi	r22, 0x01	; 1
    31d4:	83 e0       	ldi	r24, 0x03	; 3
    31d6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
    31da:	61 e0       	ldi	r22, 0x01	; 1
    31dc:	83 e0       	ldi	r24, 0x03	; 3
    31de:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
    31e2:	eb ef       	ldi	r30, 0xFB	; 251
    31e4:	f2 e0       	ldi	r31, 0x02	; 2
    31e6:	e4 91       	lpm	r30, Z
    31e8:	ed 83       	std	Y+5, r30	; 0x05
    31ea:	ef e0       	ldi	r30, 0x0F	; 15
    31ec:	f3 e0       	ldi	r31, 0x03	; 3
    31ee:	e4 91       	lpm	r30, Z
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	ee 0f       	add	r30, r30
    31f4:	ff 1f       	adc	r31, r31
    31f6:	e6 5d       	subi	r30, 0xD6	; 214
    31f8:	fc 4f       	sbci	r31, 0xFC	; 252
    31fa:	85 91       	lpm	r24, Z+
    31fc:	94 91       	lpm	r25, Z
    31fe:	9f 83       	std	Y+7, r25	; 0x07
    3200:	8e 83       	std	Y+6, r24	; 0x06
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	08 95       	ret

00003208 <_ZN14GSM3SoftSerial5setRXEv>:
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	ec 01       	movw	r28, r24
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	82 e0       	ldi	r24, 0x02	; 2
    321a:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
    321e:	ea ef       	ldi	r30, 0xFA	; 250
    3220:	f2 e0       	ldi	r31, 0x02	; 2
    3222:	e4 91       	lpm	r30, Z
    3224:	ea 83       	std	Y+2, r30	; 0x02
    3226:	ee e0       	ldi	r30, 0x0E	; 14
    3228:	f3 e0       	ldi	r31, 0x03	; 3
    322a:	e4 91       	lpm	r30, Z
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	ee 0f       	add	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	e0 5e       	subi	r30, 0xE0	; 224
    3234:	fc 4f       	sbci	r31, 0xFC	; 252
    3236:	85 91       	lpm	r24, Z+
    3238:	94 91       	lpm	r25, Z
    323a:	9c 83       	std	Y+4, r25	; 0x04
    323c:	8b 83       	std	Y+3, r24	; 0x03
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	08 95       	ret

00003244 <_ZN14GSM3SoftSerialC1Ev>:
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	ec 01       	movw	r28, r24
    324a:	8d e7       	ldi	r24, 0x7D	; 125
    324c:	92 e0       	ldi	r25, 0x02	; 2
    324e:	99 83       	std	Y+1, r25	; 0x01
    3250:	88 83       	st	Y, r24
    3252:	1b 86       	std	Y+11, r1	; 0x0b
    3254:	1a 86       	std	Y+10, r1	; 0x0a
    3256:	1d 86       	std	Y+13, r1	; 0x0d
    3258:	1c 86       	std	Y+12, r1	; 0x0c
    325a:	1f 86       	std	Y+15, r1	; 0x0f
    325c:	1e 86       	std	Y+14, r1	; 0x0e
    325e:	19 8a       	std	Y+17, r1	; 0x11
    3260:	18 8a       	std	Y+16, r1	; 0x10
    3262:	be 01       	movw	r22, r28
    3264:	ce 01       	movw	r24, r28
    3266:	43 96       	adiw	r24, 0x13	; 19
    3268:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN18GSM3CircularBufferC1EP25GSM3CircularBufferManager>
    326c:	ce 01       	movw	r24, r28
    326e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14GSM3SoftSerial5setTXEv>
    3272:	ce 01       	movw	r24, r28
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	0c 94 04 19 	jmp	0x3208	; 0x3208 <_ZN14GSM3SoftSerial5setRXEv>

0000327c <_ZN14GSM3SoftSerial12keepThisCharEPh>:
    ::);
#endif
}

bool GSM3SoftSerial::keepThisChar(uint8_t* c)
{
    327c:	fc 01       	movw	r30, r24
    327e:	db 01       	movw	r26, r22
	// Horrible things for Quectel XON/XOFF
	// 255 is the answer to a XOFF
	// It comes just once
	if((*c==255)&&(_flags & _GSMSOFTSERIALFLAGS_SENTXOFF_))
    3280:	8c 91       	ld	r24, X
    3282:	92 89       	ldd	r25, Z+18	; 0x12
    3284:	8f 3f       	cpi	r24, 0xFF	; 255
    3286:	29 f4       	brne	.+10     	; 0x3292 <_ZN14GSM3SoftSerial12keepThisCharEPh+0x16>
    3288:	91 ff       	sbrs	r25, 1
    328a:	09 c0       	rjmp	.+18     	; 0x329e <_ZN14GSM3SoftSerial12keepThisCharEPh+0x22>
	{
		_flags ^= _GSMSOFTSERIALFLAGS_SENTXOFF_;
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	98 27       	eor	r25, r24
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <_ZN14GSM3SoftSerial12keepThisCharEPh+0x1c>
		return false;
	}

	// 0x77, w, is the escape character
	if(*c==0x77)
    3292:	87 37       	cpi	r24, 0x77	; 119
    3294:	21 f4       	brne	.+8      	; 0x329e <_ZN14GSM3SoftSerial12keepThisCharEPh+0x22>
	{
		_flags |= _GSMSOFTSERIALFLAGS_ESCAPED_;
    3296:	91 60       	ori	r25, 0x01	; 1
    3298:	92 8b       	std	Z+18, r25	; 0x12
		return false;
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	08 95       	ret
	}
	
	// and these are the escaped codes
	if(_flags & _GSMSOFTSERIALFLAGS_ESCAPED_)
    329e:	90 ff       	sbrs	r25, 0
    32a0:	10 c0       	rjmp	.+32     	; 0x32c2 <_ZN14GSM3SoftSerial12keepThisCharEPh+0x46>
	{
		if(*c==0xEE)
    32a2:	8e 3e       	cpi	r24, 0xEE	; 238
    32a4:	11 f4       	brne	.+4      	; 0x32aa <_ZN14GSM3SoftSerial12keepThisCharEPh+0x2e>
			*c=0x11;
    32a6:	81 e1       	ldi	r24, 0x11	; 17
    32a8:	07 c0       	rjmp	.+14     	; 0x32b8 <_ZN14GSM3SoftSerial12keepThisCharEPh+0x3c>
		else if(*c==0xEC)
    32aa:	8c 3e       	cpi	r24, 0xEC	; 236
    32ac:	11 f4       	brne	.+4      	; 0x32b2 <_ZN14GSM3SoftSerial12keepThisCharEPh+0x36>
			*c=0x13;
    32ae:	83 e1       	ldi	r24, 0x13	; 19
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <_ZN14GSM3SoftSerial12keepThisCharEPh+0x3c>
		else if(*c==0x88)
    32b2:	88 38       	cpi	r24, 0x88	; 136
    32b4:	11 f4       	brne	.+4      	; 0x32ba <_ZN14GSM3SoftSerial12keepThisCharEPh+0x3e>
			*c=0x77;
    32b6:	87 e7       	ldi	r24, 0x77	; 119
    32b8:	8c 93       	st	X, r24
			
		_flags ^= _GSMSOFTSERIALFLAGS_ESCAPED_;
    32ba:	92 89       	ldd	r25, Z+18	; 0x12
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	89 27       	eor	r24, r25
    32c0:	82 8b       	std	Z+18, r24	; 0x12
		return true;
	}
	
	return true;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
}
    32c4:	08 95       	ret

000032c6 <_ZN14GSM3SoftSerial4recvEv>:
  // Digital port manipulation
  return *_receivePortRegister & _receiveBitMask;
}

void GSM3SoftSerial::recv()
{
    32c6:	7f 92       	push	r7
    32c8:	8f 92       	push	r8
    32ca:	9f 92       	push	r9
    32cc:	af 92       	push	r10
    32ce:	bf 92       	push	r11
    32d0:	cf 92       	push	r12
    32d2:	df 92       	push	r13
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	1f 92       	push	r1
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    "push r21 \n\t"
    "push r22 \n\t"
    "push r23 \n\t"
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
    32e6:	2f 93       	push	r18
    32e8:	3f 93       	push	r19
    32ea:	4f 93       	push	r20
    32ec:	5f 93       	push	r21
    32ee:	6f 93       	push	r22
    32f0:	7f 93       	push	r23
    32f2:	af 93       	push	r26
    32f4:	bf 93       	push	r27
#endif  

  bool firstByte=true;
  byte thisHead;
  
  uint8_t d = 0;
    32f6:	19 82       	std	Y+1, r1	; 0x01
}

uint8_t GSM3SoftSerial::rx_pin_read()
{
  // Digital port manipulation
  return *_receivePortRegister & _receiveBitMask;
    32f8:	dc 01       	movw	r26, r24
    32fa:	13 96       	adiw	r26, 0x03	; 3
    32fc:	ed 91       	ld	r30, X+
    32fe:	fc 91       	ld	r31, X
    3300:	14 97       	sbiw	r26, 0x04	; 4
    3302:	30 81       	ld	r19, Z
    3304:	12 96       	adiw	r26, 0x02	; 2
    3306:	2c 91       	ld	r18, X
    3308:	23 23       	and	r18, r19
  int i;
  byte oldTail;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (!rx_pin_read())
    330a:	09 f0       	breq	.+2      	; 0x330e <_ZN14GSM3SoftSerial4recvEv+0x48>
    330c:	8b c0       	rjmp	.+278    	; 0x3424 <_ZN14GSM3SoftSerial4recvEv+0x15e>
    330e:	8c 01       	movw	r16, r24
    3310:	b1 2c       	mov	r11, r1
    3312:	77 24       	eor	r7, r7
    3314:	73 94       	inc	r7
	{
		oldTail=cb.getTail();
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(_rx_delay_centering);
		
		fullbuffer=(cb.availableBytes()<6);
    3316:	6c 01       	movw	r12, r24
    3318:	b3 e1       	ldi	r27, 0x13	; 19
    331a:	cb 0e       	add	r12, r27
    331c:	d1 1c       	adc	r13, r1
		void flush();
		
		/** Get tail
			@return tail
		 */
		inline byte getTail(){return tail;};
    331e:	f8 01       	movw	r30, r16
    3320:	84 89       	ldd	r24, Z+20	; 0x14
  {
	do
	{
		oldTail=cb.getTail();
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(_rx_delay_centering);
    3322:	82 85       	ldd	r24, Z+10	; 0x0a
    3324:	93 85       	ldd	r25, Z+11	; 0x0b
    3326:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
		// TO-DO.Check if this formule runs too at the buffer limit
		
		/** Get available bytes in circular buffer
			@return available bytes
		 */
		inline byte availableBytes(){ return ((head-(tail+1))&__BUFFERMASK__);};
    332a:	d8 01       	movw	r26, r16
    332c:	53 96       	adiw	r26, 0x13	; 19
    332e:	9c 91       	ld	r25, X
    3330:	53 97       	sbiw	r26, 0x13	; 19
    3332:	54 96       	adiw	r26, 0x14	; 20
    3334:	8c 91       	ld	r24, X
    3336:	91 50       	subi	r25, 0x01	; 1
    3338:	98 1b       	sub	r25, r24
    333a:	9f 77       	andi	r25, 0x7F	; 127
		
		fullbuffer=(cb.availableBytes()<6);
    333c:	ee 24       	eor	r14, r14
    333e:	e3 94       	inc	r14
    3340:	96 30       	cpi	r25, 0x06	; 6
    3342:	10 f0       	brcs	.+4      	; 0x3348 <_ZN14GSM3SoftSerial4recvEv+0x82>
    3344:	e1 2c       	mov	r14, r1
    3346:	05 c0       	rjmp	.+10     	; 0x3352 <_ZN14GSM3SoftSerial4recvEv+0x8c>

		
		if(fullbuffer&&(!capturado_fullbuffer))
    3348:	b1 10       	cpse	r11, r1
    334a:	03 c0       	rjmp	.+6      	; 0x3352 <_ZN14GSM3SoftSerial4recvEv+0x8c>
    334c:	c8 01       	movw	r24, r16
    334e:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN14GSM3SoftSerial12tx_pin_writeEh.part.1>
  int i;
  byte oldTail;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (!rx_pin_read())
    3352:	98 e0       	ldi	r25, 0x08	; 8
    3354:	89 2e       	mov	r8, r25
    3356:	91 2c       	mov	r9, r1
    3358:	ff 24       	eor	r15, r15
    335a:	f3 94       	inc	r15

		
		// Read each of the 8 bits
		for (uint8_t i=0x1; i; i <<= 1)
		{
			tunedDelay(_rx_delay_intrabit);
    335c:	f8 01       	movw	r30, r16
    335e:	84 85       	ldd	r24, Z+12	; 0x0c
    3360:	95 85       	ldd	r25, Z+13	; 0x0d
    3362:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
}

uint8_t GSM3SoftSerial::rx_pin_read()
{
  // Digital port manipulation
  return *_receivePortRegister & _receiveBitMask;
    3366:	d8 01       	movw	r26, r16
    3368:	13 96       	adiw	r26, 0x03	; 3
    336a:	ed 91       	ld	r30, X+
    336c:	fc 91       	ld	r31, X
    336e:	14 97       	sbiw	r26, 0x04	; 4
    3370:	90 81       	ld	r25, Z
    3372:	12 96       	adiw	r26, 0x02	; 2
    3374:	8c 91       	ld	r24, X
    3376:	98 23       	and	r25, r24
    3378:	89 81       	ldd	r24, Y+1	; 0x01
		// Read each of the 8 bits
		for (uint8_t i=0x1; i; i <<= 1)
		{
			tunedDelay(_rx_delay_intrabit);
			uint8_t noti = ~i;
			if (rx_pin_read())
    337a:	99 23       	and	r25, r25
    337c:	11 f0       	breq	.+4      	; 0x3382 <_ZN14GSM3SoftSerial4recvEv+0xbc>
				d |= i;
    337e:	8f 29       	or	r24, r15
    3380:	03 c0       	rjmp	.+6      	; 0x3388 <_ZN14GSM3SoftSerial4recvEv+0xc2>
		
		// Read each of the 8 bits
		for (uint8_t i=0x1; i; i <<= 1)
		{
			tunedDelay(_rx_delay_intrabit);
			uint8_t noti = ~i;
    3382:	9f 2d       	mov	r25, r15
    3384:	90 95       	com	r25
			if (rx_pin_read())
				d |= i;
			else // else clause added to ensure function timing is ~balanced
				d &= noti;
    3386:	89 23       	and	r24, r25
    3388:	89 83       	std	Y+1, r24	; 0x01
			
			if(fullbuffer&&(!capturado_fullbuffer))
    338a:	ee 20       	and	r14, r14
    338c:	69 f0       	breq	.+26     	; 0x33a8 <_ZN14GSM3SoftSerial4recvEv+0xe2>
    338e:	b1 10       	cpse	r11, r1
    3390:	0b c0       	rjmp	.+22     	; 0x33a8 <_ZN14GSM3SoftSerial4recvEv+0xe2>
			{
			  if((uint8_t)__XOFF__ & i)
    3392:	8f 2d       	mov	r24, r15
    3394:	83 71       	andi	r24, 0x13	; 19
    3396:	29 f0       	breq	.+10     	; 0x33a2 <_ZN14GSM3SoftSerial4recvEv+0xdc>
				tx_pin_write(HIGH);
    3398:	61 e0       	ldi	r22, 0x01	; 1
    339a:	c8 01       	movw	r24, r16
    339c:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN14GSM3SoftSerial12tx_pin_writeEh>
    33a0:	03 c0       	rjmp	.+6      	; 0x33a8 <_ZN14GSM3SoftSerial4recvEv+0xe2>
    33a2:	c8 01       	movw	r24, r16
    33a4:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN14GSM3SoftSerial12tx_pin_writeEh.part.1>
		if(fullbuffer&&(!capturado_fullbuffer))
			tx_pin_write(LOW);

		
		// Read each of the 8 bits
		for (uint8_t i=0x1; i; i <<= 1)
    33a8:	ff 0c       	add	r15, r15
    33aa:	b1 e0       	ldi	r27, 0x01	; 1
    33ac:	8b 1a       	sub	r8, r27
    33ae:	91 08       	sbc	r9, r1
    33b0:	a9 f6       	brne	.-86     	; 0x335c <_ZN14GSM3SoftSerial4recvEv+0x96>
			  else
				tx_pin_write(LOW);
			}
		}

		if(fullbuffer&&(!capturado_fullbuffer))
    33b2:	ee 20       	and	r14, r14
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <_ZN14GSM3SoftSerial4recvEv+0xf2>
    33b6:	59 c0       	rjmp	.+178    	; 0x346a <_ZN14GSM3SoftSerial4recvEv+0x1a4>
    33b8:	b1 10       	cpse	r11, r1
    33ba:	09 c0       	rjmp	.+18     	; 0x33ce <_ZN14GSM3SoftSerial4recvEv+0x108>
		{
			tunedDelay(_rx_delay_intrabit);
    33bc:	f8 01       	movw	r30, r16
    33be:	84 85       	ldd	r24, Z+12	; 0x0c
    33c0:	95 85       	ldd	r25, Z+13	; 0x0d
    33c2:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
			tx_pin_write(HIGH);	
    33c6:	61 e0       	ldi	r22, 0x01	; 1
    33c8:	c8 01       	movw	r24, r16
    33ca:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN14GSM3SoftSerial12tx_pin_writeEh>
		
		// So, we know the buffer is full, and we have sent a XOFF
		if (fullbuffer) 
		{
			capturado_fullbuffer =1;
			_flags |=_GSMSOFTSERIALFLAGS_SENTXOFF_;
    33ce:	f8 01       	movw	r30, r16
    33d0:	82 89       	ldd	r24, Z+18	; 0x12
    33d2:	82 60       	ori	r24, 0x02	; 2
    33d4:	82 8b       	std	Z+18, r24	; 0x12
		}
		
		// So, we know the buffer is full, and we have sent a XOFF
		if (fullbuffer) 
		{
			capturado_fullbuffer =1;
    33d6:	bb 24       	eor	r11, r11
    33d8:	b3 94       	inc	r11


		// skip the stop bit
		if (!fullbuffer) tunedDelay(_rx_delay_stopbit);
		
		if(keepThisChar(&d))
    33da:	be 01       	movw	r22, r28
    33dc:	6f 5f       	subi	r22, 0xFF	; 255
    33de:	7f 4f       	sbci	r23, 0xFF	; 255
    33e0:	c8 01       	movw	r24, r16
    33e2:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN14GSM3SoftSerial12keepThisCharEPh>
    33e6:	81 11       	cpse	r24, r1
    33e8:	34 c0       	rjmp	.+104    	; 0x3452 <_ZN14GSM3SoftSerial4recvEv+0x18c>
		{
			cb.write(d);
			if(firstByte)
			{
				firstByte=false;
    33ea:	82 e3       	ldi	r24, 0x32	; 50
    33ec:	88 2e       	mov	r8, r24
    33ee:	91 2c       	mov	r9, r1
		// This active waiting avoids drifting
		morebytes=false;
		// TO-DO. This PARAGRAPHGUARD is empyric. We should test it for every speed
		for(i=0;i<__PARAGRAPHGUARD__;i++)
		{	
			tunedDelay(1);
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
}

uint8_t GSM3SoftSerial::rx_pin_read()
{
  // Digital port manipulation
  return *_receivePortRegister & _receiveBitMask;
    33f8:	d8 01       	movw	r26, r16
    33fa:	13 96       	adiw	r26, 0x03	; 3
    33fc:	ed 91       	ld	r30, X+
    33fe:	fc 91       	ld	r31, X
    3400:	14 97       	sbiw	r26, 0x04	; 4
    3402:	90 81       	ld	r25, Z
    3404:	12 96       	adiw	r26, 0x02	; 2
    3406:	8c 91       	ld	r24, X
    3408:	89 23       	and	r24, r25
		morebytes=false;
		// TO-DO. This PARAGRAPHGUARD is empyric. We should test it for every speed
		for(i=0;i<__PARAGRAPHGUARD__;i++)
		{	
			tunedDelay(1);
			if(!rx_pin_read())
    340a:	09 f4       	brne	.+2      	; 0x340e <_ZN14GSM3SoftSerial4recvEv+0x148>
    340c:	88 cf       	rjmp	.-240    	; 0x331e <_ZN14GSM3SoftSerial4recvEv+0x58>
    340e:	b1 e0       	ldi	r27, 0x01	; 1
    3410:	8b 1a       	sub	r8, r27
    3412:	91 08       	sbc	r9, r1
		// Caveat: the old fashion would let processor a bit of time between bytes, 
		// that here is lost
		// This active waiting avoids drifting
		morebytes=false;
		// TO-DO. This PARAGRAPHGUARD is empyric. We should test it for every speed
		for(i=0;i<__PARAGRAPHGUARD__;i++)
    3414:	69 f7       	brne	.-38     	; 0x33f0 <_ZN14GSM3SoftSerial4recvEv+0x12a>
		}
	}while(morebytes);
	// If we find a line feed, we are at the end of a paragraph
	// check!
	
	if (fullbuffer)
    3416:	e1 10       	cpse	r14, r1
    3418:	30 c0       	rjmp	.+96     	; 0x347a <_ZN14GSM3SoftSerial4recvEv+0x1b4>
	{
		// And... go handle it!
		if(mgr)
			mgr->manageMsg(thisHead, cb.getTail());
	}
	else if(d==10)
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	8a 30       	cpi	r24, 0x0A	; 10
    341e:	69 f1       	breq	.+90     	; 0x347a <_ZN14GSM3SoftSerial4recvEv+0x1b4>
	{
		// And... go handle it!
		if(mgr)
			mgr->manageMsg(thisHead, cb.getTail());
	}
	else if (d==32)
    3420:	80 32       	cpi	r24, 0x20	; 32
    3422:	59 f1       	breq	.+86     	; 0x347a <_ZN14GSM3SoftSerial4recvEv+0x1b4>
    "pop r22 \n\t"
    "pop r21 \n\t"
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
    3424:	bf 91       	pop	r27
    3426:	af 91       	pop	r26
    3428:	7f 91       	pop	r23
    342a:	6f 91       	pop	r22
    342c:	5f 91       	pop	r21
    342e:	4f 91       	pop	r20
    3430:	3f 91       	pop	r19
    3432:	2f 91       	pop	r18
#endif
}
    3434:	0f 90       	pop	r0
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	cf 90       	pop	r12
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	9f 90       	pop	r9
    344c:	8f 90       	pop	r8
    344e:	7f 90       	pop	r7
    3450:	08 95       	ret
		// skip the stop bit
		if (!fullbuffer) tunedDelay(_rx_delay_stopbit);
		
		if(keepThisChar(&d))
		{
			cb.write(d);
    3452:	69 81       	ldd	r22, Y+1	; 0x01
    3454:	c6 01       	movw	r24, r12
    3456:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN18GSM3CircularBuffer5writeEc>
			if(firstByte)
    345a:	77 20       	and	r7, r7
    345c:	09 f4       	brne	.+2      	; 0x3460 <_ZN14GSM3SoftSerial4recvEv+0x19a>
    345e:	c5 cf       	rjmp	.-118    	; 0x33ea <_ZN14GSM3SoftSerial4recvEv+0x124>
		void flush();
		
		/** Get tail
			@return tail
		 */
		inline byte getTail(){return tail;};
    3460:	d8 01       	movw	r26, r16
    3462:	54 96       	adiw	r26, 0x14	; 20
    3464:	ac 90       	ld	r10, X
			{
				firstByte=false;
    3466:	71 2c       	mov	r7, r1
    3468:	c0 cf       	rjmp	.-128    	; 0x33ea <_ZN14GSM3SoftSerial4recvEv+0x124>
			_flags |=_GSMSOFTSERIALFLAGS_SENTXOFF_;
		}


		// skip the stop bit
		if (!fullbuffer) tunedDelay(_rx_delay_stopbit);
    346a:	d8 01       	movw	r26, r16
    346c:	1e 96       	adiw	r26, 0x0e	; 14
    346e:	8d 91       	ld	r24, X+
    3470:	9c 91       	ld	r25, X
    3472:	1f 97       	sbiw	r26, 0x0f	; 15
    3474:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN14GSM3SoftSerial10tunedDelayEj>
    3478:	b0 cf       	rjmp	.-160    	; 0x33da <_ZN14GSM3SoftSerial4recvEv+0x114>
			mgr->manageMsg(thisHead, cb.getTail());
	}
	else if (d==32)
	{
		// And... go handle it!
		if(mgr)
    347a:	f8 01       	movw	r30, r16
    347c:	80 85       	ldd	r24, Z+8	; 0x08
    347e:	91 85       	ldd	r25, Z+9	; 0x09
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	81 f2       	breq	.-96     	; 0x3424 <_ZN14GSM3SoftSerial4recvEv+0x15e>
    3484:	44 89       	ldd	r20, Z+20	; 0x14
			mgr->manageMsg(thisHead, cb.getTail());
    3486:	dc 01       	movw	r26, r24
    3488:	ed 91       	ld	r30, X+
    348a:	fc 91       	ld	r31, X
    348c:	01 90       	ld	r0, Z+
    348e:	f0 81       	ld	r31, Z
    3490:	e0 2d       	mov	r30, r0
    3492:	6a 2d       	mov	r22, r10
    3494:	09 95       	icall
    3496:	c6 cf       	rjmp	.-116    	; 0x3424 <_ZN14GSM3SoftSerial4recvEv+0x15e>

00003498 <_ZN14GSM3SoftSerial16handle_interruptEv>:
	// attachInterrupt(__RXINT__, GSM3SoftSerial::handle_interrupt, FALLING);
}

void GSM3SoftSerial::handle_interrupt()
{
	if(_activeObject)
    3498:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZN14GSM3SoftSerial13_activeObjectE>
    349c:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_ZN14GSM3SoftSerial13_activeObjectE+0x1>
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	11 f0       	breq	.+4      	; 0x34a8 <_ZN14GSM3SoftSerial16handle_interruptEv+0x10>
		_activeObject->recv();
    34a4:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <_ZN14GSM3SoftSerial4recvEv>
    34a8:	08 95       	ret

000034aa <__vector_3>:
//#define PCINT1_vect _VECTOR(2)
//#undef PCINT1_vect

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    34aa:	1f 92       	push	r1
    34ac:	0f 92       	push	r0
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	0f 92       	push	r0
    34b2:	11 24       	eor	r1, r1
    34b4:	2f 93       	push	r18
    34b6:	3f 93       	push	r19
    34b8:	4f 93       	push	r20
    34ba:	5f 93       	push	r21
    34bc:	6f 93       	push	r22
    34be:	7f 93       	push	r23
    34c0:	8f 93       	push	r24
    34c2:	9f 93       	push	r25
    34c4:	af 93       	push	r26
    34c6:	bf 93       	push	r27
    34c8:	ef 93       	push	r30
    34ca:	ff 93       	push	r31
  GSM3SoftSerial::handle_interrupt();
    34cc:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN14GSM3SoftSerial16handle_interruptEv>
}
    34d0:	ff 91       	pop	r31
    34d2:	ef 91       	pop	r30
    34d4:	bf 91       	pop	r27
    34d6:	af 91       	pop	r26
    34d8:	9f 91       	pop	r25
    34da:	8f 91       	pop	r24
    34dc:	7f 91       	pop	r23
    34de:	6f 91       	pop	r22
    34e0:	5f 91       	pop	r21
    34e2:	4f 91       	pop	r20
    34e4:	3f 91       	pop	r19
    34e6:	2f 91       	pop	r18
    34e8:	0f 90       	pop	r0
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	0f 90       	pop	r0
    34ee:	1f 90       	pop	r1
    34f0:	18 95       	reti

000034f2 <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
    34f2:	1f 92       	push	r1
    34f4:	0f 92       	push	r0
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	0f 92       	push	r0
    34fa:	11 24       	eor	r1, r1
    34fc:	2f 93       	push	r18
    34fe:	3f 93       	push	r19
    3500:	4f 93       	push	r20
    3502:	5f 93       	push	r21
    3504:	6f 93       	push	r22
    3506:	7f 93       	push	r23
    3508:	8f 93       	push	r24
    350a:	9f 93       	push	r25
    350c:	af 93       	push	r26
    350e:	bf 93       	push	r27
    3510:	ef 93       	push	r30
    3512:	ff 93       	push	r31
  GSM3SoftSerial::handle_interrupt();
    3514:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN14GSM3SoftSerial16handle_interruptEv>
}
    3518:	ff 91       	pop	r31
    351a:	ef 91       	pop	r30
    351c:	bf 91       	pop	r27
    351e:	af 91       	pop	r26
    3520:	9f 91       	pop	r25
    3522:	8f 91       	pop	r24
    3524:	7f 91       	pop	r23
    3526:	6f 91       	pop	r22
    3528:	5f 91       	pop	r21
    352a:	4f 91       	pop	r20
    352c:	3f 91       	pop	r19
    352e:	2f 91       	pop	r18
    3530:	0f 90       	pop	r0
    3532:	0f be       	out	0x3f, r0	; 63
    3534:	0f 90       	pop	r0
    3536:	1f 90       	pop	r1
    3538:	18 95       	reti

0000353a <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
    353a:	1f 92       	push	r1
    353c:	0f 92       	push	r0
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	0f 92       	push	r0
    3542:	11 24       	eor	r1, r1
    3544:	2f 93       	push	r18
    3546:	3f 93       	push	r19
    3548:	4f 93       	push	r20
    354a:	5f 93       	push	r21
    354c:	6f 93       	push	r22
    354e:	7f 93       	push	r23
    3550:	8f 93       	push	r24
    3552:	9f 93       	push	r25
    3554:	af 93       	push	r26
    3556:	bf 93       	push	r27
    3558:	ef 93       	push	r30
    355a:	ff 93       	push	r31
  GSM3SoftSerial::handle_interrupt();
    355c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN14GSM3SoftSerial16handle_interruptEv>
}
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	0f 90       	pop	r0
    357e:	1f 90       	pop	r1
    3580:	18 95       	reti

00003582 <_GLOBAL__sub_I_theShieldV1VoiceProvider>:
		else
			return 0;
	}
	// If not synchronous just kick ahead the coming result
	return ready();
}
    3582:	0f 93       	push	r16
    3584:	00 e0       	ldi	r16, 0x00	; 0
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	40 e0       	ldi	r20, 0x00	; 0
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	8e e5       	ldi	r24, 0x5E	; 94
    358e:	94 e0       	ldi	r25, 0x04	; 4
    3590:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
*/
#include <GSM3VoiceCallService.h>
#include <Arduino.h>

#include <GSM3ShieldV1VoiceProvider.h>
GSM3ShieldV1VoiceProvider theShieldV1VoiceProvider;
    3594:	87 e5       	ldi	r24, 0x57	; 87
    3596:	94 e0       	ldi	r25, 0x04	; 4
		else
			return 0;
	}
	// If not synchronous just kick ahead the coming result
	return ready();
}
    3598:	0f 91       	pop	r16
*/
#include <GSM3VoiceCallService.h>
#include <Arduino.h>

#include <GSM3ShieldV1VoiceProvider.h>
GSM3ShieldV1VoiceProvider theShieldV1VoiceProvider;
    359a:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <_ZN25GSM3ShieldV1VoiceProviderC1Ev>

0000359e <_GLOBAL__sub_I_gsmAccess>:
			digitalWrite(relayPin, HIGH);
			Serial.println("RELAY OFF");
		}
	}
	delay(2000);
}
    359e:	0f 93       	push	r16
    35a0:	00 e0       	ldi	r16, 0x00	; 0
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	8f e9       	ldi	r24, 0x9F	; 159
    35aa:	94 e0       	ldi	r25, 0x04	; 4
    35ac:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <_ZN9IPAddressC1Ehhhh>
﻿#include <Arduino.h>
#include <GSM.h>

#define relayPin 12

GSM gsmAccess;
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	8b e9       	ldi	r24, 0x9B	; 155
    35b4:	94 e0       	ldi	r25, 0x04	; 4
    35b6:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZN26GSM3ShieldV1AccessProviderC1Eb>
GSMClient client;
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	8d e8       	ldi	r24, 0x8D	; 141
    35be:	94 e0       	ldi	r25, 0x04	; 4
    35c0:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN23GSM3MobileClientServiceC1Eb>
#include <GSM3MobileDataNetworkProvider.h>
#include <GSM3ShieldV1BaseProvider.h>
#include <GSM3ShieldV1ModemCore.h>
#include <IPAddress.h>

class GSM3ShieldV1DataNetworkProvider : public GSM3MobileDataNetworkProvider, public GSM3ShieldV1BaseProvider
    35c4:	e5 e8       	ldi	r30, 0x85	; 133
    35c6:	f4 e0       	ldi	r31, 0x04	; 4
    35c8:	84 eb       	ldi	r24, 0xB4	; 180
    35ca:	91 e0       	ldi	r25, 0x01	; 1
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
    35d0:	8e eb       	ldi	r24, 0xBE	; 190
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	93 83       	std	Z+3, r25	; 0x03
    35d6:	82 83       	std	Z+2, r24	; 0x02
GPRS gprs;
GSM_SMS sms;
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    35da:	88 e7       	ldi	r24, 0x78	; 120
    35dc:	94 e0       	ldi	r25, 0x04	; 4
			digitalWrite(relayPin, HIGH);
			Serial.println("RELAY OFF");
		}
	}
	delay(2000);
}
    35de:	0f 91       	pop	r16
#define relayPin 12

GSM gsmAccess;
GSMClient client;
GPRS gprs;
GSM_SMS sms;
    35e0:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <_ZN14GSM3SMSServiceC1Eb>

000035e4 <_Z16SendDataToServerv>:
char *apiKey = "VKKVT14I2U573BPZ";
char server[] = "api.thingspeak.com";
char path[] = "/";
int port = 80;

void SendDataToServer(){
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	00 d0       	rcall	.+0      	; 0x35ea <_Z16SendDataToServerv+0x6>
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <_Z16SendDataToServerv+0x8>
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <_Z16SendDataToServerv+0xa>
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
	bool resp;
	
	String getStr = "GET /update?api_key=";
    35f2:	63 e8       	ldi	r22, 0x83	; 131
    35f4:	72 e0       	ldi	r23, 0x02	; 2
    35f6:	ce 01       	movw	r24, r28
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	0e 94 c3 22 	call	0x4586	; 0x4586 <_ZN6StringC1EPKc>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    35fe:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <apiKey>
    3602:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <apiKey+0x1>
    3606:	ce 01       	movw	r24, r28
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	0e 94 06 23 	call	0x460c	; 0x460c <_ZN6String6concatEPKc>
    360e:	68 e9       	ldi	r22, 0x98	; 152
    3610:	72 e0       	ldi	r23, 0x02	; 2
    3612:	ce 01       	movw	r24, r28
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	0e 94 06 23 	call	0x460c	; 0x460c <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    361a:	64 e6       	ldi	r22, 0x64	; 100
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	ce 01       	movw	r24, r28
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN6String6concatEi>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    3626:	61 ea       	ldi	r22, 0xA1	; 161
    3628:	72 e0       	ldi	r23, 0x02	; 2
    362a:	ce 01       	movw	r24, r28
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	0e 94 06 23 	call	0x460c	; 0x460c <_ZN6String6concatEPKc>
	getStr += apiKey;
	getStr +="&field1=";
	getStr += 100;
	getStr += "\r\n\r\n";
	
	if(client.connect(server,port))
    3632:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <port>
    3636:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <port+0x1>
    363a:	6a e0       	ldi	r22, 0x0A	; 10
    363c:	71 e0       	ldi	r23, 0x01	; 1
    363e:	8d e8       	ldi	r24, 0x8D	; 141
    3640:	94 e0       	ldi	r25, 0x04	; 4
    3642:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN23GSM3MobileClientService7connectEPKcj>
    3646:	89 2b       	or	r24, r25
    3648:	a1 f1       	breq	.+104    	; 0x36b2 <_Z16SendDataToServerv+0xce>
	{
		client.print("AT+CIPSEND=");
    364a:	66 ea       	ldi	r22, 0xA6	; 166
    364c:	72 e0       	ldi	r23, 0x02	; 2
    364e:	8d e8       	ldi	r24, 0x8D	; 141
    3650:	94 e0       	ldi	r25, 0x04	; 4
    3652:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		client.print(getStr.length());
    3656:	6d 81       	ldd	r22, Y+5	; 0x05
    3658:	7e 81       	ldd	r23, Y+6	; 0x06
    365a:	4a e0       	ldi	r20, 0x0A	; 10
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	8d e8       	ldi	r24, 0x8D	; 141
    3660:	94 e0       	ldi	r25, 0x04	; 4
    3662:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <_ZN5Print5printEji>
		client.print("\r");
    3666:	6b ef       	ldi	r22, 0xFB	; 251
    3668:	71 e0       	ldi	r23, 0x01	; 1
    366a:	8d e8       	ldi	r24, 0x8D	; 141
    366c:	94 e0       	ldi	r25, 0x04	; 4
    366e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		
		if(client.find(">"))
    3672:	6d ef       	ldi	r22, 0xFD	; 253
    3674:	71 e0       	ldi	r23, 0x01	; 1
    3676:	8d e8       	ldi	r24, 0x8D	; 141
    3678:	94 e0       	ldi	r25, 0x04	; 4
    367a:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN6Stream4findEPc>
    367e:	88 23       	and	r24, r24
    3680:	91 f0       	breq	.+36     	; 0x36a6 <_Z16SendDataToServerv+0xc2>
		{
			client.print(getStr);
    3682:	be 01       	movw	r22, r28
    3684:	6f 5f       	subi	r22, 0xFF	; 255
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	8d e8       	ldi	r24, 0x8D	; 141
    368a:	94 e0       	ldi	r25, 0x04	; 4
    368c:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <_ZN5Print5printERK6String>
			client.write(26);
    3690:	6a e1       	ldi	r22, 0x1A	; 26
    3692:	8d e8       	ldi	r24, 0x8D	; 141
    3694:	94 e0       	ldi	r25, 0x04	; 4
    3696:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_ZN23GSM3MobileClientService5writeEh>
			client.print("\r");
    369a:	6b ef       	ldi	r22, 0xFB	; 251
    369c:	71 e0       	ldi	r23, 0x01	; 1
    369e:	8d e8       	ldi	r24, 0x8D	; 141
    36a0:	94 e0       	ldi	r25, 0x04	; 4
    36a2:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN5Print5printEPKc>
		}
		
		Serial.println("Done");
    36a6:	62 eb       	ldi	r22, 0xB2	; 178
    36a8:	72 e0       	ldi	r23, 0x02	; 2
    36aa:	85 ea       	ldi	r24, 0xA5	; 165
    36ac:	94 e0       	ldi	r25, 0x04	; 4
    36ae:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>
	}
	client.flush();
    36b2:	8d e8       	ldi	r24, 0x8D	; 141
    36b4:	94 e0       	ldi	r25, 0x04	; 4
    36b6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN23GSM3MobileClientService5flushEv>
    36ba:	ce 01       	movw	r24, r28
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN6StringD1Ev>
}
    36c2:	26 96       	adiw	r28, 0x06	; 6
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	08 95       	ret

000036d4 <setup>:
		
		return out;
	}
}

void setup() {
    36d4:	0f 93       	push	r16
	pinMode(13, OUTPUT);
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	8d e0       	ldi	r24, 0x0D	; 13
    36da:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
	digitalWrite(13, LOW);	
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	8d e0       	ldi	r24, 0x0D	; 13
    36e2:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    36e6:	26 e0       	ldi	r18, 0x06	; 6
    36e8:	40 e8       	ldi	r20, 0x80	; 128
    36ea:	55 e2       	ldi	r21, 0x25	; 37
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	85 ea       	ldi	r24, 0xA5	; 165
    36f2:	94 e0       	ldi	r25, 0x04	; 4
    36f4:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN14HardwareSerial5beginEmh>
	
	Serial.begin(9600);
	boolean notConnected = true;
	
	pinMode(relayPin, OUTPUT);
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	8c e0       	ldi	r24, 0x0C	; 12
    36fc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
	digitalWrite(relayPin, LOW);
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	8c e0       	ldi	r24, 0x0C	; 12
    3704:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
	
	while(notConnected){
		if(gsmAccess.begin(NULL,false,true) == GSM_READY 
    3708:	21 e0       	ldi	r18, 0x01	; 1
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	8b e9       	ldi	r24, 0x9B	; 155
    3712:	94 e0       	ldi	r25, 0x04	; 4
    3714:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN26GSM3ShieldV1AccessProvider5beginEPcbb>
			&& gprs.attachGPRS(GPRS_APN, GPRS_LOGIN, GPRS_PASSWORD) == GPRS_READY)
    3718:	83 30       	cpi	r24, 0x03	; 3
    371a:	99 f4       	brne	.+38     	; 0x3742 <setup+0x6e>
    371c:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <GPRS_PASSWORD>
    3720:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <GPRS_PASSWORD+0x1>
    3724:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <GPRS_LOGIN>
    3728:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <GPRS_LOGIN+0x1>
    372c:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <GPRS_APN>
    3730:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <GPRS_APN+0x1>
    3734:	01 e0       	ldi	r16, 0x01	; 1
    3736:	85 e8       	ldi	r24, 0x85	; 133
    3738:	94 e0       	ldi	r25, 0x04	; 4
    373a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN31GSM3ShieldV1DataNetworkProvider10attachGPRSEPcS0_S0_b>
    373e:	84 30       	cpi	r24, 0x04	; 4
    3740:	39 f0       	breq	.+14     	; 0x3750 <setup+0x7c>
			notConnected = false;
		else{
			delay(1000);
    3742:	68 ee       	ldi	r22, 0xE8	; 232
    3744:	73 e0       	ldi	r23, 0x03	; 3
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    374e:	dc cf       	rjmp	.-72     	; 0x3708 <setup+0x34>
		}
	}
	pinMode(13, OUTPUT);
    3750:	61 e0       	ldi	r22, 0x01	; 1
    3752:	8d e0       	ldi	r24, 0x0D	; 13
    3754:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <pinMode>
	digitalWrite(13, HIGH);	
    3758:	61 e0       	ldi	r22, 0x01	; 1
    375a:	8d e0       	ldi	r24, 0x0D	; 13
}
    375c:	0f 91       	pop	r16
		else{
			delay(1000);
		}
	}
	pinMode(13, OUTPUT);
	digitalWrite(13, HIGH);	
    375e:	0c 94 25 22 	jmp	0x444a	; 0x444a <digitalWrite>

00003762 <_Z7ReadSMSv>:
	sms.beginSMS(remoteNum);
	sms.print(txtMsg);
	sms.endSMS();
}

String ReadSMS(){
    3762:	1f 93       	push	r17
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	ec 01       	movw	r28, r24
	char c;
	String out;
    376a:	65 ea       	ldi	r22, 0xA5	; 165
    376c:	72 e0       	ldi	r23, 0x02	; 2
    376e:	0e 94 c3 22 	call	0x4586	; 0x4586 <_ZN6StringC1EPKc>
	if (sms.available()) {
    3772:	88 e7       	ldi	r24, 0x78	; 120
    3774:	94 e0       	ldi	r25, 0x04	; 4
    3776:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <_ZN14GSM3SMSService9availableEv>
    377a:	89 2b       	or	r24, r25
    377c:	99 f1       	breq	.+102    	; 0x37e4 <_Z7ReadSMSv+0x82>

		// Get remote number
		sms.remoteNumber(senderNumber, 20);
    377e:	44 e1       	ldi	r20, 0x14	; 20
    3780:	50 e0       	ldi	r21, 0x00	; 0
    3782:	64 e6       	ldi	r22, 0x64	; 100
    3784:	74 e0       	ldi	r23, 0x04	; 4
    3786:	88 e7       	ldi	r24, 0x78	; 120
    3788:	94 e0       	ldi	r25, 0x04	; 4
    378a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_ZN14GSM3SMSService12remoteNumberEPci>
		Serial.println(senderNumber);
    378e:	64 e6       	ldi	r22, 0x64	; 100
    3790:	74 e0       	ldi	r23, 0x04	; 4
    3792:	85 ea       	ldi	r24, 0xA5	; 165
    3794:	94 e0       	ldi	r25, 0x04	; 4
    3796:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>

		// An example of message disposal
		// Any messages starting with # should be discarded
		if (sms.peek() == '#') {
    379a:	88 e7       	ldi	r24, 0x78	; 120
    379c:	94 e0       	ldi	r25, 0x04	; 4
    379e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <_ZN14GSM3SMSService4peekEv>
    37a2:	83 97       	sbiw	r24, 0x23	; 35
    37a4:	21 f4       	brne	.+8      	; 0x37ae <_Z7ReadSMSv+0x4c>
				sms.flush();
    37a6:	88 e7       	ldi	r24, 0x78	; 120
    37a8:	94 e0       	ldi	r25, 0x04	; 4
    37aa:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN14GSM3SMSService5flushEv>
		}
		
		// Read message bytes and print them
		while (c = sms.read()) {
    37ae:	88 e7       	ldi	r24, 0x78	; 120
    37b0:	94 e0       	ldi	r25, 0x04	; 4
    37b2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN14GSM3SMSService4readEv>
    37b6:	18 2f       	mov	r17, r24
    37b8:	88 23       	and	r24, r24
    37ba:	51 f0       	breq	.+20     	; 0x37d0 <_Z7ReadSMSv+0x6e>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    37bc:	61 2f       	mov	r22, r17
    37be:	85 ea       	ldi	r24, 0xA5	; 165
    37c0:	94 e0       	ldi	r25, 0x04	; 4
    37c2:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN14HardwareSerial5writeEh>
	String & operator += (char c)			{concat(c); return (*this);}
    37c6:	61 2f       	mov	r22, r17
    37c8:	ce 01       	movw	r24, r28
    37ca:	0e 94 15 23 	call	0x462a	; 0x462a <_ZN6String6concatEc>
    37ce:	ef cf       	rjmp	.-34     	; 0x37ae <_Z7ReadSMSv+0x4c>
			Serial.write(c);
			out += c;
		}
		Serial.println("\r");
    37d0:	6b ef       	ldi	r22, 0xFB	; 251
    37d2:	71 e0       	ldi	r23, 0x01	; 1
    37d4:	85 ea       	ldi	r24, 0xA5	; 165
    37d6:	94 e0       	ldi	r25, 0x04	; 4
    37d8:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>
		
		// Delete message from modem memory
		sms.flush();
    37dc:	88 e7       	ldi	r24, 0x78	; 120
    37de:	94 e0       	ldi	r25, 0x04	; 4
    37e0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN14GSM3SMSService5flushEv>
		
		return out;
	}
}
    37e4:	ce 01       	movw	r24, r28
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	1f 91       	pop	r17
    37ec:	08 95       	ret

000037ee <loop>:
	pinMode(13, OUTPUT);
	digitalWrite(13, HIGH);	
}

char remoteNumber[20];
void loop() {
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	62 97       	sbiw	r28, 0x12	; 18
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
	SendDataToServer();
    3806:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <_Z16SendDataToServerv>
	
	String readString = ReadSMS();
    380a:	ce 01       	movw	r24, r28
    380c:	0d 96       	adiw	r24, 0x0d	; 13
    380e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <_Z7ReadSMSv>
	
	if (readString.length() > 0 && String(senderNumber).indexOf("267766253") >= 0)
    3812:	89 89       	ldd	r24, Y+17	; 0x11
    3814:	9a 89       	ldd	r25, Y+18	; 0x12
    3816:	89 2b       	or	r24, r25
    3818:	09 f4       	brne	.+2      	; 0x381c <loop+0x2e>
    381a:	5a c0       	rjmp	.+180    	; 0x38d0 <loop+0xe2>
    381c:	67 eb       	ldi	r22, 0xB7	; 183
    381e:	72 e0       	ldi	r23, 0x02	; 2
    3820:	ce 01       	movw	r24, r28
    3822:	01 96       	adiw	r24, 0x01	; 1
    3824:	0e 94 c3 22 	call	0x4586	; 0x4586 <_ZN6StringC1EPKc>
    3828:	64 e6       	ldi	r22, 0x64	; 100
    382a:	74 e0       	ldi	r23, 0x04	; 4
    382c:	ce 01       	movw	r24, r28
    382e:	07 96       	adiw	r24, 0x07	; 7
    3830:	0e 94 c3 22 	call	0x4586	; 0x4586 <_ZN6StringC1EPKc>
    3834:	be 01       	movw	r22, r28
    3836:	6f 5f       	subi	r22, 0xFF	; 255
    3838:	7f 4f       	sbci	r23, 0xFF	; 255
    383a:	ce 01       	movw	r24, r28
    383c:	07 96       	adiw	r24, 0x07	; 7
    383e:	0e 94 75 23 	call	0x46ea	; 0x46ea <_ZNK6String7indexOfERKS_>
    3842:	8c 01       	movw	r16, r24
    3844:	ce 01       	movw	r24, r28
    3846:	07 96       	adiw	r24, 0x07	; 7
    3848:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN6StringD1Ev>
    384c:	ce 01       	movw	r24, r28
    384e:	01 96       	adiw	r24, 0x01	; 1
    3850:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN6StringD1Ev>
    3854:	17 fd       	sbrc	r17, 7
    3856:	3c c0       	rjmp	.+120    	; 0x38d0 <loop+0xe2>
	{
		if(readString.indexOf("on") >= 0)
    3858:	61 ec       	ldi	r22, 0xC1	; 193
    385a:	72 e0       	ldi	r23, 0x02	; 2
    385c:	ce 01       	movw	r24, r28
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	0e 94 c3 22 	call	0x4586	; 0x4586 <_ZN6StringC1EPKc>
    3864:	be 01       	movw	r22, r28
    3866:	6f 5f       	subi	r22, 0xFF	; 255
    3868:	7f 4f       	sbci	r23, 0xFF	; 255
    386a:	ce 01       	movw	r24, r28
    386c:	0d 96       	adiw	r24, 0x0d	; 13
    386e:	0e 94 75 23 	call	0x46ea	; 0x46ea <_ZNK6String7indexOfERKS_>
    3872:	8c 01       	movw	r16, r24
    3874:	ce 01       	movw	r24, r28
    3876:	01 96       	adiw	r24, 0x01	; 1
    3878:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN6StringD1Ev>
    387c:	17 fd       	sbrc	r17, 7
    387e:	0a c0       	rjmp	.+20     	; 0x3894 <loop+0xa6>
		{
			digitalWrite(relayPin, LOW);
    3880:	60 e0       	ldi	r22, 0x00	; 0
    3882:	8c e0       	ldi	r24, 0x0C	; 12
    3884:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
			Serial.println("RELAY ON");
    3888:	64 ec       	ldi	r22, 0xC4	; 196
    388a:	72 e0       	ldi	r23, 0x02	; 2
    388c:	85 ea       	ldi	r24, 0xA5	; 165
    388e:	94 e0       	ldi	r25, 0x04	; 4
    3890:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>
		}
		
		if(readString.indexOf("off") >= 0)
    3894:	6d ec       	ldi	r22, 0xCD	; 205
    3896:	72 e0       	ldi	r23, 0x02	; 2
    3898:	ce 01       	movw	r24, r28
    389a:	01 96       	adiw	r24, 0x01	; 1
    389c:	0e 94 c3 22 	call	0x4586	; 0x4586 <_ZN6StringC1EPKc>
    38a0:	be 01       	movw	r22, r28
    38a2:	6f 5f       	subi	r22, 0xFF	; 255
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
    38a6:	ce 01       	movw	r24, r28
    38a8:	0d 96       	adiw	r24, 0x0d	; 13
    38aa:	0e 94 75 23 	call	0x46ea	; 0x46ea <_ZNK6String7indexOfERKS_>
    38ae:	8c 01       	movw	r16, r24
    38b0:	ce 01       	movw	r24, r28
    38b2:	01 96       	adiw	r24, 0x01	; 1
    38b4:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN6StringD1Ev>
    38b8:	17 fd       	sbrc	r17, 7
    38ba:	0a c0       	rjmp	.+20     	; 0x38d0 <loop+0xe2>
		{
			digitalWrite(relayPin, HIGH);
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	8c e0       	ldi	r24, 0x0C	; 12
    38c0:	0e 94 25 22 	call	0x444a	; 0x444a <digitalWrite>
			Serial.println("RELAY OFF");
    38c4:	61 ed       	ldi	r22, 0xD1	; 209
    38c6:	72 e0       	ldi	r23, 0x02	; 2
    38c8:	85 ea       	ldi	r24, 0xA5	; 165
    38ca:	94 e0       	ldi	r25, 0x04	; 4
    38cc:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <_ZN5Print7printlnEPKc>
		}
	}
	delay(2000);
    38d0:	60 ed       	ldi	r22, 0xD0	; 208
    38d2:	77 e0       	ldi	r23, 0x07	; 7
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	0e 94 49 21 	call	0x4292	; 0x4292 <delay>
    38dc:	ce 01       	movw	r24, r28
    38de:	0d 96       	adiw	r24, 0x0d	; 13
    38e0:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN6StringD1Ev>
}
    38e4:	62 96       	adiw	r28, 0x12	; 18
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	f8 94       	cli
    38ea:	de bf       	out	0x3e, r29	; 62
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	cd bf       	out	0x3d, r28	; 61
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	08 95       	ret

000038fa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    38fa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    38fc:	91 8d       	ldd	r25, Z+25	; 0x19
    38fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    3900:	89 2f       	mov	r24, r25
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	80 5c       	subi	r24, 0xC0	; 192
    3906:	9f 4f       	sbci	r25, 0xFF	; 255
    3908:	82 1b       	sub	r24, r18
    390a:	91 09       	sbc	r25, r1
}
    390c:	8f 73       	andi	r24, 0x3F	; 63
    390e:	99 27       	eor	r25, r25
    3910:	08 95       	ret

00003912 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3912:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3914:	91 8d       	ldd	r25, Z+25	; 0x19
    3916:	82 8d       	ldd	r24, Z+26	; 0x1a
    3918:	98 17       	cp	r25, r24
    391a:	31 f0       	breq	.+12     	; 0x3928 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    391c:	82 8d       	ldd	r24, Z+26	; 0x1a
    391e:	e8 0f       	add	r30, r24
    3920:	f1 1d       	adc	r31, r1
    3922:	85 8d       	ldd	r24, Z+29	; 0x1d
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3928:	8f ef       	ldi	r24, 0xFF	; 255
    392a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    392c:	08 95       	ret

0000392e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    392e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3930:	91 8d       	ldd	r25, Z+25	; 0x19
    3932:	82 8d       	ldd	r24, Z+26	; 0x1a
    3934:	98 17       	cp	r25, r24
    3936:	61 f0       	breq	.+24     	; 0x3950 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3938:	82 8d       	ldd	r24, Z+26	; 0x1a
    393a:	df 01       	movw	r26, r30
    393c:	a8 0f       	add	r26, r24
    393e:	b1 1d       	adc	r27, r1
    3940:	5d 96       	adiw	r26, 0x1d	; 29
    3942:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3944:	92 8d       	ldd	r25, Z+26	; 0x1a
    3946:	9f 5f       	subi	r25, 0xFF	; 255
    3948:	9f 73       	andi	r25, 0x3F	; 63
    394a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3950:	8f ef       	ldi	r24, 0xFF	; 255
    3952:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3954:	08 95       	ret

00003956 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	9e e1       	ldi	r25, 0x1E	; 30
    395a:	89 2b       	or	r24, r25
    395c:	49 f0       	breq	.+18     	; 0x3970 <_Z14serialEventRunv+0x1a>
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	89 2b       	or	r24, r25
    3964:	29 f0       	breq	.+10     	; 0x3970 <_Z14serialEventRunv+0x1a>
    3966:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <_Z17Serial0_availablev>
    396a:	81 11       	cpse	r24, r1
    396c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3970:	08 95       	ret

00003972 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3972:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3974:	84 8d       	ldd	r24, Z+28	; 0x1c
    3976:	df 01       	movw	r26, r30
    3978:	a8 0f       	add	r26, r24
    397a:	b1 1d       	adc	r27, r1
    397c:	a3 5a       	subi	r26, 0xA3	; 163
    397e:	bf 4f       	sbci	r27, 0xFF	; 255
    3980:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3982:	84 8d       	ldd	r24, Z+28	; 0x1c
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	01 96       	adiw	r24, 0x01	; 1
    3988:	8f 73       	andi	r24, 0x3F	; 63
    398a:	99 27       	eor	r25, r25
    398c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    398e:	a6 89       	ldd	r26, Z+22	; 0x16
    3990:	b7 89       	ldd	r27, Z+23	; 0x17
    3992:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3994:	a0 89       	ldd	r26, Z+16	; 0x10
    3996:	b1 89       	ldd	r27, Z+17	; 0x11
    3998:	8c 91       	ld	r24, X
    399a:	80 64       	ori	r24, 0x40	; 64
    399c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    399e:	93 8d       	ldd	r25, Z+27	; 0x1b
    39a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    39a2:	98 13       	cpse	r25, r24
    39a4:	06 c0       	rjmp	.+12     	; 0x39b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    39a6:	02 88       	ldd	r0, Z+18	; 0x12
    39a8:	f3 89       	ldd	r31, Z+19	; 0x13
    39aa:	e0 2d       	mov	r30, r0
    39ac:	80 81       	ld	r24, Z
    39ae:	8f 7d       	andi	r24, 0xDF	; 223
    39b0:	80 83       	st	Z, r24
    39b2:	08 95       	ret

000039b4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    39ba:	88 8d       	ldd	r24, Y+24	; 0x18
    39bc:	88 23       	and	r24, r24
    39be:	c9 f0       	breq	.+50     	; 0x39f2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    39c0:	ea 89       	ldd	r30, Y+18	; 0x12
    39c2:	fb 89       	ldd	r31, Y+19	; 0x13
    39c4:	80 81       	ld	r24, Z
    39c6:	85 fd       	sbrc	r24, 5
    39c8:	05 c0       	rjmp	.+10     	; 0x39d4 <_ZN14HardwareSerial5flushEv+0x20>
    39ca:	a8 89       	ldd	r26, Y+16	; 0x10
    39cc:	b9 89       	ldd	r27, Y+17	; 0x11
    39ce:	8c 91       	ld	r24, X
    39d0:	86 fd       	sbrc	r24, 6
    39d2:	0f c0       	rjmp	.+30     	; 0x39f2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	07 fc       	sbrc	r0, 7
    39d8:	f5 cf       	rjmp	.-22     	; 0x39c4 <_ZN14HardwareSerial5flushEv+0x10>
    39da:	80 81       	ld	r24, Z
    39dc:	85 ff       	sbrs	r24, 5
    39de:	f2 cf       	rjmp	.-28     	; 0x39c4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    39e0:	a8 89       	ldd	r26, Y+16	; 0x10
    39e2:	b9 89       	ldd	r27, Y+17	; 0x11
    39e4:	8c 91       	ld	r24, X
    39e6:	85 ff       	sbrs	r24, 5
    39e8:	ed cf       	rjmp	.-38     	; 0x39c4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    39ea:	ce 01       	movw	r24, r28
    39ec:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    39f0:	e7 cf       	rjmp	.-50     	; 0x39c0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	08 95       	ret

000039f8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    39f8:	ef 92       	push	r14
    39fa:	ff 92       	push	r15
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
    3a04:	ec 01       	movw	r28, r24
  _written = true;
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3a0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a0e:	98 13       	cpse	r25, r24
    3a10:	05 c0       	rjmp	.+10     	; 0x3a1c <_ZN14HardwareSerial5writeEh+0x24>
    3a12:	e8 89       	ldd	r30, Y+16	; 0x10
    3a14:	f9 89       	ldd	r31, Y+17	; 0x11
    3a16:	80 81       	ld	r24, Z
    3a18:	85 fd       	sbrc	r24, 5
    3a1a:	24 c0       	rjmp	.+72     	; 0x3a64 <_ZN14HardwareSerial5writeEh+0x6c>
    3a1c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3a1e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3a20:	10 e0       	ldi	r17, 0x00	; 0
    3a22:	0f 5f       	subi	r16, 0xFF	; 255
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	0f 73       	andi	r16, 0x3F	; 63
    3a28:	11 27       	eor	r17, r17
    3a2a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3a2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a2e:	e8 12       	cpse	r14, r24
    3a30:	0c c0       	rjmp	.+24     	; 0x3a4a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	07 fc       	sbrc	r0, 7
    3a36:	fa cf       	rjmp	.-12     	; 0x3a2c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3a38:	e8 89       	ldd	r30, Y+16	; 0x10
    3a3a:	f9 89       	ldd	r31, Y+17	; 0x11
    3a3c:	80 81       	ld	r24, Z
    3a3e:	85 ff       	sbrs	r24, 5
    3a40:	f5 cf       	rjmp	.-22     	; 0x3a2c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3a42:	ce 01       	movw	r24, r28
    3a44:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3a48:	f1 cf       	rjmp	.-30     	; 0x3a2c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	e8 0f       	add	r30, r24
    3a50:	f1 1d       	adc	r31, r1
    3a52:	e3 5a       	subi	r30, 0xA3	; 163
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3a58:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3a5a:	ea 89       	ldd	r30, Y+18	; 0x12
    3a5c:	fb 89       	ldd	r31, Y+19	; 0x13
    3a5e:	80 81       	ld	r24, Z
    3a60:	80 62       	ori	r24, 0x20	; 32
    3a62:	07 c0       	rjmp	.+14     	; 0x3a72 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3a64:	ee 89       	ldd	r30, Y+22	; 0x16
    3a66:	ff 89       	ldd	r31, Y+23	; 0x17
    3a68:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3a6a:	e8 89       	ldd	r30, Y+16	; 0x10
    3a6c:	f9 89       	ldd	r31, Y+17	; 0x11
    3a6e:	80 81       	ld	r24, Z
    3a70:	80 64       	ori	r24, 0x40	; 64
    3a72:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	df 91       	pop	r29
    3a7a:	cf 91       	pop	r28
    3a7c:	1f 91       	pop	r17
    3a7e:	0f 91       	pop	r16
    3a80:	ff 90       	pop	r15
    3a82:	ef 90       	pop	r14
    3a84:	08 95       	ret

00003a86 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3a86:	cf 92       	push	r12
    3a88:	df 92       	push	r13
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	1f 93       	push	r17
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	ec 01       	movw	r28, r24
    3a96:	6a 01       	movw	r12, r20
    3a98:	7b 01       	movw	r14, r22
    3a9a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3a9c:	e8 89       	ldd	r30, Y+16	; 0x10
    3a9e:	f9 89       	ldd	r31, Y+17	; 0x11
    3aa0:	82 e0       	ldi	r24, 0x02	; 2
    3aa2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3aa4:	41 15       	cp	r20, r1
    3aa6:	51 4e       	sbci	r21, 0xE1	; 225
    3aa8:	61 05       	cpc	r22, r1
    3aaa:	71 05       	cpc	r23, r1
    3aac:	b1 f0       	breq	.+44     	; 0x3ada <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	79 e0       	ldi	r23, 0x09	; 9
    3ab2:	8d e3       	ldi	r24, 0x3D	; 61
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	a7 01       	movw	r20, r14
    3ab8:	96 01       	movw	r18, r12
    3aba:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__udivmodsi4>
    3abe:	da 01       	movw	r26, r20
    3ac0:	c9 01       	movw	r24, r18
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	a1 09       	sbc	r26, r1
    3ac6:	b1 09       	sbc	r27, r1
    3ac8:	b6 95       	lsr	r27
    3aca:	a7 95       	ror	r26
    3acc:	97 95       	ror	r25
    3ace:	87 95       	ror	r24
    3ad0:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3ad2:	41 15       	cp	r20, r1
    3ad4:	80 e1       	ldi	r24, 0x10	; 16
    3ad6:	58 07       	cpc	r21, r24
    3ad8:	a8 f0       	brcs	.+42     	; 0x3b04 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3ada:	e8 89       	ldd	r30, Y+16	; 0x10
    3adc:	f9 89       	ldd	r31, Y+17	; 0x11
    3ade:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3ae0:	60 e8       	ldi	r22, 0x80	; 128
    3ae2:	74 e8       	ldi	r23, 0x84	; 132
    3ae4:	8e e1       	ldi	r24, 0x1E	; 30
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	a7 01       	movw	r20, r14
    3aea:	96 01       	movw	r18, r12
    3aec:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__udivmodsi4>
    3af0:	ba 01       	movw	r22, r20
    3af2:	a9 01       	movw	r20, r18
    3af4:	41 50       	subi	r20, 0x01	; 1
    3af6:	51 09       	sbc	r21, r1
    3af8:	61 09       	sbc	r22, r1
    3afa:	71 09       	sbc	r23, r1
    3afc:	76 95       	lsr	r23
    3afe:	67 95       	ror	r22
    3b00:	57 95       	ror	r21
    3b02:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3b04:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b06:	fd 85       	ldd	r31, Y+13	; 0x0d
    3b08:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    3b0a:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b0c:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b0e:	40 83       	st	Z, r20

  _written = false;
    3b10:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3b12:	ec 89       	ldd	r30, Y+20	; 0x14
    3b14:	fd 89       	ldd	r31, Y+21	; 0x15
    3b16:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3b18:	ea 89       	ldd	r30, Y+18	; 0x12
    3b1a:	fb 89       	ldd	r31, Y+19	; 0x13
    3b1c:	80 81       	ld	r24, Z
    3b1e:	80 61       	ori	r24, 0x10	; 16
    3b20:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3b22:	ea 89       	ldd	r30, Y+18	; 0x12
    3b24:	fb 89       	ldd	r31, Y+19	; 0x13
    3b26:	80 81       	ld	r24, Z
    3b28:	88 60       	ori	r24, 0x08	; 8
    3b2a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3b2c:	ea 89       	ldd	r30, Y+18	; 0x12
    3b2e:	fb 89       	ldd	r31, Y+19	; 0x13
    3b30:	80 81       	ld	r24, Z
    3b32:	80 68       	ori	r24, 0x80	; 128
    3b34:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3b36:	ea 89       	ldd	r30, Y+18	; 0x12
    3b38:	fb 89       	ldd	r31, Y+19	; 0x13
    3b3a:	80 81       	ld	r24, Z
    3b3c:	8f 7d       	andi	r24, 0xDF	; 223
    3b3e:	80 83       	st	Z, r24
}
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	df 90       	pop	r13
    3b4c:	cf 90       	pop	r12
    3b4e:	08 95       	ret

00003b50 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3b50:	1f 92       	push	r1
    3b52:	0f 92       	push	r0
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	0f 92       	push	r0
    3b58:	11 24       	eor	r1, r1
    3b5a:	2f 93       	push	r18
    3b5c:	8f 93       	push	r24
    3b5e:	9f 93       	push	r25
    3b60:	ef 93       	push	r30
    3b62:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3b64:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <Serial+0x10>
    3b68:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <Serial+0x11>
    3b6c:	80 81       	ld	r24, Z
    3b6e:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <Serial+0x16>
    3b72:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <Serial+0x17>
    3b76:	82 fd       	sbrc	r24, 2
    3b78:	12 c0       	rjmp	.+36     	; 0x3b9e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3b7a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3b7c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Serial+0x19>
    3b80:	8f 5f       	subi	r24, 0xFF	; 255
    3b82:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3b84:	20 91 bf 04 	lds	r18, 0x04BF	; 0x8004bf <Serial+0x1a>
    3b88:	82 17       	cp	r24, r18
    3b8a:	51 f0       	breq	.+20     	; 0x3ba0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3b8c:	e0 91 be 04 	lds	r30, 0x04BE	; 0x8004be <Serial+0x19>
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	eb 55       	subi	r30, 0x5B	; 91
    3b94:	fb 4f       	sbci	r31, 0xFB	; 251
    3b96:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3b98:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <Serial+0x19>
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3b9e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3ba0:	ff 91       	pop	r31
    3ba2:	ef 91       	pop	r30
    3ba4:	9f 91       	pop	r25
    3ba6:	8f 91       	pop	r24
    3ba8:	2f 91       	pop	r18
    3baa:	0f 90       	pop	r0
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	0f 90       	pop	r0
    3bb0:	1f 90       	pop	r1
    3bb2:	18 95       	reti

00003bb4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3bb4:	1f 92       	push	r1
    3bb6:	0f 92       	push	r0
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	0f 92       	push	r0
    3bbc:	11 24       	eor	r1, r1
    3bbe:	2f 93       	push	r18
    3bc0:	3f 93       	push	r19
    3bc2:	4f 93       	push	r20
    3bc4:	5f 93       	push	r21
    3bc6:	6f 93       	push	r22
    3bc8:	7f 93       	push	r23
    3bca:	8f 93       	push	r24
    3bcc:	9f 93       	push	r25
    3bce:	af 93       	push	r26
    3bd0:	bf 93       	push	r27
    3bd2:	ef 93       	push	r30
    3bd4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3bd6:	85 ea       	ldi	r24, 0xA5	; 165
    3bd8:	94 e0       	ldi	r25, 0x04	; 4
    3bda:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3bde:	ff 91       	pop	r31
    3be0:	ef 91       	pop	r30
    3be2:	bf 91       	pop	r27
    3be4:	af 91       	pop	r26
    3be6:	9f 91       	pop	r25
    3be8:	8f 91       	pop	r24
    3bea:	7f 91       	pop	r23
    3bec:	6f 91       	pop	r22
    3bee:	5f 91       	pop	r21
    3bf0:	4f 91       	pop	r20
    3bf2:	3f 91       	pop	r19
    3bf4:	2f 91       	pop	r18
    3bf6:	0f 90       	pop	r0
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	0f 90       	pop	r0
    3bfc:	1f 90       	pop	r1
    3bfe:	18 95       	reti

00003c00 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3c00:	85 ea       	ldi	r24, 0xA5	; 165
    3c02:	94 e0       	ldi	r25, 0x04	; 4
    3c04:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_ZN14HardwareSerial9availableEv>
    3c08:	21 e0       	ldi	r18, 0x01	; 1
    3c0a:	89 2b       	or	r24, r25
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <_Z17Serial0_availablev+0x10>
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
}
    3c10:	82 2f       	mov	r24, r18
    3c12:	08 95       	ret

00003c14 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3c14:	e5 ea       	ldi	r30, 0xA5	; 165
    3c16:	f4 e0       	ldi	r31, 0x04	; 4
    3c18:	13 82       	std	Z+3, r1	; 0x03
    3c1a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3c1c:	88 ee       	ldi	r24, 0xE8	; 232
    3c1e:	93 e0       	ldi	r25, 0x03	; 3
    3c20:	a0 e0       	ldi	r26, 0x00	; 0
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	84 83       	std	Z+4, r24	; 0x04
    3c26:	95 83       	std	Z+5, r25	; 0x05
    3c28:	a6 83       	std	Z+6, r26	; 0x06
    3c2a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3c2c:	89 ef       	ldi	r24, 0xF9	; 249
    3c2e:	92 e0       	ldi	r25, 0x02	; 2
    3c30:	91 83       	std	Z+1, r25	; 0x01
    3c32:	80 83       	st	Z, r24
    3c34:	85 ec       	ldi	r24, 0xC5	; 197
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	95 87       	std	Z+13, r25	; 0x0d
    3c3a:	84 87       	std	Z+12, r24	; 0x0c
    3c3c:	84 ec       	ldi	r24, 0xC4	; 196
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	97 87       	std	Z+15, r25	; 0x0f
    3c42:	86 87       	std	Z+14, r24	; 0x0e
    3c44:	80 ec       	ldi	r24, 0xC0	; 192
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	91 8b       	std	Z+17, r25	; 0x11
    3c4a:	80 8b       	std	Z+16, r24	; 0x10
    3c4c:	81 ec       	ldi	r24, 0xC1	; 193
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	93 8b       	std	Z+19, r25	; 0x13
    3c52:	82 8b       	std	Z+18, r24	; 0x12
    3c54:	82 ec       	ldi	r24, 0xC2	; 194
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	95 8b       	std	Z+21, r25	; 0x15
    3c5a:	84 8b       	std	Z+20, r24	; 0x14
    3c5c:	86 ec       	ldi	r24, 0xC6	; 198
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	97 8b       	std	Z+23, r25	; 0x17
    3c62:	86 8b       	std	Z+22, r24	; 0x16
    3c64:	11 8e       	std	Z+25, r1	; 0x19
    3c66:	12 8e       	std	Z+26, r1	; 0x1a
    3c68:	13 8e       	std	Z+27, r1	; 0x1b
    3c6a:	14 8e       	std	Z+28, r1	; 0x1c
    3c6c:	08 95       	ret

00003c6e <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    3c6e:	8f 92       	push	r8
    3c70:	9f 92       	push	r9
    3c72:	af 92       	push	r10
    3c74:	bf 92       	push	r11
    3c76:	cf 92       	push	r12
    3c78:	df 92       	push	r13
    3c7a:	ef 92       	push	r14
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	7c 01       	movw	r14, r24
    3c88:	8b 01       	movw	r16, r22
    3c8a:	6c 01       	movw	r12, r24
    3c8c:	82 e0       	ldi	r24, 0x02	; 2
    3c8e:	c8 0e       	add	r12, r24
    3c90:	d1 1c       	adc	r13, r1
    3c92:	47 01       	movw	r8, r14
    3c94:	e5 e0       	ldi	r30, 0x05	; 5
    3c96:	8e 0e       	add	r8, r30
    3c98:	91 1c       	adc	r9, r1
    3c9a:	c0 e0       	ldi	r28, 0x00	; 0
    3c9c:	d0 e0       	ldi	r29, 0x00	; 0
    3c9e:	f6 01       	movw	r30, r12
    3ca0:	61 91       	ld	r22, Z+
    3ca2:	6f 01       	movw	r12, r30
    3ca4:	4a e0       	ldi	r20, 0x0A	; 10
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	c8 01       	movw	r24, r16
    3caa:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_ZN5Print5printEhi>
    3cae:	5c 01       	movw	r10, r24
    3cb0:	6e e2       	ldi	r22, 0x2E	; 46
    3cb2:	c8 01       	movw	r24, r16
    3cb4:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
    3cb8:	8a 0d       	add	r24, r10
    3cba:	9b 1d       	adc	r25, r11
    3cbc:	c8 0f       	add	r28, r24
    3cbe:	d9 1f       	adc	r29, r25
    3cc0:	c8 14       	cp	r12, r8
    3cc2:	d9 04       	cpc	r13, r9
    3cc4:	61 f7       	brne	.-40     	; 0x3c9e <_ZNK9IPAddress7printToER5Print+0x30>
    3cc6:	4a e0       	ldi	r20, 0x0A	; 10
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	f7 01       	movw	r30, r14
    3ccc:	65 81       	ldd	r22, Z+5	; 0x05
    3cce:	c8 01       	movw	r24, r16
    3cd0:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_ZN5Print5printEhi>
    3cd4:	8c 0f       	add	r24, r28
    3cd6:	9d 1f       	adc	r25, r29
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	df 90       	pop	r13
    3ce6:	cf 90       	pop	r12
    3ce8:	bf 90       	pop	r11
    3cea:	af 90       	pop	r10
    3cec:	9f 90       	pop	r9
    3cee:	8f 90       	pop	r8
    3cf0:	08 95       	ret

00003cf2 <_ZN9IPAddressC1Ev>:
    3cf2:	29 e0       	ldi	r18, 0x09	; 9
    3cf4:	33 e0       	ldi	r19, 0x03	; 3
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	31 83       	std	Z+1, r19	; 0x01
    3cfa:	20 83       	st	Z, r18
    3cfc:	12 82       	std	Z+2, r1	; 0x02
    3cfe:	13 82       	std	Z+3, r1	; 0x03
    3d00:	14 82       	std	Z+4, r1	; 0x04
    3d02:	15 82       	std	Z+5, r1	; 0x05
    3d04:	08 95       	ret

00003d06 <_ZN9IPAddressC1Ehhhh>:
    3d06:	0f 93       	push	r16
    3d08:	fc 01       	movw	r30, r24
    3d0a:	89 e0       	ldi	r24, 0x09	; 9
    3d0c:	93 e0       	ldi	r25, 0x03	; 3
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	80 83       	st	Z, r24
    3d12:	62 83       	std	Z+2, r22	; 0x02
    3d14:	43 83       	std	Z+3, r20	; 0x03
    3d16:	24 83       	std	Z+4, r18	; 0x04
    3d18:	05 83       	std	Z+5, r16	; 0x05
    3d1a:	0f 91       	pop	r16
    3d1c:	08 95       	ret

00003d1e <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    3d1e:	e2 e4       	ldi	r30, 0x42	; 66
    3d20:	f5 e0       	ldi	r31, 0x05	; 5
    3d22:	89 e0       	ldi	r24, 0x09	; 9
    3d24:	93 e0       	ldi	r25, 0x03	; 3
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    3d2a:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    3d2c:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    3d2e:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    3d30:	15 82       	std	Z+5, r1	; 0x05
    3d32:	08 95       	ret

00003d34 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    3d34:	08 95       	ret

00003d36 <main>:

int main(void)
{
	init();
    3d36:	0e 94 85 21 	call	0x430a	; 0x430a <init>

	initVariant();
    3d3a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3d3e:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3d42:	cb ea       	ldi	r28, 0xAB	; 171
    3d44:	dc e1       	ldi	r29, 0x1C	; 28
#endif
	
	setup();
    
	for (;;) {
		loop();
    3d46:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <loop>
		if (serialEventRun) serialEventRun();
    3d4a:	20 97       	sbiw	r28, 0x00	; 0
    3d4c:	e1 f3       	breq	.-8      	; 0x3d46 <main+0x10>
    3d4e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <_Z14serialEventRunv>
    3d52:	f9 cf       	rjmp	.-14     	; 0x3d46 <main+0x10>

00003d54 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    3d54:	cf 92       	push	r12
    3d56:	df 92       	push	r13
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	6c 01       	movw	r12, r24
    3d66:	7a 01       	movw	r14, r20
    3d68:	8b 01       	movw	r16, r22
    3d6a:	c0 e0       	ldi	r28, 0x00	; 0
    3d6c:	d0 e0       	ldi	r29, 0x00	; 0
    3d6e:	ce 15       	cp	r28, r14
    3d70:	df 05       	cpc	r29, r15
    3d72:	89 f0       	breq	.+34     	; 0x3d96 <_ZN5Print5writeEPKhj+0x42>
    3d74:	d8 01       	movw	r26, r16
    3d76:	6d 91       	ld	r22, X+
    3d78:	8d 01       	movw	r16, r26
    3d7a:	d6 01       	movw	r26, r12
    3d7c:	ed 91       	ld	r30, X+
    3d7e:	fc 91       	ld	r31, X
    3d80:	01 90       	ld	r0, Z+
    3d82:	f0 81       	ld	r31, Z
    3d84:	e0 2d       	mov	r30, r0
    3d86:	c6 01       	movw	r24, r12
    3d88:	09 95       	icall
    3d8a:	89 2b       	or	r24, r25
    3d8c:	11 f4       	brne	.+4      	; 0x3d92 <_ZN5Print5writeEPKhj+0x3e>
    3d8e:	7e 01       	movw	r14, r28
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <_ZN5Print5writeEPKhj+0x42>
    3d92:	21 96       	adiw	r28, 0x01	; 1
    3d94:	ec cf       	rjmp	.-40     	; 0x3d6e <_ZN5Print5writeEPKhj+0x1a>
    3d96:	c7 01       	movw	r24, r14
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	df 90       	pop	r13
    3da6:	cf 90       	pop	r12
    3da8:	08 95       	ret

00003daa <_ZN5Print5writeEPKc>:
    3daa:	61 15       	cp	r22, r1
    3dac:	71 05       	cpc	r23, r1
    3dae:	79 f0       	breq	.+30     	; 0x3dce <_ZN5Print5writeEPKc+0x24>
    3db0:	fb 01       	movw	r30, r22
    3db2:	01 90       	ld	r0, Z+
    3db4:	00 20       	and	r0, r0
    3db6:	e9 f7       	brne	.-6      	; 0x3db2 <_ZN5Print5writeEPKc+0x8>
    3db8:	31 97       	sbiw	r30, 0x01	; 1
    3dba:	af 01       	movw	r20, r30
    3dbc:	46 1b       	sub	r20, r22
    3dbe:	57 0b       	sbc	r21, r23
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	02 80       	ldd	r0, Z+2	; 0x02
    3dc8:	f3 81       	ldd	r31, Z+3	; 0x03
    3dca:	e0 2d       	mov	r30, r0
    3dcc:	09 94       	ijmp
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	08 95       	ret

00003dd4 <_ZN5Print5printERK6String>:
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	ed 91       	ld	r30, X+
    3dd8:	fc 91       	ld	r31, X
    3dda:	db 01       	movw	r26, r22
    3ddc:	14 96       	adiw	r26, 0x04	; 4
    3dde:	4d 91       	ld	r20, X+
    3de0:	5c 91       	ld	r21, X
    3de2:	15 97       	sbiw	r26, 0x05	; 5
    3de4:	6d 91       	ld	r22, X+
    3de6:	7c 91       	ld	r23, X
    3de8:	02 80       	ldd	r0, Z+2	; 0x02
    3dea:	f3 81       	ldd	r31, Z+3	; 0x03
    3dec:	e0 2d       	mov	r30, r0
    3dee:	09 94       	ijmp

00003df0 <_ZN5Print5printEPKc>:
    3df0:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_ZN5Print5writeEPKc>

00003df4 <_ZN5Print5printEc>:
    3df4:	dc 01       	movw	r26, r24
    3df6:	ed 91       	ld	r30, X+
    3df8:	fc 91       	ld	r31, X
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	f0 81       	ld	r31, Z
    3dfe:	e0 2d       	mov	r30, r0
    3e00:	09 94       	ijmp

00003e02 <_ZN5Print7printlnEv>:
    3e02:	63 ea       	ldi	r22, 0xA3	; 163
    3e04:	72 e0       	ldi	r23, 0x02	; 2
    3e06:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_ZN5Print5writeEPKc>

00003e0a <_ZN5Print7printlnEPKc>:
    3e0a:	0f 93       	push	r16
    3e0c:	1f 93       	push	r17
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	ec 01       	movw	r28, r24
    3e14:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5writeEPKc>
    3e18:	8c 01       	movw	r16, r24
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <_ZN5Print7printlnEv>
    3e20:	80 0f       	add	r24, r16
    3e22:	91 1f       	adc	r25, r17
    3e24:	df 91       	pop	r29
    3e26:	cf 91       	pop	r28
    3e28:	1f 91       	pop	r17
    3e2a:	0f 91       	pop	r16
    3e2c:	08 95       	ret

00003e2e <_ZN5Print11printNumberEmh>:
    3e2e:	8f 92       	push	r8
    3e30:	9f 92       	push	r9
    3e32:	af 92       	push	r10
    3e34:	bf 92       	push	r11
    3e36:	cf 92       	push	r12
    3e38:	df 92       	push	r13
    3e3a:	ef 92       	push	r14
    3e3c:	ff 92       	push	r15
    3e3e:	0f 93       	push	r16
    3e40:	1f 93       	push	r17
    3e42:	cf 93       	push	r28
    3e44:	df 93       	push	r29
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	a1 97       	sbiw	r28, 0x21	; 33
    3e4c:	0f b6       	in	r0, 0x3f	; 63
    3e4e:	f8 94       	cli
    3e50:	de bf       	out	0x3e, r29	; 62
    3e52:	0f be       	out	0x3f, r0	; 63
    3e54:	cd bf       	out	0x3d, r28	; 61
    3e56:	7c 01       	movw	r14, r24
    3e58:	d4 2e       	mov	r13, r20
    3e5a:	c5 2e       	mov	r12, r21
    3e5c:	db 01       	movw	r26, r22
    3e5e:	19 a2       	std	Y+33, r1	; 0x21
    3e60:	22 30       	cpi	r18, 0x02	; 2
    3e62:	08 f4       	brcc	.+2      	; 0x3e66 <_ZN5Print11printNumberEmh+0x38>
    3e64:	2a e0       	ldi	r18, 0x0A	; 10
    3e66:	8e 01       	movw	r16, r28
    3e68:	0f 5d       	subi	r16, 0xDF	; 223
    3e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6c:	82 2e       	mov	r8, r18
    3e6e:	91 2c       	mov	r9, r1
    3e70:	a1 2c       	mov	r10, r1
    3e72:	b1 2c       	mov	r11, r1
    3e74:	6d 2d       	mov	r22, r13
    3e76:	7c 2d       	mov	r23, r12
    3e78:	cd 01       	movw	r24, r26
    3e7a:	a5 01       	movw	r20, r10
    3e7c:	94 01       	movw	r18, r8
    3e7e:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__udivmodsi4>
    3e82:	d2 2e       	mov	r13, r18
    3e84:	c3 2e       	mov	r12, r19
    3e86:	da 01       	movw	r26, r20
    3e88:	01 50       	subi	r16, 0x01	; 1
    3e8a:	11 09       	sbc	r17, r1
    3e8c:	6a 30       	cpi	r22, 0x0A	; 10
    3e8e:	71 05       	cpc	r23, r1
    3e90:	81 05       	cpc	r24, r1
    3e92:	91 05       	cpc	r25, r1
    3e94:	10 f4       	brcc	.+4      	; 0x3e9a <_ZN5Print11printNumberEmh+0x6c>
    3e96:	60 5d       	subi	r22, 0xD0	; 208
    3e98:	01 c0       	rjmp	.+2      	; 0x3e9c <_ZN5Print11printNumberEmh+0x6e>
    3e9a:	69 5c       	subi	r22, 0xC9	; 201
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	60 83       	st	Z, r22
    3ea0:	23 2b       	or	r18, r19
    3ea2:	24 2b       	or	r18, r20
    3ea4:	25 2b       	or	r18, r21
    3ea6:	31 f7       	brne	.-52     	; 0x3e74 <_ZN5Print11printNumberEmh+0x46>
    3ea8:	b8 01       	movw	r22, r16
    3eaa:	c7 01       	movw	r24, r14
    3eac:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5writeEPKc>
    3eb0:	a1 96       	adiw	r28, 0x21	; 33
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	1f 91       	pop	r17
    3ec2:	0f 91       	pop	r16
    3ec4:	ff 90       	pop	r15
    3ec6:	ef 90       	pop	r14
    3ec8:	df 90       	pop	r13
    3eca:	cf 90       	pop	r12
    3ecc:	bf 90       	pop	r11
    3ece:	af 90       	pop	r10
    3ed0:	9f 90       	pop	r9
    3ed2:	8f 90       	pop	r8
    3ed4:	08 95       	ret

00003ed6 <_ZN5Print5printEli>:
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	ec 01       	movw	r28, r24
    3ee8:	6a 01       	movw	r12, r20
    3eea:	7b 01       	movw	r14, r22
    3eec:	21 15       	cp	r18, r1
    3eee:	31 05       	cpc	r19, r1
    3ef0:	79 f4       	brne	.+30     	; 0x3f10 <_ZN5Print5printEli+0x3a>
    3ef2:	e8 81       	ld	r30, Y
    3ef4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ef6:	01 90       	ld	r0, Z+
    3ef8:	f0 81       	ld	r31, Z
    3efa:	e0 2d       	mov	r30, r0
    3efc:	64 2f       	mov	r22, r20
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	1f 91       	pop	r17
    3f04:	0f 91       	pop	r16
    3f06:	ff 90       	pop	r15
    3f08:	ef 90       	pop	r14
    3f0a:	df 90       	pop	r13
    3f0c:	cf 90       	pop	r12
    3f0e:	09 94       	ijmp
    3f10:	2a 30       	cpi	r18, 0x0A	; 10
    3f12:	31 05       	cpc	r19, r1
    3f14:	e9 f4       	brne	.+58     	; 0x3f50 <_ZN5Print5printEli+0x7a>
    3f16:	77 ff       	sbrs	r23, 7
    3f18:	1a c0       	rjmp	.+52     	; 0x3f4e <_ZN5Print5printEli+0x78>
    3f1a:	6d e2       	ldi	r22, 0x2D	; 45
    3f1c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN5Print5printEc>
    3f20:	8c 01       	movw	r16, r24
    3f22:	44 27       	eor	r20, r20
    3f24:	55 27       	eor	r21, r21
    3f26:	ba 01       	movw	r22, r20
    3f28:	4c 19       	sub	r20, r12
    3f2a:	5d 09       	sbc	r21, r13
    3f2c:	6e 09       	sbc	r22, r14
    3f2e:	7f 09       	sbc	r23, r15
    3f30:	2a e0       	ldi	r18, 0x0A	; 10
    3f32:	ce 01       	movw	r24, r28
    3f34:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_ZN5Print11printNumberEmh>
    3f38:	80 0f       	add	r24, r16
    3f3a:	91 1f       	adc	r25, r17
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	ff 90       	pop	r15
    3f46:	ef 90       	pop	r14
    3f48:	df 90       	pop	r13
    3f4a:	cf 90       	pop	r12
    3f4c:	08 95       	ret
    3f4e:	2a e0       	ldi	r18, 0x0A	; 10
    3f50:	b7 01       	movw	r22, r14
    3f52:	a6 01       	movw	r20, r12
    3f54:	ce 01       	movw	r24, r28
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	1f 91       	pop	r17
    3f5c:	0f 91       	pop	r16
    3f5e:	ff 90       	pop	r15
    3f60:	ef 90       	pop	r14
    3f62:	df 90       	pop	r13
    3f64:	cf 90       	pop	r12
    3f66:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <_ZN5Print11printNumberEmh>

00003f6a <_ZN5Print5printEii>:
    3f6a:	9a 01       	movw	r18, r20
    3f6c:	ab 01       	movw	r20, r22
    3f6e:	77 0f       	add	r23, r23
    3f70:	66 0b       	sbc	r22, r22
    3f72:	77 0b       	sbc	r23, r23
    3f74:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <_ZN5Print5printEli>

00003f78 <_ZN5Print5printEmi>:
    3f78:	21 15       	cp	r18, r1
    3f7a:	31 05       	cpc	r19, r1
    3f7c:	41 f4       	brne	.+16     	; 0x3f8e <_ZN5Print5printEmi+0x16>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	ed 91       	ld	r30, X+
    3f82:	fc 91       	ld	r31, X
    3f84:	01 90       	ld	r0, Z+
    3f86:	f0 81       	ld	r31, Z
    3f88:	e0 2d       	mov	r30, r0
    3f8a:	64 2f       	mov	r22, r20
    3f8c:	09 94       	ijmp
    3f8e:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <_ZN5Print11printNumberEmh>

00003f92 <_ZN5Print5printEhi>:
    3f92:	9a 01       	movw	r18, r20
    3f94:	46 2f       	mov	r20, r22
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <_ZN5Print5printEmi>

00003fa0 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3fa0:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3fa2:	ab 01       	movw	r20, r22
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <_ZN5Print5printEmi>

00003fac <_ZN6Stream9timedReadEv>:
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
{
    3fac:	0f 93       	push	r16
    3fae:	1f 93       	push	r17
    3fb0:	cf 93       	push	r28
    3fb2:	df 93       	push	r29
    3fb4:	ec 01       	movw	r28, r24
    3fb6:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
    3fba:	68 87       	std	Y+8, r22	; 0x08
    3fbc:	79 87       	std	Y+9, r23	; 0x09
    3fbe:	8a 87       	std	Y+10, r24	; 0x0a
    3fc0:	9b 87       	std	Y+11, r25	; 0x0b
    3fc2:	e8 81       	ld	r30, Y
    3fc4:	f9 81       	ldd	r31, Y+1	; 0x01
    3fc6:	06 80       	ldd	r0, Z+6	; 0x06
    3fc8:	f7 81       	ldd	r31, Z+7	; 0x07
    3fca:	e0 2d       	mov	r30, r0
    3fcc:	ce 01       	movw	r24, r28
    3fce:	09 95       	icall
    3fd0:	97 ff       	sbrs	r25, 7
    3fd2:	17 c0       	rjmp	.+46     	; 0x4002 <_ZN6Stream9timedReadEv+0x56>
    3fd4:	0e 94 18 21 	call	0x4230	; 0x4230 <millis>
    3fd8:	08 85       	ldd	r16, Y+8	; 0x08
    3fda:	19 85       	ldd	r17, Y+9	; 0x09
    3fdc:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fde:	3b 85       	ldd	r19, Y+11	; 0x0b
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	80 1b       	sub	r24, r16
    3fe6:	91 0b       	sbc	r25, r17
    3fe8:	a2 0b       	sbc	r26, r18
    3fea:	b3 0b       	sbc	r27, r19
    3fec:	0c 81       	ldd	r16, Y+4	; 0x04
    3fee:	1d 81       	ldd	r17, Y+5	; 0x05
    3ff0:	2e 81       	ldd	r18, Y+6	; 0x06
    3ff2:	3f 81       	ldd	r19, Y+7	; 0x07
    3ff4:	80 17       	cp	r24, r16
    3ff6:	91 07       	cpc	r25, r17
    3ff8:	a2 07       	cpc	r26, r18
    3ffa:	b3 07       	cpc	r27, r19
    3ffc:	10 f3       	brcs	.-60     	; 0x3fc2 <_ZN6Stream9timedReadEv+0x16>
    3ffe:	8f ef       	ldi	r24, 0xFF	; 255
    4000:	9f ef       	ldi	r25, 0xFF	; 255
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	08 95       	ret

0000400c <_ZN6Stream9findMultiEPNS_11MultiTargetEi>:
    400c:	4f 92       	push	r4
    400e:	5f 92       	push	r5
    4010:	6f 92       	push	r6
    4012:	7f 92       	push	r7
    4014:	8f 92       	push	r8
    4016:	9f 92       	push	r9
    4018:	af 92       	push	r10
    401a:	bf 92       	push	r11
    401c:	cf 92       	push	r12
    401e:	df 92       	push	r13
    4020:	ef 92       	push	r14
    4022:	ff 92       	push	r15
    4024:	0f 93       	push	r16
    4026:	1f 93       	push	r17
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	8c 01       	movw	r16, r24
    402e:	eb 01       	movw	r28, r22
    4030:	86 e0       	ldi	r24, 0x06	; 6
    4032:	84 9f       	mul	r24, r20
    4034:	40 01       	movw	r8, r0
    4036:	85 9f       	mul	r24, r21
    4038:	90 0c       	add	r9, r0
    403a:	11 24       	eor	r1, r1
    403c:	86 0e       	add	r8, r22
    403e:	97 1e       	adc	r9, r23
    4040:	fb 01       	movw	r30, r22
    4042:	e8 15       	cp	r30, r8
    4044:	f9 05       	cpc	r31, r9
    4046:	f8 f4       	brcc	.+62     	; 0x4086 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x7a>
    4048:	82 81       	ldd	r24, Z+2	; 0x02
    404a:	93 81       	ldd	r25, Z+3	; 0x03
    404c:	89 2b       	or	r24, r25
    404e:	11 f1       	breq	.+68     	; 0x4094 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x88>
    4050:	36 96       	adiw	r30, 0x06	; 6
    4052:	f7 cf       	rjmp	.-18     	; 0x4042 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x36>
    4054:	60 81       	ld	r22, Z
    4056:	71 81       	ldd	r23, Z+1	; 0x01
    4058:	44 81       	ldd	r20, Z+4	; 0x04
    405a:	55 81       	ldd	r21, Z+5	; 0x05
    405c:	db 01       	movw	r26, r22
    405e:	a4 0f       	add	r26, r20
    4060:	b5 1f       	adc	r27, r21
    4062:	2c 91       	ld	r18, X
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	82 17       	cp	r24, r18
    4068:	93 07       	cpc	r25, r19
    406a:	11 f5       	brne	.+68     	; 0x40b0 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xa4>
    406c:	4f 5f       	subi	r20, 0xFF	; 255
    406e:	5f 4f       	sbci	r21, 0xFF	; 255
    4070:	55 83       	std	Z+5, r21	; 0x05
    4072:	44 83       	std	Z+4, r20	; 0x04
    4074:	22 81       	ldd	r18, Z+2	; 0x02
    4076:	33 81       	ldd	r19, Z+3	; 0x03
    4078:	42 17       	cp	r20, r18
    407a:	53 07       	cpc	r21, r19
    407c:	59 f0       	breq	.+22     	; 0x4094 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x88>
    407e:	36 96       	adiw	r30, 0x06	; 6
    4080:	e8 15       	cp	r30, r8
    4082:	f9 05       	cpc	r31, r9
    4084:	38 f3       	brcs	.-50     	; 0x4054 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x48>
    4086:	c8 01       	movw	r24, r16
    4088:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <_ZN6Stream9timedReadEv>
    408c:	97 fd       	sbrc	r25, 7
    408e:	44 c0       	rjmp	.+136    	; 0x4118 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x10c>
    4090:	fe 01       	movw	r30, r28
    4092:	f6 cf       	rjmp	.-20     	; 0x4080 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x74>
    4094:	ec 1b       	sub	r30, r28
    4096:	fd 0b       	sbc	r31, r29
    4098:	f5 95       	asr	r31
    409a:	e7 95       	ror	r30
    409c:	2b ea       	ldi	r18, 0xAB	; 171
    409e:	3a ea       	ldi	r19, 0xAA	; 170
    40a0:	e2 9f       	mul	r30, r18
    40a2:	c0 01       	movw	r24, r0
    40a4:	e3 9f       	mul	r30, r19
    40a6:	90 0d       	add	r25, r0
    40a8:	f2 9f       	mul	r31, r18
    40aa:	90 0d       	add	r25, r0
    40ac:	11 24       	eor	r1, r1
    40ae:	36 c0       	rjmp	.+108    	; 0x411c <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x110>
    40b0:	41 15       	cp	r20, r1
    40b2:	51 05       	cpc	r21, r1
    40b4:	21 f3       	breq	.-56     	; 0x407e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x72>
    40b6:	c4 80       	ldd	r12, Z+4	; 0x04
    40b8:	d5 80       	ldd	r13, Z+5	; 0x05
    40ba:	96 01       	movw	r18, r12
    40bc:	21 50       	subi	r18, 0x01	; 1
    40be:	31 09       	sbc	r19, r1
    40c0:	35 83       	std	Z+5, r19	; 0x05
    40c2:	24 83       	std	Z+4, r18	; 0x04
    40c4:	db 01       	movw	r26, r22
    40c6:	a2 0f       	add	r26, r18
    40c8:	b3 1f       	adc	r27, r19
    40ca:	ac 91       	ld	r26, X
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	8a 17       	cp	r24, r26
    40d0:	9b 07       	cpc	r25, r27
    40d2:	f9 f4       	brne	.+62     	; 0x4112 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x106>
    40d4:	21 15       	cp	r18, r1
    40d6:	31 05       	cpc	r19, r1
    40d8:	c9 f0       	breq	.+50     	; 0x410c <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x100>
    40da:	5b 01       	movw	r10, r22
    40dc:	7a 01       	movw	r14, r20
    40de:	e2 1a       	sub	r14, r18
    40e0:	f3 0a       	sbc	r15, r19
    40e2:	e6 0e       	add	r14, r22
    40e4:	f7 1e       	adc	r15, r23
    40e6:	41 2c       	mov	r4, r1
    40e8:	51 2c       	mov	r5, r1
    40ea:	d5 01       	movw	r26, r10
    40ec:	6d 90       	ld	r6, X+
    40ee:	5d 01       	movw	r10, r26
    40f0:	d7 01       	movw	r26, r14
    40f2:	7d 90       	ld	r7, X+
    40f4:	7d 01       	movw	r14, r26
    40f6:	67 10       	cpse	r6, r7
    40f8:	06 c0       	rjmp	.+12     	; 0x4106 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xfa>
    40fa:	bf ef       	ldi	r27, 0xFF	; 255
    40fc:	4b 1a       	sub	r4, r27
    40fe:	5b 0a       	sbc	r5, r27
    4100:	42 16       	cp	r4, r18
    4102:	53 06       	cpc	r5, r19
    4104:	90 f3       	brcs	.-28     	; 0x40ea <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xde>
    4106:	42 16       	cp	r4, r18
    4108:	53 06       	cpc	r5, r19
    410a:	a9 f6       	brne	.-86     	; 0x40b6 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xaa>
    410c:	d5 82       	std	Z+5, r13	; 0x05
    410e:	c4 82       	std	Z+4, r12	; 0x04
    4110:	b6 cf       	rjmp	.-148    	; 0x407e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x72>
    4112:	23 2b       	or	r18, r19
    4114:	81 f6       	brne	.-96     	; 0x40b6 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xaa>
    4116:	b3 cf       	rjmp	.-154    	; 0x407e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x72>
    4118:	8f ef       	ldi	r24, 0xFF	; 255
    411a:	9f ef       	ldi	r25, 0xFF	; 255
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	ff 90       	pop	r15
    4126:	ef 90       	pop	r14
    4128:	df 90       	pop	r13
    412a:	cf 90       	pop	r12
    412c:	bf 90       	pop	r11
    412e:	af 90       	pop	r10
    4130:	9f 90       	pop	r9
    4132:	8f 90       	pop	r8
    4134:	7f 90       	pop	r7
    4136:	6f 90       	pop	r6
    4138:	5f 90       	pop	r5
    413a:	4f 90       	pop	r4
    413c:	08 95       	ret

0000413e <_ZN6Stream9findUntilEPcjS0_j.part.0>:
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	00 d0       	rcall	.+0      	; 0x4144 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x6>
    4144:	00 d0       	rcall	.+0      	; 0x4146 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x8>
    4146:	00 d0       	rcall	.+0      	; 0x4148 <_ZN6Stream9findUntilEPcjS0_j.part.0+0xa>
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	fe 01       	movw	r30, r28
    414e:	31 96       	adiw	r30, 0x01	; 1
    4150:	26 e0       	ldi	r18, 0x06	; 6
    4152:	df 01       	movw	r26, r30
    4154:	1d 92       	st	X+, r1
    4156:	2a 95       	dec	r18
    4158:	e9 f7       	brne	.-6      	; 0x4154 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x16>
    415a:	7a 83       	std	Y+2, r23	; 0x02
    415c:	69 83       	std	Y+1, r22	; 0x01
    415e:	5c 83       	std	Y+4, r21	; 0x04
    4160:	4b 83       	std	Y+3, r20	; 0x03
    4162:	41 e0       	ldi	r20, 0x01	; 1
    4164:	50 e0       	ldi	r21, 0x00	; 0
    4166:	bf 01       	movw	r22, r30
    4168:	0e 94 06 20 	call	0x400c	; 0x400c <_ZN6Stream9findMultiEPNS_11MultiTargetEi>
    416c:	21 e0       	ldi	r18, 0x01	; 1
    416e:	89 2b       	or	r24, r25
    4170:	09 f0       	breq	.+2      	; 0x4174 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x36>
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	82 2f       	mov	r24, r18
    4176:	26 96       	adiw	r28, 0x06	; 6
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	08 95       	ret

00004188 <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, strlen(target), NULL, 0);
    4188:	fb 01       	movw	r30, r22
    418a:	01 90       	ld	r0, Z+
    418c:	00 20       	and	r0, r0
    418e:	e9 f7       	brne	.-6      	; 0x418a <_ZN6Stream4findEPc+0x2>
    4190:	31 97       	sbiw	r30, 0x01	; 1
    4192:	af 01       	movw	r20, r30
    4194:	46 1b       	sub	r20, r22
    4196:	57 0b       	sbc	r21, r23
    4198:	0c 94 9f 20 	jmp	0x413e	; 0x413e <_ZN6Stream9findUntilEPcjS0_j.part.0>

0000419c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    419c:	1f 92       	push	r1
    419e:	0f 92       	push	r0
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	0f 92       	push	r0
    41a4:	11 24       	eor	r1, r1
    41a6:	2f 93       	push	r18
    41a8:	3f 93       	push	r19
    41aa:	8f 93       	push	r24
    41ac:	9f 93       	push	r25
    41ae:	af 93       	push	r26
    41b0:	bf 93       	push	r27
    41b2:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <timer0_millis>
    41b6:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <timer0_millis+0x1>
    41ba:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <timer0_millis+0x2>
    41be:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <timer0_millis+0x3>
    41c2:	30 91 48 05 	lds	r19, 0x0548	; 0x800548 <timer0_fract>
    41c6:	23 e0       	ldi	r18, 0x03	; 3
    41c8:	23 0f       	add	r18, r19
    41ca:	2d 37       	cpi	r18, 0x7D	; 125
    41cc:	20 f4       	brcc	.+8      	; 0x41d6 <__vector_16+0x3a>
    41ce:	01 96       	adiw	r24, 0x01	; 1
    41d0:	a1 1d       	adc	r26, r1
    41d2:	b1 1d       	adc	r27, r1
    41d4:	05 c0       	rjmp	.+10     	; 0x41e0 <__vector_16+0x44>
    41d6:	26 e8       	ldi	r18, 0x86	; 134
    41d8:	23 0f       	add	r18, r19
    41da:	02 96       	adiw	r24, 0x02	; 2
    41dc:	a1 1d       	adc	r26, r1
    41de:	b1 1d       	adc	r27, r1
    41e0:	20 93 48 05 	sts	0x0548, r18	; 0x800548 <timer0_fract>
    41e4:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <timer0_millis>
    41e8:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <timer0_millis+0x1>
    41ec:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <timer0_millis+0x2>
    41f0:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <timer0_millis+0x3>
    41f4:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <timer0_overflow_count>
    41f8:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <timer0_overflow_count+0x1>
    41fc:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <timer0_overflow_count+0x2>
    4200:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <timer0_overflow_count+0x3>
    4204:	01 96       	adiw	r24, 0x01	; 1
    4206:	a1 1d       	adc	r26, r1
    4208:	b1 1d       	adc	r27, r1
    420a:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <timer0_overflow_count>
    420e:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <timer0_overflow_count+0x1>
    4212:	a0 93 4f 05 	sts	0x054F, r26	; 0x80054f <timer0_overflow_count+0x2>
    4216:	b0 93 50 05 	sts	0x0550, r27	; 0x800550 <timer0_overflow_count+0x3>
    421a:	bf 91       	pop	r27
    421c:	af 91       	pop	r26
    421e:	9f 91       	pop	r25
    4220:	8f 91       	pop	r24
    4222:	3f 91       	pop	r19
    4224:	2f 91       	pop	r18
    4226:	0f 90       	pop	r0
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	0f 90       	pop	r0
    422c:	1f 90       	pop	r1
    422e:	18 95       	reti

00004230 <millis>:
    4230:	2f b7       	in	r18, 0x3f	; 63
    4232:	f8 94       	cli
    4234:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <timer0_millis>
    4238:	70 91 4a 05 	lds	r23, 0x054A	; 0x80054a <timer0_millis+0x1>
    423c:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <timer0_millis+0x2>
    4240:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <timer0_millis+0x3>
    4244:	2f bf       	out	0x3f, r18	; 63
    4246:	08 95       	ret

00004248 <micros>:
    4248:	3f b7       	in	r19, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <timer0_overflow_count>
    4250:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <timer0_overflow_count+0x1>
    4254:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <timer0_overflow_count+0x2>
    4258:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <timer0_overflow_count+0x3>
    425c:	26 b5       	in	r18, 0x26	; 38
    425e:	a8 9b       	sbis	0x15, 0	; 21
    4260:	05 c0       	rjmp	.+10     	; 0x426c <micros+0x24>
    4262:	2f 3f       	cpi	r18, 0xFF	; 255
    4264:	19 f0       	breq	.+6      	; 0x426c <micros+0x24>
    4266:	01 96       	adiw	r24, 0x01	; 1
    4268:	a1 1d       	adc	r26, r1
    426a:	b1 1d       	adc	r27, r1
    426c:	3f bf       	out	0x3f, r19	; 63
    426e:	ba 2f       	mov	r27, r26
    4270:	a9 2f       	mov	r26, r25
    4272:	98 2f       	mov	r25, r24
    4274:	88 27       	eor	r24, r24
    4276:	82 0f       	add	r24, r18
    4278:	91 1d       	adc	r25, r1
    427a:	a1 1d       	adc	r26, r1
    427c:	b1 1d       	adc	r27, r1
    427e:	bc 01       	movw	r22, r24
    4280:	cd 01       	movw	r24, r26
    4282:	42 e0       	ldi	r20, 0x02	; 2
    4284:	66 0f       	add	r22, r22
    4286:	77 1f       	adc	r23, r23
    4288:	88 1f       	adc	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	4a 95       	dec	r20
    428e:	d1 f7       	brne	.-12     	; 0x4284 <micros+0x3c>
    4290:	08 95       	ret

00004292 <delay>:
    4292:	8f 92       	push	r8
    4294:	9f 92       	push	r9
    4296:	af 92       	push	r10
    4298:	bf 92       	push	r11
    429a:	cf 92       	push	r12
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	6b 01       	movw	r12, r22
    42a4:	7c 01       	movw	r14, r24
    42a6:	0e 94 24 21 	call	0x4248	; 0x4248 <micros>
    42aa:	4b 01       	movw	r8, r22
    42ac:	5c 01       	movw	r10, r24
    42ae:	c1 14       	cp	r12, r1
    42b0:	d1 04       	cpc	r13, r1
    42b2:	e1 04       	cpc	r14, r1
    42b4:	f1 04       	cpc	r15, r1
    42b6:	01 f1       	breq	.+64     	; 0x42f8 <delay+0x66>
    42b8:	0e 94 79 23 	call	0x46f2	; 0x46f2 <yield>
    42bc:	0e 94 24 21 	call	0x4248	; 0x4248 <micros>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	88 19       	sub	r24, r8
    42c6:	99 09       	sbc	r25, r9
    42c8:	aa 09       	sbc	r26, r10
    42ca:	bb 09       	sbc	r27, r11
    42cc:	88 3e       	cpi	r24, 0xE8	; 232
    42ce:	93 40       	sbci	r25, 0x03	; 3
    42d0:	a1 05       	cpc	r26, r1
    42d2:	b1 05       	cpc	r27, r1
    42d4:	60 f3       	brcs	.-40     	; 0x42ae <delay+0x1c>
    42d6:	21 e0       	ldi	r18, 0x01	; 1
    42d8:	c2 1a       	sub	r12, r18
    42da:	d1 08       	sbc	r13, r1
    42dc:	e1 08       	sbc	r14, r1
    42de:	f1 08       	sbc	r15, r1
    42e0:	88 ee       	ldi	r24, 0xE8	; 232
    42e2:	88 0e       	add	r8, r24
    42e4:	83 e0       	ldi	r24, 0x03	; 3
    42e6:	98 1e       	adc	r9, r24
    42e8:	a1 1c       	adc	r10, r1
    42ea:	b1 1c       	adc	r11, r1
    42ec:	c1 14       	cp	r12, r1
    42ee:	d1 04       	cpc	r13, r1
    42f0:	e1 04       	cpc	r14, r1
    42f2:	f1 04       	cpc	r15, r1
    42f4:	19 f7       	brne	.-58     	; 0x42bc <delay+0x2a>
    42f6:	db cf       	rjmp	.-74     	; 0x42ae <delay+0x1c>
    42f8:	ff 90       	pop	r15
    42fa:	ef 90       	pop	r14
    42fc:	df 90       	pop	r13
    42fe:	cf 90       	pop	r12
    4300:	bf 90       	pop	r11
    4302:	af 90       	pop	r10
    4304:	9f 90       	pop	r9
    4306:	8f 90       	pop	r8
    4308:	08 95       	ret

0000430a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    430a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    430c:	84 b5       	in	r24, 0x24	; 36
    430e:	82 60       	ori	r24, 0x02	; 2
    4310:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4312:	84 b5       	in	r24, 0x24	; 36
    4314:	81 60       	ori	r24, 0x01	; 1
    4316:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4318:	85 b5       	in	r24, 0x25	; 37
    431a:	82 60       	ori	r24, 0x02	; 2
    431c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    431e:	85 b5       	in	r24, 0x25	; 37
    4320:	81 60       	ori	r24, 0x01	; 1
    4322:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4324:	ee e6       	ldi	r30, 0x6E	; 110
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	80 81       	ld	r24, Z
    432a:	81 60       	ori	r24, 0x01	; 1
    432c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    432e:	e1 e8       	ldi	r30, 0x81	; 129
    4330:	f0 e0       	ldi	r31, 0x00	; 0
    4332:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4334:	80 81       	ld	r24, Z
    4336:	82 60       	ori	r24, 0x02	; 2
    4338:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    433a:	80 81       	ld	r24, Z
    433c:	81 60       	ori	r24, 0x01	; 1
    433e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4340:	e0 e8       	ldi	r30, 0x80	; 128
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	81 60       	ori	r24, 0x01	; 1
    4348:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    434a:	e1 eb       	ldi	r30, 0xB1	; 177
    434c:	f0 e0       	ldi	r31, 0x00	; 0
    434e:	80 81       	ld	r24, Z
    4350:	84 60       	ori	r24, 0x04	; 4
    4352:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4354:	e0 eb       	ldi	r30, 0xB0	; 176
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	80 81       	ld	r24, Z
    435a:	81 60       	ori	r24, 0x01	; 1
    435c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    435e:	ea e7       	ldi	r30, 0x7A	; 122
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	80 81       	ld	r24, Z
    4364:	84 60       	ori	r24, 0x04	; 4
    4366:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4368:	80 81       	ld	r24, Z
    436a:	82 60       	ori	r24, 0x02	; 2
    436c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    436e:	80 81       	ld	r24, Z
    4370:	81 60       	ori	r24, 0x01	; 1
    4372:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4374:	80 81       	ld	r24, Z
    4376:	80 68       	ori	r24, 0x80	; 128
    4378:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    437a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    437e:	08 95       	ret

00004380 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4380:	83 30       	cpi	r24, 0x03	; 3
    4382:	81 f0       	breq	.+32     	; 0x43a4 <turnOffPWM+0x24>
    4384:	28 f4       	brcc	.+10     	; 0x4390 <turnOffPWM+0x10>
    4386:	81 30       	cpi	r24, 0x01	; 1
    4388:	99 f0       	breq	.+38     	; 0x43b0 <turnOffPWM+0x30>
    438a:	82 30       	cpi	r24, 0x02	; 2
    438c:	a1 f0       	breq	.+40     	; 0x43b6 <turnOffPWM+0x36>
    438e:	08 95       	ret
    4390:	87 30       	cpi	r24, 0x07	; 7
    4392:	a9 f0       	breq	.+42     	; 0x43be <turnOffPWM+0x3e>
    4394:	88 30       	cpi	r24, 0x08	; 8
    4396:	b9 f0       	breq	.+46     	; 0x43c6 <turnOffPWM+0x46>
    4398:	84 30       	cpi	r24, 0x04	; 4
    439a:	d1 f4       	brne	.+52     	; 0x43d0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    439c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    43a0:	8f 7d       	andi	r24, 0xDF	; 223
    43a2:	03 c0       	rjmp	.+6      	; 0x43aa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    43a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    43a8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    43aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    43ae:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    43b0:	84 b5       	in	r24, 0x24	; 36
    43b2:	8f 77       	andi	r24, 0x7F	; 127
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    43b6:	84 b5       	in	r24, 0x24	; 36
    43b8:	8f 7d       	andi	r24, 0xDF	; 223
    43ba:	84 bd       	out	0x24, r24	; 36
    43bc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    43be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    43c2:	8f 77       	andi	r24, 0x7F	; 127
    43c4:	03 c0       	rjmp	.+6      	; 0x43cc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    43c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    43ca:	8f 7d       	andi	r24, 0xDF	; 223
    43cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    43d0:	08 95       	ret

000043d2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    43d2:	cf 93       	push	r28
    43d4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	fc 01       	movw	r30, r24
    43da:	e8 50       	subi	r30, 0x08	; 8
    43dc:	fd 4f       	sbci	r31, 0xFD	; 253
    43de:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    43e0:	fc 01       	movw	r30, r24
    43e2:	e4 5f       	subi	r30, 0xF4	; 244
    43e4:	fc 4f       	sbci	r31, 0xFC	; 252
    43e6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    43e8:	88 23       	and	r24, r24
    43ea:	61 f1       	breq	.+88     	; 0x4444 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25
    43f2:	fc 01       	movw	r30, r24
    43f4:	ec 5c       	subi	r30, 0xCC	; 204
    43f6:	fc 4f       	sbci	r31, 0xFC	; 252
    43f8:	c5 91       	lpm	r28, Z+
    43fa:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    43fc:	fc 01       	movw	r30, r24
    43fe:	e6 5d       	subi	r30, 0xD6	; 214
    4400:	fc 4f       	sbci	r31, 0xFC	; 252
    4402:	a5 91       	lpm	r26, Z+
    4404:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4406:	61 11       	cpse	r22, r1
    4408:	09 c0       	rjmp	.+18     	; 0x441c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    440a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    440c:	f8 94       	cli
		*reg &= ~bit;
    440e:	88 81       	ld	r24, Y
    4410:	20 95       	com	r18
    4412:	82 23       	and	r24, r18
    4414:	88 83       	st	Y, r24
		*out &= ~bit;
    4416:	ec 91       	ld	r30, X
    4418:	2e 23       	and	r18, r30
    441a:	0b c0       	rjmp	.+22     	; 0x4432 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    441c:	62 30       	cpi	r22, 0x02	; 2
    441e:	61 f4       	brne	.+24     	; 0x4438 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4420:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4422:	f8 94       	cli
		*reg &= ~bit;
    4424:	38 81       	ld	r19, Y
    4426:	82 2f       	mov	r24, r18
    4428:	80 95       	com	r24
    442a:	83 23       	and	r24, r19
    442c:	88 83       	st	Y, r24
		*out |= bit;
    442e:	ec 91       	ld	r30, X
    4430:	2e 2b       	or	r18, r30
    4432:	2c 93       	st	X, r18
		SREG = oldSREG;
    4434:	9f bf       	out	0x3f, r25	; 63
    4436:	06 c0       	rjmp	.+12     	; 0x4444 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4438:	8f b7       	in	r24, 0x3f	; 63
                cli();
    443a:	f8 94       	cli
		*reg |= bit;
    443c:	e8 81       	ld	r30, Y
    443e:	2e 2b       	or	r18, r30
    4440:	28 83       	st	Y, r18
		SREG = oldSREG;
    4442:	8f bf       	out	0x3f, r24	; 63
	}
}
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	08 95       	ret

0000444a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4450:	28 2f       	mov	r18, r24
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	f9 01       	movw	r30, r18
    4456:	ec 51       	subi	r30, 0x1C	; 28
    4458:	fd 4f       	sbci	r31, 0xFD	; 253
    445a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    445c:	f9 01       	movw	r30, r18
    445e:	e8 50       	subi	r30, 0x08	; 8
    4460:	fd 4f       	sbci	r31, 0xFD	; 253
    4462:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4464:	f9 01       	movw	r30, r18
    4466:	e4 5f       	subi	r30, 0xF4	; 244
    4468:	fc 4f       	sbci	r31, 0xFC	; 252
    446a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    446c:	cc 23       	and	r28, r28
    446e:	c9 f0       	breq	.+50     	; 0x44a2 <digitalWrite+0x58>
    4470:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4472:	81 11       	cpse	r24, r1
    4474:	0e 94 c0 21 	call	0x4380	; 0x4380 <turnOffPWM>

	out = portOutputRegister(port);
    4478:	ec 2f       	mov	r30, r28
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	ee 0f       	add	r30, r30
    447e:	ff 1f       	adc	r31, r31
    4480:	e6 5d       	subi	r30, 0xD6	; 214
    4482:	fc 4f       	sbci	r31, 0xFC	; 252
    4484:	a5 91       	lpm	r26, Z+
    4486:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4488:	8f b7       	in	r24, 0x3f	; 63
	cli();
    448a:	f8 94       	cli

	if (val == LOW) {
    448c:	11 11       	cpse	r17, r1
    448e:	05 c0       	rjmp	.+10     	; 0x449a <digitalWrite+0x50>
		*out &= ~bit;
    4490:	9c 91       	ld	r25, X
    4492:	ed 2f       	mov	r30, r29
    4494:	e0 95       	com	r30
    4496:	e9 23       	and	r30, r25
    4498:	02 c0       	rjmp	.+4      	; 0x449e <digitalWrite+0x54>
	} else {
		*out |= bit;
    449a:	ec 91       	ld	r30, X
    449c:	ed 2b       	or	r30, r29
    449e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    44a0:	8f bf       	out	0x3f, r24	; 63
}
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	1f 91       	pop	r17
    44a8:	08 95       	ret

000044aa <_ZN6StringD1Ev>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    44aa:	fc 01       	movw	r30, r24
    44ac:	80 81       	ld	r24, Z
    44ae:	91 81       	ldd	r25, Z+1	; 0x01
    44b0:	0c 94 37 24 	jmp	0x486e	; 0x486e <free>

000044b4 <_ZN6String10invalidateEv>:
    44b4:	cf 93       	push	r28
    44b6:	df 93       	push	r29
    44b8:	ec 01       	movw	r28, r24
    44ba:	88 81       	ld	r24, Y
    44bc:	99 81       	ldd	r25, Y+1	; 0x01
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	11 f0       	breq	.+4      	; 0x44c6 <_ZN6String10invalidateEv+0x12>
    44c2:	0e 94 37 24 	call	0x486e	; 0x486e <free>
    44c6:	19 82       	std	Y+1, r1	; 0x01
    44c8:	18 82       	st	Y, r1
    44ca:	1d 82       	std	Y+5, r1	; 0x05
    44cc:	1c 82       	std	Y+4, r1	; 0x04
    44ce:	1b 82       	std	Y+3, r1	; 0x03
    44d0:	1a 82       	std	Y+2, r1	; 0x02
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	08 95       	ret

000044d8 <_ZN6String12changeBufferEj>:
    44d8:	0f 93       	push	r16
    44da:	1f 93       	push	r17
    44dc:	cf 93       	push	r28
    44de:	df 93       	push	r29
    44e0:	ec 01       	movw	r28, r24
    44e2:	8b 01       	movw	r16, r22
    44e4:	6f 5f       	subi	r22, 0xFF	; 255
    44e6:	7f 4f       	sbci	r23, 0xFF	; 255
    44e8:	88 81       	ld	r24, Y
    44ea:	99 81       	ldd	r25, Y+1	; 0x01
    44ec:	0e 94 cf 24 	call	0x499e	; 0x499e <realloc>
    44f0:	00 97       	sbiw	r24, 0x00	; 0
    44f2:	31 f0       	breq	.+12     	; 0x4500 <_ZN6String12changeBufferEj+0x28>
    44f4:	99 83       	std	Y+1, r25	; 0x01
    44f6:	88 83       	st	Y, r24
    44f8:	1b 83       	std	Y+3, r17	; 0x03
    44fa:	0a 83       	std	Y+2, r16	; 0x02
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	01 c0       	rjmp	.+2      	; 0x4502 <_ZN6String12changeBufferEj+0x2a>
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	08 95       	ret

0000450c <_ZN6String7reserveEj>:
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	ec 01       	movw	r28, r24
    4512:	88 81       	ld	r24, Y
    4514:	99 81       	ldd	r25, Y+1	; 0x01
    4516:	89 2b       	or	r24, r25
    4518:	29 f0       	breq	.+10     	; 0x4524 <_ZN6String7reserveEj+0x18>
    451a:	8a 81       	ldd	r24, Y+2	; 0x02
    451c:	9b 81       	ldd	r25, Y+3	; 0x03
    451e:	86 17       	cp	r24, r22
    4520:	97 07       	cpc	r25, r23
    4522:	60 f4       	brcc	.+24     	; 0x453c <_ZN6String7reserveEj+0x30>
    4524:	ce 01       	movw	r24, r28
    4526:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <_ZN6String12changeBufferEj>
    452a:	88 23       	and	r24, r24
    452c:	41 f0       	breq	.+16     	; 0x453e <_ZN6String7reserveEj+0x32>
    452e:	8c 81       	ldd	r24, Y+4	; 0x04
    4530:	9d 81       	ldd	r25, Y+5	; 0x05
    4532:	89 2b       	or	r24, r25
    4534:	19 f4       	brne	.+6      	; 0x453c <_ZN6String7reserveEj+0x30>
    4536:	e8 81       	ld	r30, Y
    4538:	f9 81       	ldd	r31, Y+1	; 0x01
    453a:	10 82       	st	Z, r1
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	08 95       	ret

00004544 <_ZN6String4copyEPKcj>:
    4544:	ef 92       	push	r14
    4546:	ff 92       	push	r15
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	ec 01       	movw	r28, r24
    4552:	7b 01       	movw	r14, r22
    4554:	8a 01       	movw	r16, r20
    4556:	ba 01       	movw	r22, r20
    4558:	0e 94 86 22 	call	0x450c	; 0x450c <_ZN6String7reserveEj>
    455c:	81 11       	cpse	r24, r1
    455e:	04 c0       	rjmp	.+8      	; 0x4568 <_ZN6String4copyEPKcj+0x24>
    4560:	ce 01       	movw	r24, r28
    4562:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <_ZN6String10invalidateEv>
    4566:	07 c0       	rjmp	.+14     	; 0x4576 <_ZN6String4copyEPKcj+0x32>
    4568:	1d 83       	std	Y+5, r17	; 0x05
    456a:	0c 83       	std	Y+4, r16	; 0x04
    456c:	b7 01       	movw	r22, r14
    456e:	88 81       	ld	r24, Y
    4570:	99 81       	ldd	r25, Y+1	; 0x01
    4572:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <strcpy>
    4576:	ce 01       	movw	r24, r28
    4578:	df 91       	pop	r29
    457a:	cf 91       	pop	r28
    457c:	1f 91       	pop	r17
    457e:	0f 91       	pop	r16
    4580:	ff 90       	pop	r15
    4582:	ef 90       	pop	r14
    4584:	08 95       	ret

00004586 <_ZN6StringC1EPKc>:
    4586:	fc 01       	movw	r30, r24
    4588:	11 82       	std	Z+1, r1	; 0x01
    458a:	10 82       	st	Z, r1
    458c:	13 82       	std	Z+3, r1	; 0x03
    458e:	12 82       	std	Z+2, r1	; 0x02
    4590:	15 82       	std	Z+5, r1	; 0x05
    4592:	14 82       	std	Z+4, r1	; 0x04
    4594:	61 15       	cp	r22, r1
    4596:	71 05       	cpc	r23, r1
    4598:	51 f0       	breq	.+20     	; 0x45ae <_ZN6StringC1EPKc+0x28>
    459a:	fb 01       	movw	r30, r22
    459c:	01 90       	ld	r0, Z+
    459e:	00 20       	and	r0, r0
    45a0:	e9 f7       	brne	.-6      	; 0x459c <_ZN6StringC1EPKc+0x16>
    45a2:	31 97       	sbiw	r30, 0x01	; 1
    45a4:	af 01       	movw	r20, r30
    45a6:	46 1b       	sub	r20, r22
    45a8:	57 0b       	sbc	r21, r23
    45aa:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <_ZN6String4copyEPKcj>
    45ae:	08 95       	ret

000045b0 <_ZN6String6concatEPKcj>:
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	fc 01       	movw	r30, r24
    45be:	24 81       	ldd	r18, Z+4	; 0x04
    45c0:	35 81       	ldd	r19, Z+5	; 0x05
    45c2:	61 15       	cp	r22, r1
    45c4:	71 05       	cpc	r23, r1
    45c6:	11 f4       	brne	.+4      	; 0x45cc <_ZN6String6concatEPKcj+0x1c>
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	19 c0       	rjmp	.+50     	; 0x45fe <_ZN6String6concatEPKcj+0x4e>
    45cc:	41 15       	cp	r20, r1
    45ce:	51 05       	cpc	r21, r1
    45d0:	a9 f0       	breq	.+42     	; 0x45fc <_ZN6String6concatEPKcj+0x4c>
    45d2:	7b 01       	movw	r14, r22
    45d4:	ec 01       	movw	r28, r24
    45d6:	8a 01       	movw	r16, r20
    45d8:	02 0f       	add	r16, r18
    45da:	13 1f       	adc	r17, r19
    45dc:	b8 01       	movw	r22, r16
    45de:	0e 94 86 22 	call	0x450c	; 0x450c <_ZN6String7reserveEj>
    45e2:	88 23       	and	r24, r24
    45e4:	89 f3       	breq	.-30     	; 0x45c8 <_ZN6String6concatEPKcj+0x18>
    45e6:	28 81       	ld	r18, Y
    45e8:	39 81       	ldd	r19, Y+1	; 0x01
    45ea:	8c 81       	ldd	r24, Y+4	; 0x04
    45ec:	9d 81       	ldd	r25, Y+5	; 0x05
    45ee:	b7 01       	movw	r22, r14
    45f0:	82 0f       	add	r24, r18
    45f2:	93 1f       	adc	r25, r19
    45f4:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <strcpy>
    45f8:	1d 83       	std	Y+5, r17	; 0x05
    45fa:	0c 83       	std	Y+4, r16	; 0x04
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	1f 91       	pop	r17
    4604:	0f 91       	pop	r16
    4606:	ff 90       	pop	r15
    4608:	ef 90       	pop	r14
    460a:	08 95       	ret

0000460c <_ZN6String6concatEPKc>:
    460c:	61 15       	cp	r22, r1
    460e:	71 05       	cpc	r23, r1
    4610:	51 f0       	breq	.+20     	; 0x4626 <_ZN6String6concatEPKc+0x1a>
    4612:	fb 01       	movw	r30, r22
    4614:	01 90       	ld	r0, Z+
    4616:	00 20       	and	r0, r0
    4618:	e9 f7       	brne	.-6      	; 0x4614 <_ZN6String6concatEPKc+0x8>
    461a:	31 97       	sbiw	r30, 0x01	; 1
    461c:	af 01       	movw	r20, r30
    461e:	46 1b       	sub	r20, r22
    4620:	57 0b       	sbc	r21, r23
    4622:	0c 94 d8 22 	jmp	0x45b0	; 0x45b0 <_ZN6String6concatEPKcj>
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	08 95       	ret

0000462a <_ZN6String6concatEc>:
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	00 d0       	rcall	.+0      	; 0x4630 <_ZN6String6concatEc+0x6>
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
    4634:	69 83       	std	Y+1, r22	; 0x01
    4636:	1a 82       	std	Y+2, r1	; 0x02
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	be 01       	movw	r22, r28
    463e:	6f 5f       	subi	r22, 0xFF	; 255
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <_ZN6String6concatEPKcj>
    4646:	0f 90       	pop	r0
    4648:	0f 90       	pop	r0
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	08 95       	ret

00004650 <_ZN6String6concatEi>:
    4650:	ef 92       	push	r14
    4652:	ff 92       	push	r15
    4654:	0f 93       	push	r16
    4656:	1f 93       	push	r17
    4658:	cf 93       	push	r28
    465a:	df 93       	push	r29
    465c:	cd b7       	in	r28, 0x3d	; 61
    465e:	de b7       	in	r29, 0x3e	; 62
    4660:	28 97       	sbiw	r28, 0x08	; 8
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	f8 94       	cli
    4666:	de bf       	out	0x3e, r29	; 62
    4668:	0f be       	out	0x3f, r0	; 63
    466a:	cd bf       	out	0x3d, r28	; 61
    466c:	7c 01       	movw	r14, r24
    466e:	cb 01       	movw	r24, r22
    4670:	4a e0       	ldi	r20, 0x0A	; 10
    4672:	8e 01       	movw	r16, r28
    4674:	0f 5f       	subi	r16, 0xFF	; 255
    4676:	1f 4f       	sbci	r17, 0xFF	; 255
    4678:	b8 01       	movw	r22, r16
    467a:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <__itoa_ncheck>
    467e:	f8 01       	movw	r30, r16
    4680:	01 90       	ld	r0, Z+
    4682:	00 20       	and	r0, r0
    4684:	e9 f7       	brne	.-6      	; 0x4680 <_ZN6String6concatEi+0x30>
    4686:	31 97       	sbiw	r30, 0x01	; 1
    4688:	af 01       	movw	r20, r30
    468a:	40 1b       	sub	r20, r16
    468c:	51 0b       	sbc	r21, r17
    468e:	b8 01       	movw	r22, r16
    4690:	c7 01       	movw	r24, r14
    4692:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <_ZN6String6concatEPKcj>
    4696:	28 96       	adiw	r28, 0x08	; 8
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	ff 90       	pop	r15
    46ac:	ef 90       	pop	r14
    46ae:	08 95       	ret

000046b0 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
	if (fromIndex >= len) return -1;
    46b4:	fc 01       	movw	r30, r24
    46b6:	24 81       	ldd	r18, Z+4	; 0x04
    46b8:	35 81       	ldd	r19, Z+5	; 0x05
    46ba:	42 17       	cp	r20, r18
    46bc:	53 07       	cpc	r21, r19
    46be:	80 f4       	brcc	.+32     	; 0x46e0 <_ZNK6String7indexOfERKS_j+0x30>
    46c0:	fb 01       	movw	r30, r22
    46c2:	dc 01       	movw	r26, r24
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    46c4:	cd 91       	ld	r28, X+
    46c6:	dc 91       	ld	r29, X
    46c8:	60 81       	ld	r22, Z
    46ca:	71 81       	ldd	r23, Z+1	; 0x01
    46cc:	ce 01       	movw	r24, r28
    46ce:	84 0f       	add	r24, r20
    46d0:	95 1f       	adc	r25, r21
    46d2:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <strstr>
	if (found == NULL) return -1;
    46d6:	00 97       	sbiw	r24, 0x00	; 0
    46d8:	19 f0       	breq	.+6      	; 0x46e0 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    46da:	8c 1b       	sub	r24, r28
    46dc:	9d 0b       	sbc	r25, r29
    46de:	02 c0       	rjmp	.+4      	; 0x46e4 <_ZNK6String7indexOfERKS_j+0x34>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    46e0:	8f ef       	ldi	r24, 0xFF	; 255
    46e2:	9f ef       	ldi	r25, 0xFF	; 255
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    46e4:	df 91       	pop	r29
    46e6:	cf 91       	pop	r28
    46e8:	08 95       	ret

000046ea <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    46ea:	40 e0       	ldi	r20, 0x00	; 0
    46ec:	50 e0       	ldi	r21, 0x00	; 0
    46ee:	0c 94 58 23 	jmp	0x46b0	; 0x46b0 <_ZNK6String7indexOfERKS_j>

000046f2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    46f2:	08 95       	ret

000046f4 <__udivmodsi4>:
    46f4:	a1 e2       	ldi	r26, 0x21	; 33
    46f6:	1a 2e       	mov	r1, r26
    46f8:	aa 1b       	sub	r26, r26
    46fa:	bb 1b       	sub	r27, r27
    46fc:	fd 01       	movw	r30, r26
    46fe:	0d c0       	rjmp	.+26     	; 0x471a <__udivmodsi4_ep>

00004700 <__udivmodsi4_loop>:
    4700:	aa 1f       	adc	r26, r26
    4702:	bb 1f       	adc	r27, r27
    4704:	ee 1f       	adc	r30, r30
    4706:	ff 1f       	adc	r31, r31
    4708:	a2 17       	cp	r26, r18
    470a:	b3 07       	cpc	r27, r19
    470c:	e4 07       	cpc	r30, r20
    470e:	f5 07       	cpc	r31, r21
    4710:	20 f0       	brcs	.+8      	; 0x471a <__udivmodsi4_ep>
    4712:	a2 1b       	sub	r26, r18
    4714:	b3 0b       	sbc	r27, r19
    4716:	e4 0b       	sbc	r30, r20
    4718:	f5 0b       	sbc	r31, r21

0000471a <__udivmodsi4_ep>:
    471a:	66 1f       	adc	r22, r22
    471c:	77 1f       	adc	r23, r23
    471e:	88 1f       	adc	r24, r24
    4720:	99 1f       	adc	r25, r25
    4722:	1a 94       	dec	r1
    4724:	69 f7       	brne	.-38     	; 0x4700 <__udivmodsi4_loop>
    4726:	60 95       	com	r22
    4728:	70 95       	com	r23
    472a:	80 95       	com	r24
    472c:	90 95       	com	r25
    472e:	9b 01       	movw	r18, r22
    4730:	ac 01       	movw	r20, r24
    4732:	bd 01       	movw	r22, r26
    4734:	cf 01       	movw	r24, r30
    4736:	08 95       	ret

00004738 <__tablejump2__>:
    4738:	ee 0f       	add	r30, r30
    473a:	ff 1f       	adc	r31, r31
    473c:	05 90       	lpm	r0, Z+
    473e:	f4 91       	lpm	r31, Z
    4740:	e0 2d       	mov	r30, r0
    4742:	09 94       	ijmp

00004744 <malloc>:
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	82 30       	cpi	r24, 0x02	; 2
    474a:	91 05       	cpc	r25, r1
    474c:	10 f4       	brcc	.+4      	; 0x4752 <malloc+0xe>
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <__flp>
    4756:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <__flp+0x1>
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	c0 e0       	ldi	r28, 0x00	; 0
    4760:	d0 e0       	ldi	r29, 0x00	; 0
    4762:	30 97       	sbiw	r30, 0x00	; 0
    4764:	11 f1       	breq	.+68     	; 0x47aa <malloc+0x66>
    4766:	40 81       	ld	r20, Z
    4768:	51 81       	ldd	r21, Z+1	; 0x01
    476a:	48 17       	cp	r20, r24
    476c:	59 07       	cpc	r21, r25
    476e:	c0 f0       	brcs	.+48     	; 0x47a0 <malloc+0x5c>
    4770:	48 17       	cp	r20, r24
    4772:	59 07       	cpc	r21, r25
    4774:	61 f4       	brne	.+24     	; 0x478e <malloc+0x4a>
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	20 97       	sbiw	r28, 0x00	; 0
    477c:	19 f0       	breq	.+6      	; 0x4784 <malloc+0x40>
    477e:	9b 83       	std	Y+3, r25	; 0x03
    4780:	8a 83       	std	Y+2, r24	; 0x02
    4782:	2b c0       	rjmp	.+86     	; 0x47da <malloc+0x96>
    4784:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <__flp+0x1>
    4788:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <__flp>
    478c:	26 c0       	rjmp	.+76     	; 0x47da <malloc+0x96>
    478e:	21 15       	cp	r18, r1
    4790:	31 05       	cpc	r19, r1
    4792:	19 f0       	breq	.+6      	; 0x479a <malloc+0x56>
    4794:	42 17       	cp	r20, r18
    4796:	53 07       	cpc	r21, r19
    4798:	18 f4       	brcc	.+6      	; 0x47a0 <malloc+0x5c>
    479a:	9a 01       	movw	r18, r20
    479c:	be 01       	movw	r22, r28
    479e:	df 01       	movw	r26, r30
    47a0:	ef 01       	movw	r28, r30
    47a2:	02 80       	ldd	r0, Z+2	; 0x02
    47a4:	f3 81       	ldd	r31, Z+3	; 0x03
    47a6:	e0 2d       	mov	r30, r0
    47a8:	dc cf       	rjmp	.-72     	; 0x4762 <malloc+0x1e>
    47aa:	21 15       	cp	r18, r1
    47ac:	31 05       	cpc	r19, r1
    47ae:	09 f1       	breq	.+66     	; 0x47f2 <malloc+0xae>
    47b0:	28 1b       	sub	r18, r24
    47b2:	39 0b       	sbc	r19, r25
    47b4:	24 30       	cpi	r18, 0x04	; 4
    47b6:	31 05       	cpc	r19, r1
    47b8:	90 f4       	brcc	.+36     	; 0x47de <malloc+0x9a>
    47ba:	12 96       	adiw	r26, 0x02	; 2
    47bc:	8d 91       	ld	r24, X+
    47be:	9c 91       	ld	r25, X
    47c0:	13 97       	sbiw	r26, 0x03	; 3
    47c2:	61 15       	cp	r22, r1
    47c4:	71 05       	cpc	r23, r1
    47c6:	21 f0       	breq	.+8      	; 0x47d0 <malloc+0x8c>
    47c8:	fb 01       	movw	r30, r22
    47ca:	93 83       	std	Z+3, r25	; 0x03
    47cc:	82 83       	std	Z+2, r24	; 0x02
    47ce:	04 c0       	rjmp	.+8      	; 0x47d8 <malloc+0x94>
    47d0:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <__flp+0x1>
    47d4:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <__flp>
    47d8:	fd 01       	movw	r30, r26
    47da:	32 96       	adiw	r30, 0x02	; 2
    47dc:	44 c0       	rjmp	.+136    	; 0x4866 <malloc+0x122>
    47de:	fd 01       	movw	r30, r26
    47e0:	e2 0f       	add	r30, r18
    47e2:	f3 1f       	adc	r31, r19
    47e4:	81 93       	st	Z+, r24
    47e6:	91 93       	st	Z+, r25
    47e8:	22 50       	subi	r18, 0x02	; 2
    47ea:	31 09       	sbc	r19, r1
    47ec:	2d 93       	st	X+, r18
    47ee:	3c 93       	st	X, r19
    47f0:	3a c0       	rjmp	.+116    	; 0x4866 <malloc+0x122>
    47f2:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <__brkval>
    47f6:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <__brkval+0x1>
    47fa:	23 2b       	or	r18, r19
    47fc:	41 f4       	brne	.+16     	; 0x480e <malloc+0xca>
    47fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4802:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4806:	30 93 52 05 	sts	0x0552, r19	; 0x800552 <__brkval+0x1>
    480a:	20 93 51 05 	sts	0x0551, r18	; 0x800551 <__brkval>
    480e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4812:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4816:	21 15       	cp	r18, r1
    4818:	31 05       	cpc	r19, r1
    481a:	41 f4       	brne	.+16     	; 0x482c <malloc+0xe8>
    481c:	2d b7       	in	r18, 0x3d	; 61
    481e:	3e b7       	in	r19, 0x3e	; 62
    4820:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4824:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4828:	24 1b       	sub	r18, r20
    482a:	35 0b       	sbc	r19, r21
    482c:	e0 91 51 05 	lds	r30, 0x0551	; 0x800551 <__brkval>
    4830:	f0 91 52 05 	lds	r31, 0x0552	; 0x800552 <__brkval+0x1>
    4834:	e2 17       	cp	r30, r18
    4836:	f3 07       	cpc	r31, r19
    4838:	a0 f4       	brcc	.+40     	; 0x4862 <malloc+0x11e>
    483a:	2e 1b       	sub	r18, r30
    483c:	3f 0b       	sbc	r19, r31
    483e:	28 17       	cp	r18, r24
    4840:	39 07       	cpc	r19, r25
    4842:	78 f0       	brcs	.+30     	; 0x4862 <malloc+0x11e>
    4844:	ac 01       	movw	r20, r24
    4846:	4e 5f       	subi	r20, 0xFE	; 254
    4848:	5f 4f       	sbci	r21, 0xFF	; 255
    484a:	24 17       	cp	r18, r20
    484c:	35 07       	cpc	r19, r21
    484e:	48 f0       	brcs	.+18     	; 0x4862 <malloc+0x11e>
    4850:	4e 0f       	add	r20, r30
    4852:	5f 1f       	adc	r21, r31
    4854:	50 93 52 05 	sts	0x0552, r21	; 0x800552 <__brkval+0x1>
    4858:	40 93 51 05 	sts	0x0551, r20	; 0x800551 <__brkval>
    485c:	81 93       	st	Z+, r24
    485e:	91 93       	st	Z+, r25
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <malloc+0x122>
    4862:	e0 e0       	ldi	r30, 0x00	; 0
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	cf 01       	movw	r24, r30
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	08 95       	ret

0000486e <free>:
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	09 f4       	brne	.+2      	; 0x487c <free+0xe>
    487a:	8c c0       	rjmp	.+280    	; 0x4994 <free+0x126>
    487c:	fc 01       	movw	r30, r24
    487e:	32 97       	sbiw	r30, 0x02	; 2
    4880:	13 82       	std	Z+3, r1	; 0x03
    4882:	12 82       	std	Z+2, r1	; 0x02
    4884:	00 91 53 05 	lds	r16, 0x0553	; 0x800553 <__flp>
    4888:	10 91 54 05 	lds	r17, 0x0554	; 0x800554 <__flp+0x1>
    488c:	01 15       	cp	r16, r1
    488e:	11 05       	cpc	r17, r1
    4890:	81 f4       	brne	.+32     	; 0x48b2 <free+0x44>
    4892:	20 81       	ld	r18, Z
    4894:	31 81       	ldd	r19, Z+1	; 0x01
    4896:	82 0f       	add	r24, r18
    4898:	93 1f       	adc	r25, r19
    489a:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <__brkval>
    489e:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <__brkval+0x1>
    48a2:	28 17       	cp	r18, r24
    48a4:	39 07       	cpc	r19, r25
    48a6:	79 f5       	brne	.+94     	; 0x4906 <free+0x98>
    48a8:	f0 93 52 05 	sts	0x0552, r31	; 0x800552 <__brkval+0x1>
    48ac:	e0 93 51 05 	sts	0x0551, r30	; 0x800551 <__brkval>
    48b0:	71 c0       	rjmp	.+226    	; 0x4994 <free+0x126>
    48b2:	d8 01       	movw	r26, r16
    48b4:	40 e0       	ldi	r20, 0x00	; 0
    48b6:	50 e0       	ldi	r21, 0x00	; 0
    48b8:	ae 17       	cp	r26, r30
    48ba:	bf 07       	cpc	r27, r31
    48bc:	50 f4       	brcc	.+20     	; 0x48d2 <free+0x64>
    48be:	12 96       	adiw	r26, 0x02	; 2
    48c0:	2d 91       	ld	r18, X+
    48c2:	3c 91       	ld	r19, X
    48c4:	13 97       	sbiw	r26, 0x03	; 3
    48c6:	ad 01       	movw	r20, r26
    48c8:	21 15       	cp	r18, r1
    48ca:	31 05       	cpc	r19, r1
    48cc:	09 f1       	breq	.+66     	; 0x4910 <free+0xa2>
    48ce:	d9 01       	movw	r26, r18
    48d0:	f3 cf       	rjmp	.-26     	; 0x48b8 <free+0x4a>
    48d2:	9d 01       	movw	r18, r26
    48d4:	da 01       	movw	r26, r20
    48d6:	33 83       	std	Z+3, r19	; 0x03
    48d8:	22 83       	std	Z+2, r18	; 0x02
    48da:	60 81       	ld	r22, Z
    48dc:	71 81       	ldd	r23, Z+1	; 0x01
    48de:	86 0f       	add	r24, r22
    48e0:	97 1f       	adc	r25, r23
    48e2:	82 17       	cp	r24, r18
    48e4:	93 07       	cpc	r25, r19
    48e6:	69 f4       	brne	.+26     	; 0x4902 <free+0x94>
    48e8:	ec 01       	movw	r28, r24
    48ea:	28 81       	ld	r18, Y
    48ec:	39 81       	ldd	r19, Y+1	; 0x01
    48ee:	26 0f       	add	r18, r22
    48f0:	37 1f       	adc	r19, r23
    48f2:	2e 5f       	subi	r18, 0xFE	; 254
    48f4:	3f 4f       	sbci	r19, 0xFF	; 255
    48f6:	31 83       	std	Z+1, r19	; 0x01
    48f8:	20 83       	st	Z, r18
    48fa:	8a 81       	ldd	r24, Y+2	; 0x02
    48fc:	9b 81       	ldd	r25, Y+3	; 0x03
    48fe:	93 83       	std	Z+3, r25	; 0x03
    4900:	82 83       	std	Z+2, r24	; 0x02
    4902:	45 2b       	or	r20, r21
    4904:	29 f4       	brne	.+10     	; 0x4910 <free+0xa2>
    4906:	f0 93 54 05 	sts	0x0554, r31	; 0x800554 <__flp+0x1>
    490a:	e0 93 53 05 	sts	0x0553, r30	; 0x800553 <__flp>
    490e:	42 c0       	rjmp	.+132    	; 0x4994 <free+0x126>
    4910:	13 96       	adiw	r26, 0x03	; 3
    4912:	fc 93       	st	X, r31
    4914:	ee 93       	st	-X, r30
    4916:	12 97       	sbiw	r26, 0x02	; 2
    4918:	ed 01       	movw	r28, r26
    491a:	49 91       	ld	r20, Y+
    491c:	59 91       	ld	r21, Y+
    491e:	9e 01       	movw	r18, r28
    4920:	24 0f       	add	r18, r20
    4922:	35 1f       	adc	r19, r21
    4924:	e2 17       	cp	r30, r18
    4926:	f3 07       	cpc	r31, r19
    4928:	71 f4       	brne	.+28     	; 0x4946 <free+0xd8>
    492a:	80 81       	ld	r24, Z
    492c:	91 81       	ldd	r25, Z+1	; 0x01
    492e:	84 0f       	add	r24, r20
    4930:	95 1f       	adc	r25, r21
    4932:	02 96       	adiw	r24, 0x02	; 2
    4934:	11 96       	adiw	r26, 0x01	; 1
    4936:	9c 93       	st	X, r25
    4938:	8e 93       	st	-X, r24
    493a:	82 81       	ldd	r24, Z+2	; 0x02
    493c:	93 81       	ldd	r25, Z+3	; 0x03
    493e:	13 96       	adiw	r26, 0x03	; 3
    4940:	9c 93       	st	X, r25
    4942:	8e 93       	st	-X, r24
    4944:	12 97       	sbiw	r26, 0x02	; 2
    4946:	e0 e0       	ldi	r30, 0x00	; 0
    4948:	f0 e0       	ldi	r31, 0x00	; 0
    494a:	d8 01       	movw	r26, r16
    494c:	12 96       	adiw	r26, 0x02	; 2
    494e:	8d 91       	ld	r24, X+
    4950:	9c 91       	ld	r25, X
    4952:	13 97       	sbiw	r26, 0x03	; 3
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	19 f0       	breq	.+6      	; 0x495e <free+0xf0>
    4958:	f8 01       	movw	r30, r16
    495a:	8c 01       	movw	r16, r24
    495c:	f6 cf       	rjmp	.-20     	; 0x494a <free+0xdc>
    495e:	8d 91       	ld	r24, X+
    4960:	9c 91       	ld	r25, X
    4962:	98 01       	movw	r18, r16
    4964:	2e 5f       	subi	r18, 0xFE	; 254
    4966:	3f 4f       	sbci	r19, 0xFF	; 255
    4968:	82 0f       	add	r24, r18
    496a:	93 1f       	adc	r25, r19
    496c:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <__brkval>
    4970:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <__brkval+0x1>
    4974:	28 17       	cp	r18, r24
    4976:	39 07       	cpc	r19, r25
    4978:	69 f4       	brne	.+26     	; 0x4994 <free+0x126>
    497a:	30 97       	sbiw	r30, 0x00	; 0
    497c:	29 f4       	brne	.+10     	; 0x4988 <free+0x11a>
    497e:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <__flp+0x1>
    4982:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <__flp>
    4986:	02 c0       	rjmp	.+4      	; 0x498c <free+0x11e>
    4988:	13 82       	std	Z+3, r1	; 0x03
    498a:	12 82       	std	Z+2, r1	; 0x02
    498c:	10 93 52 05 	sts	0x0552, r17	; 0x800552 <__brkval+0x1>
    4990:	00 93 51 05 	sts	0x0551, r16	; 0x800551 <__brkval>
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	1f 91       	pop	r17
    499a:	0f 91       	pop	r16
    499c:	08 95       	ret

0000499e <realloc>:
    499e:	a0 e0       	ldi	r26, 0x00	; 0
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	e5 ed       	ldi	r30, 0xD5	; 213
    49a4:	f4 e2       	ldi	r31, 0x24	; 36
    49a6:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <__prologue_saves__+0x8>
    49aa:	ec 01       	movw	r28, r24
    49ac:	00 97       	sbiw	r24, 0x00	; 0
    49ae:	21 f4       	brne	.+8      	; 0x49b8 <realloc+0x1a>
    49b0:	cb 01       	movw	r24, r22
    49b2:	0e 94 a2 23 	call	0x4744	; 0x4744 <malloc>
    49b6:	b8 c0       	rjmp	.+368    	; 0x4b28 <realloc+0x18a>
    49b8:	fc 01       	movw	r30, r24
    49ba:	e6 0f       	add	r30, r22
    49bc:	f7 1f       	adc	r31, r23
    49be:	9c 01       	movw	r18, r24
    49c0:	22 50       	subi	r18, 0x02	; 2
    49c2:	31 09       	sbc	r19, r1
    49c4:	e2 17       	cp	r30, r18
    49c6:	f3 07       	cpc	r31, r19
    49c8:	08 f4       	brcc	.+2      	; 0x49cc <realloc+0x2e>
    49ca:	ac c0       	rjmp	.+344    	; 0x4b24 <realloc+0x186>
    49cc:	d9 01       	movw	r26, r18
    49ce:	0d 91       	ld	r16, X+
    49d0:	1c 91       	ld	r17, X
    49d2:	11 97       	sbiw	r26, 0x01	; 1
    49d4:	06 17       	cp	r16, r22
    49d6:	17 07       	cpc	r17, r23
    49d8:	b0 f0       	brcs	.+44     	; 0x4a06 <realloc+0x68>
    49da:	05 30       	cpi	r16, 0x05	; 5
    49dc:	11 05       	cpc	r17, r1
    49de:	08 f4       	brcc	.+2      	; 0x49e2 <realloc+0x44>
    49e0:	9f c0       	rjmp	.+318    	; 0x4b20 <realloc+0x182>
    49e2:	c8 01       	movw	r24, r16
    49e4:	04 97       	sbiw	r24, 0x04	; 4
    49e6:	86 17       	cp	r24, r22
    49e8:	97 07       	cpc	r25, r23
    49ea:	08 f4       	brcc	.+2      	; 0x49ee <realloc+0x50>
    49ec:	99 c0       	rjmp	.+306    	; 0x4b20 <realloc+0x182>
    49ee:	02 50       	subi	r16, 0x02	; 2
    49f0:	11 09       	sbc	r17, r1
    49f2:	06 1b       	sub	r16, r22
    49f4:	17 0b       	sbc	r17, r23
    49f6:	01 93       	st	Z+, r16
    49f8:	11 93       	st	Z+, r17
    49fa:	6d 93       	st	X+, r22
    49fc:	7c 93       	st	X, r23
    49fe:	cf 01       	movw	r24, r30
    4a00:	0e 94 37 24 	call	0x486e	; 0x486e <free>
    4a04:	8d c0       	rjmp	.+282    	; 0x4b20 <realloc+0x182>
    4a06:	5b 01       	movw	r10, r22
    4a08:	a0 1a       	sub	r10, r16
    4a0a:	b1 0a       	sbc	r11, r17
    4a0c:	4c 01       	movw	r8, r24
    4a0e:	80 0e       	add	r8, r16
    4a10:	91 1e       	adc	r9, r17
    4a12:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <__flp>
    4a16:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <__flp+0x1>
    4a1a:	40 e0       	ldi	r20, 0x00	; 0
    4a1c:	50 e0       	ldi	r21, 0x00	; 0
    4a1e:	e1 2c       	mov	r14, r1
    4a20:	f1 2c       	mov	r15, r1
    4a22:	10 97       	sbiw	r26, 0x00	; 0
    4a24:	09 f4       	brne	.+2      	; 0x4a28 <realloc+0x8a>
    4a26:	4a c0       	rjmp	.+148    	; 0x4abc <realloc+0x11e>
    4a28:	a8 15       	cp	r26, r8
    4a2a:	b9 05       	cpc	r27, r9
    4a2c:	d1 f5       	brne	.+116    	; 0x4aa2 <realloc+0x104>
    4a2e:	6d 90       	ld	r6, X+
    4a30:	7c 90       	ld	r7, X
    4a32:	11 97       	sbiw	r26, 0x01	; 1
    4a34:	63 01       	movw	r12, r6
    4a36:	82 e0       	ldi	r24, 0x02	; 2
    4a38:	c8 0e       	add	r12, r24
    4a3a:	d1 1c       	adc	r13, r1
    4a3c:	ca 14       	cp	r12, r10
    4a3e:	db 04       	cpc	r13, r11
    4a40:	80 f1       	brcs	.+96     	; 0x4aa2 <realloc+0x104>
    4a42:	a3 01       	movw	r20, r6
    4a44:	4a 19       	sub	r20, r10
    4a46:	5b 09       	sbc	r21, r11
    4a48:	6a 01       	movw	r12, r20
    4a4a:	82 e0       	ldi	r24, 0x02	; 2
    4a4c:	c8 0e       	add	r12, r24
    4a4e:	d1 1c       	adc	r13, r1
    4a50:	12 96       	adiw	r26, 0x02	; 2
    4a52:	bc 90       	ld	r11, X
    4a54:	12 97       	sbiw	r26, 0x02	; 2
    4a56:	13 96       	adiw	r26, 0x03	; 3
    4a58:	ac 91       	ld	r26, X
    4a5a:	b5 e0       	ldi	r27, 0x05	; 5
    4a5c:	cb 16       	cp	r12, r27
    4a5e:	d1 04       	cpc	r13, r1
    4a60:	40 f0       	brcs	.+16     	; 0x4a72 <realloc+0xd4>
    4a62:	b2 82       	std	Z+2, r11	; 0x02
    4a64:	a3 83       	std	Z+3, r26	; 0x03
    4a66:	51 83       	std	Z+1, r21	; 0x01
    4a68:	40 83       	st	Z, r20
    4a6a:	d9 01       	movw	r26, r18
    4a6c:	6d 93       	st	X+, r22
    4a6e:	7c 93       	st	X, r23
    4a70:	0a c0       	rjmp	.+20     	; 0x4a86 <realloc+0xe8>
    4a72:	0e 5f       	subi	r16, 0xFE	; 254
    4a74:	1f 4f       	sbci	r17, 0xFF	; 255
    4a76:	c3 01       	movw	r24, r6
    4a78:	80 0f       	add	r24, r16
    4a7a:	91 1f       	adc	r25, r17
    4a7c:	f9 01       	movw	r30, r18
    4a7e:	91 83       	std	Z+1, r25	; 0x01
    4a80:	80 83       	st	Z, r24
    4a82:	eb 2d       	mov	r30, r11
    4a84:	fa 2f       	mov	r31, r26
    4a86:	e1 14       	cp	r14, r1
    4a88:	f1 04       	cpc	r15, r1
    4a8a:	31 f0       	breq	.+12     	; 0x4a98 <realloc+0xfa>
    4a8c:	d7 01       	movw	r26, r14
    4a8e:	13 96       	adiw	r26, 0x03	; 3
    4a90:	fc 93       	st	X, r31
    4a92:	ee 93       	st	-X, r30
    4a94:	12 97       	sbiw	r26, 0x02	; 2
    4a96:	44 c0       	rjmp	.+136    	; 0x4b20 <realloc+0x182>
    4a98:	f0 93 54 05 	sts	0x0554, r31	; 0x800554 <__flp+0x1>
    4a9c:	e0 93 53 05 	sts	0x0553, r30	; 0x800553 <__flp>
    4aa0:	3f c0       	rjmp	.+126    	; 0x4b20 <realloc+0x182>
    4aa2:	8d 91       	ld	r24, X+
    4aa4:	9c 91       	ld	r25, X
    4aa6:	11 97       	sbiw	r26, 0x01	; 1
    4aa8:	48 17       	cp	r20, r24
    4aaa:	59 07       	cpc	r21, r25
    4aac:	08 f4       	brcc	.+2      	; 0x4ab0 <realloc+0x112>
    4aae:	ac 01       	movw	r20, r24
    4ab0:	7d 01       	movw	r14, r26
    4ab2:	12 96       	adiw	r26, 0x02	; 2
    4ab4:	0d 90       	ld	r0, X+
    4ab6:	bc 91       	ld	r27, X
    4ab8:	a0 2d       	mov	r26, r0
    4aba:	b3 cf       	rjmp	.-154    	; 0x4a22 <realloc+0x84>
    4abc:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <__brkval>
    4ac0:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <__brkval+0x1>
    4ac4:	88 15       	cp	r24, r8
    4ac6:	99 05       	cpc	r25, r9
    4ac8:	e1 f4       	brne	.+56     	; 0x4b02 <realloc+0x164>
    4aca:	46 17       	cp	r20, r22
    4acc:	57 07       	cpc	r21, r23
    4ace:	c8 f4       	brcc	.+50     	; 0x4b02 <realloc+0x164>
    4ad0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4ad4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4ad8:	00 97       	sbiw	r24, 0x00	; 0
    4ada:	41 f4       	brne	.+16     	; 0x4aec <realloc+0x14e>
    4adc:	8d b7       	in	r24, 0x3d	; 61
    4ade:	9e b7       	in	r25, 0x3e	; 62
    4ae0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4ae4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4ae8:	84 1b       	sub	r24, r20
    4aea:	95 0b       	sbc	r25, r21
    4aec:	e8 17       	cp	r30, r24
    4aee:	f9 07       	cpc	r31, r25
    4af0:	c8 f4       	brcc	.+50     	; 0x4b24 <realloc+0x186>
    4af2:	f0 93 52 05 	sts	0x0552, r31	; 0x800552 <__brkval+0x1>
    4af6:	e0 93 51 05 	sts	0x0551, r30	; 0x800551 <__brkval>
    4afa:	f9 01       	movw	r30, r18
    4afc:	71 83       	std	Z+1, r23	; 0x01
    4afe:	60 83       	st	Z, r22
    4b00:	0f c0       	rjmp	.+30     	; 0x4b20 <realloc+0x182>
    4b02:	cb 01       	movw	r24, r22
    4b04:	0e 94 a2 23 	call	0x4744	; 0x4744 <malloc>
    4b08:	7c 01       	movw	r14, r24
    4b0a:	00 97       	sbiw	r24, 0x00	; 0
    4b0c:	59 f0       	breq	.+22     	; 0x4b24 <realloc+0x186>
    4b0e:	a8 01       	movw	r20, r16
    4b10:	be 01       	movw	r22, r28
    4b12:	0e 94 99 25 	call	0x4b32	; 0x4b32 <memcpy>
    4b16:	ce 01       	movw	r24, r28
    4b18:	0e 94 37 24 	call	0x486e	; 0x486e <free>
    4b1c:	c7 01       	movw	r24, r14
    4b1e:	04 c0       	rjmp	.+8      	; 0x4b28 <realloc+0x18a>
    4b20:	ce 01       	movw	r24, r28
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <realloc+0x18a>
    4b24:	80 e0       	ldi	r24, 0x00	; 0
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	cd b7       	in	r28, 0x3d	; 61
    4b2a:	de b7       	in	r29, 0x3e	; 62
    4b2c:	ee e0       	ldi	r30, 0x0E	; 14
    4b2e:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <__epilogue_restores__+0x8>

00004b32 <memcpy>:
    4b32:	fb 01       	movw	r30, r22
    4b34:	dc 01       	movw	r26, r24
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <memcpy+0xa>
    4b38:	01 90       	ld	r0, Z+
    4b3a:	0d 92       	st	X+, r0
    4b3c:	41 50       	subi	r20, 0x01	; 1
    4b3e:	50 40       	sbci	r21, 0x00	; 0
    4b40:	d8 f7       	brcc	.-10     	; 0x4b38 <memcpy+0x6>
    4b42:	08 95       	ret

00004b44 <strcpy>:
    4b44:	fb 01       	movw	r30, r22
    4b46:	dc 01       	movw	r26, r24
    4b48:	01 90       	ld	r0, Z+
    4b4a:	0d 92       	st	X+, r0
    4b4c:	00 20       	and	r0, r0
    4b4e:	e1 f7       	brne	.-8      	; 0x4b48 <strcpy+0x4>
    4b50:	08 95       	ret

00004b52 <strstr>:
    4b52:	fb 01       	movw	r30, r22
    4b54:	51 91       	ld	r21, Z+
    4b56:	55 23       	and	r21, r21
    4b58:	a9 f0       	breq	.+42     	; 0x4b84 <strstr+0x32>
    4b5a:	bf 01       	movw	r22, r30
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	4d 91       	ld	r20, X+
    4b60:	45 17       	cp	r20, r21
    4b62:	41 11       	cpse	r20, r1
    4b64:	e1 f7       	brne	.-8      	; 0x4b5e <strstr+0xc>
    4b66:	59 f4       	brne	.+22     	; 0x4b7e <strstr+0x2c>
    4b68:	cd 01       	movw	r24, r26
    4b6a:	01 90       	ld	r0, Z+
    4b6c:	00 20       	and	r0, r0
    4b6e:	49 f0       	breq	.+18     	; 0x4b82 <strstr+0x30>
    4b70:	4d 91       	ld	r20, X+
    4b72:	40 15       	cp	r20, r0
    4b74:	41 11       	cpse	r20, r1
    4b76:	c9 f3       	breq	.-14     	; 0x4b6a <strstr+0x18>
    4b78:	fb 01       	movw	r30, r22
    4b7a:	41 11       	cpse	r20, r1
    4b7c:	ef cf       	rjmp	.-34     	; 0x4b5c <strstr+0xa>
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	08 95       	ret

00004b86 <__itoa_ncheck>:
    4b86:	bb 27       	eor	r27, r27
    4b88:	4a 30       	cpi	r20, 0x0A	; 10
    4b8a:	31 f4       	brne	.+12     	; 0x4b98 <__itoa_ncheck+0x12>
    4b8c:	99 23       	and	r25, r25
    4b8e:	22 f4       	brpl	.+8      	; 0x4b98 <__itoa_ncheck+0x12>
    4b90:	bd e2       	ldi	r27, 0x2D	; 45
    4b92:	90 95       	com	r25
    4b94:	81 95       	neg	r24
    4b96:	9f 4f       	sbci	r25, 0xFF	; 255
    4b98:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__utoa_common>

00004b9c <__utoa_ncheck>:
    4b9c:	bb 27       	eor	r27, r27

00004b9e <__utoa_common>:
    4b9e:	fb 01       	movw	r30, r22
    4ba0:	55 27       	eor	r21, r21
    4ba2:	aa 27       	eor	r26, r26
    4ba4:	88 0f       	add	r24, r24
    4ba6:	99 1f       	adc	r25, r25
    4ba8:	aa 1f       	adc	r26, r26
    4baa:	a4 17       	cp	r26, r20
    4bac:	10 f0       	brcs	.+4      	; 0x4bb2 <__utoa_common+0x14>
    4bae:	a4 1b       	sub	r26, r20
    4bb0:	83 95       	inc	r24
    4bb2:	50 51       	subi	r21, 0x10	; 16
    4bb4:	b9 f7       	brne	.-18     	; 0x4ba4 <__utoa_common+0x6>
    4bb6:	a0 5d       	subi	r26, 0xD0	; 208
    4bb8:	aa 33       	cpi	r26, 0x3A	; 58
    4bba:	08 f0       	brcs	.+2      	; 0x4bbe <__utoa_common+0x20>
    4bbc:	a9 5d       	subi	r26, 0xD9	; 217
    4bbe:	a1 93       	st	Z+, r26
    4bc0:	00 97       	sbiw	r24, 0x00	; 0
    4bc2:	79 f7       	brne	.-34     	; 0x4ba2 <__utoa_common+0x4>
    4bc4:	b1 11       	cpse	r27, r1
    4bc6:	b1 93       	st	Z+, r27
    4bc8:	11 92       	st	Z+, r1
    4bca:	cb 01       	movw	r24, r22
    4bcc:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <strrev>

00004bd0 <strrev>:
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	67 2f       	mov	r22, r23
    4bd6:	71 91       	ld	r23, Z+
    4bd8:	77 23       	and	r23, r23
    4bda:	e1 f7       	brne	.-8      	; 0x4bd4 <strrev+0x4>
    4bdc:	32 97       	sbiw	r30, 0x02	; 2
    4bde:	04 c0       	rjmp	.+8      	; 0x4be8 <strrev+0x18>
    4be0:	7c 91       	ld	r23, X
    4be2:	6d 93       	st	X+, r22
    4be4:	70 83       	st	Z, r23
    4be6:	62 91       	ld	r22, -Z
    4be8:	ae 17       	cp	r26, r30
    4bea:	bf 07       	cpc	r27, r31
    4bec:	c8 f3       	brcs	.-14     	; 0x4be0 <strrev+0x10>
    4bee:	08 95       	ret

00004bf0 <__prologue_saves__>:
    4bf0:	2f 92       	push	r2
    4bf2:	3f 92       	push	r3
    4bf4:	4f 92       	push	r4
    4bf6:	5f 92       	push	r5
    4bf8:	6f 92       	push	r6
    4bfa:	7f 92       	push	r7
    4bfc:	8f 92       	push	r8
    4bfe:	9f 92       	push	r9
    4c00:	af 92       	push	r10
    4c02:	bf 92       	push	r11
    4c04:	cf 92       	push	r12
    4c06:	df 92       	push	r13
    4c08:	ef 92       	push	r14
    4c0a:	ff 92       	push	r15
    4c0c:	0f 93       	push	r16
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	cd b7       	in	r28, 0x3d	; 61
    4c16:	de b7       	in	r29, 0x3e	; 62
    4c18:	ca 1b       	sub	r28, r26
    4c1a:	db 0b       	sbc	r29, r27
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	cd bf       	out	0x3d, r28	; 61
    4c26:	09 94       	ijmp

00004c28 <__epilogue_restores__>:
    4c28:	2a 88       	ldd	r2, Y+18	; 0x12
    4c2a:	39 88       	ldd	r3, Y+17	; 0x11
    4c2c:	48 88       	ldd	r4, Y+16	; 0x10
    4c2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c30:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c32:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c34:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c36:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c38:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c3a:	b9 84       	ldd	r11, Y+9	; 0x09
    4c3c:	c8 84       	ldd	r12, Y+8	; 0x08
    4c3e:	df 80       	ldd	r13, Y+7	; 0x07
    4c40:	ee 80       	ldd	r14, Y+6	; 0x06
    4c42:	fd 80       	ldd	r15, Y+5	; 0x05
    4c44:	0c 81       	ldd	r16, Y+4	; 0x04
    4c46:	1b 81       	ldd	r17, Y+3	; 0x03
    4c48:	aa 81       	ldd	r26, Y+2	; 0x02
    4c4a:	b9 81       	ldd	r27, Y+1	; 0x01
    4c4c:	ce 0f       	add	r28, r30
    4c4e:	d1 1d       	adc	r29, r1
    4c50:	0f b6       	in	r0, 0x3f	; 63
    4c52:	f8 94       	cli
    4c54:	de bf       	out	0x3e, r29	; 62
    4c56:	0f be       	out	0x3f, r0	; 63
    4c58:	cd bf       	out	0x3d, r28	; 61
    4c5a:	ed 01       	movw	r28, r26
    4c5c:	08 95       	ret

00004c5e <_exit>:
    4c5e:	f8 94       	cli

00004c60 <__stop_program>:
    4c60:	ff cf       	rjmp	.-2      	; 0x4c60 <__stop_program>
